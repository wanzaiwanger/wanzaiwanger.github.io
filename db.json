{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo@2x.png","path":"images/logo@2x.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/mylogo.png","path":"images/mylogo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"71c95774de16f2039ec0188b41e1ba5bab1f5bda","modified":1573107407390},{"_id":"source/robots.txt","hash":"99276e2a5485017b35cd46124e3d21b84b41904c","modified":1573810435897},{"_id":"themes/anatole/LICENSE","hash":"013aeea58737aaf555e4487dab17f06286597c3d","modified":1573107407400},{"_id":"themes/anatole/README.md","hash":"8e51a41de2ce148db91c3ef60987bc2d2f4ec5d7","modified":1573107407400},{"_id":"themes/anatole/_config.yml","hash":"9915127e7998377dd51acbc2cd47c8707ca2e178","modified":1586241443412},{"_id":"source/_posts/2017-mid-year-summary.md","hash":"f1a74660ca4a657dba1c3a582431429e4a23c051","modified":1574738753105},{"_id":"source/_posts/2020-resolution.md","hash":"6701ed30a524781771cdac745b47112fb4839f97","modified":1583397874350},{"_id":"source/_posts/Build-a-Personal-Blog-With-Hexo.md","hash":"b44f407f2a3eccf9a771a6b9fea9d2c2ba88a2aa","modified":1573810752470},{"_id":"source/_posts/Decorator-in-JavaScript.md","hash":"b726efd18365c9a58e664995ecad7e05e28b60fe","modified":1573810752462},{"_id":"source/_posts/Iterators-and-generators.md","hash":"f01965d48442e38dde522a014aa20e722a6c11d8","modified":1573810752466},{"_id":"source/_posts/ES6-Block-Binding.md","hash":"20447ced17a9693d3c8bc5e0039974d9a91b9dbc","modified":1573810752463},{"_id":"source/_posts/Regret-Minimization-and-Multi-task-Serially.md","hash":"92d72aa18bb92ec14b4baf28d41c5e1b6a647a3f","modified":1573810752471},{"_id":"source/_posts/Run-react-native-app-on-Mac.md","hash":"b7c9393d0c1f024a1df723bfcb3a582ea4b99340","modified":1573810752465},{"_id":"source/_posts/Timers-in-JavaScript.md","hash":"c23594b2b583c6a3007cb2dd7940b5cb2ee68b7b","modified":1573810752469},{"_id":"source/_posts/ecmascript2015-modules.md","hash":"cf9218e5f6f9b4979e9a0916a0261e0fea0b36b2","modified":1573810752467},{"_id":"source/_posts/effective-javascript.md","hash":"02bbaee82f314d5b250f7d8d38148dd3ffc8cfa3","modified":1585803231562},{"_id":"source/_posts/flutter-setup.md","hash":"4d52d1837fd597d1158f26f69b39d73b4b86f3ed","modified":1585758233488},{"_id":"source/_posts/interview-with-huawei.md","hash":"5244f8a9792ac8d0240901ecdaf2e410306bd191","modified":1574738738815},{"_id":"source/_posts/javascript-events.md","hash":"b9896c9404036027e2a04c8f85b0b1aaffa53c2f","modified":1573810752468},{"_id":"source/_posts/javaScript-leetCode-day-1.md","hash":"a0a6b9623c0fcd8f2ea0de6c9d0a59ace633d41f","modified":1586228780362},{"_id":"source/_posts/march-summary.md","hash":"7078c76c2c39d0a85dafa6aa5665bb68f9ed9e2f","modified":1574738725508},{"_id":"source/_posts/new-job.md","hash":"0015089dbedab0847a4476f4dc016aa618a2a32c","modified":1574738651227},{"_id":"source/_posts/node-modules.md","hash":"b3708a625709d1f4ad8688de431248331aba890a","modified":1573810752477},{"_id":"source/_posts/tooltip-in-echars.md","hash":"25307b8f301e6c1dc274d8d3ba02dbe34de89e22","modified":1573810752476},{"_id":"source/_posts/promise-vs-observables.md","hash":"70a3139378fd7c74aefbee749f4623b14efc1026","modified":1573810752472},{"_id":"source/about/index.md","hash":"958d3ff4b741fea54d261ed54ae087e4baaa189e","modified":1573107407400},{"_id":"source/categories/index.md","hash":"2029d39cc68b2fc09655d126cfc51374bba153ff","modified":1573107407400},{"_id":"source/tags/index.md","hash":"771e3964b6e5ce39dcb5adb87be4c17b9783f632","modified":1573107407400},{"_id":"themes/anatole/layout/archive.jade","hash":"52b73d18420af570ece4e749985a8c548e7571ea","modified":1573107407402},{"_id":"themes/anatole/layout/index.jade","hash":"ab8828a0e8d7595b0931247debcdab649864e5db","modified":1573107407402},{"_id":"themes/anatole/layout/mixins.jade","hash":"0e54fc9b01a12b35261e6c41234c0632ccc54c68","modified":1573107407403},{"_id":"themes/anatole/layout/page.jade","hash":"300e3fa98fd7cb2627589d3555ab4863cfeedd0c","modified":1585569490914},{"_id":"themes/anatole/layout/projects.jade","hash":"1317a0f1cc0fc2299f423a8a1f8f3637c48d7dd0","modified":1573107407409},{"_id":"themes/anatole/layout/post.jade","hash":"db66bbfc35b8aa3639b9f2dc24d498e160249373","modified":1586241717872},{"_id":"themes/anatole/layout/partial/comments.jade","hash":"793f056f968a64f2a540756c0a5e11a0e894fe93","modified":1573107407404},{"_id":"themes/anatole/layout/partial/footer.jade","hash":"aba48a32c8cc9809d8e796a7f87dac0d8761afc1","modified":1573107407405},{"_id":"themes/anatole/layout/partial/nav.jade","hash":"75c1a8dc0d47ca66e9ad6291fbf563fdfe3bd8bc","modified":1583397874351},{"_id":"themes/anatole/layout/partial/head.jade","hash":"1c35bbde7a04a6c64540eb7f465842030ec3ca3a","modified":1585757942765},{"_id":"themes/anatole/layout/partial/layout.jade","hash":"f87664890d656fc27af17edd27e6c0dd965e68d2","modified":1585798428248},{"_id":"themes/anatole/layout/partial/sidebar.jade","hash":"5d48d545695917600067bc352798488ede4ae493","modified":1585757593151},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"aad20484db2d30298553e5e54212ddf3fbc0164b","modified":1573107407410},{"_id":"themes/anatole/source/css/custom.css","hash":"dd127bc7e05e009b71aab5d71469cdf43ef78ee2","modified":1573107407410},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1573107407411},{"_id":"themes/anatole/source/css/style.css","hash":"0b3ad6983fdb47ba5754fb64b8e84daef8640954","modified":1586241805227},{"_id":"themes/anatole/source/css/style.scss","hash":"400c3adb4d0b07065a3f8af83cf7284edbfa173d","modified":1573107407411},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1573107407412},{"_id":"themes/anatole/source/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1573107407416},{"_id":"themes/anatole/source/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1573107407416},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1573107407416},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1573107407419},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1573107407419},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1573107407415},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1573107407415},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1573107407421},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1573107407414},{"_id":"themes/anatole/source/images/mylogo.png","hash":"bb12c3110592128245b8202eae6ddcb2acba7e5f","modified":1573107407419}],"Category":[{"name":"life","_id":"ck8pirmmw000nf5s6dnhdhf5j"},{"name":"tech","_id":"ck8pirmn8000rf5s6j7x06saw"},{"name":"web","_id":"ck8pirmnc000tf5s68ck59i82"},{"name":"algorithm","_id":"ck8pirmnn001gf5s6rx6naxdi"}],"Data":[],"Page":[{"title":"about","date":"2017-04-08T10:23:22.000Z","_content":"This is about page.\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-08 03:23:22\n---\nThis is about page.\n","updated":"2019-11-07T06:16:47.400Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck8pirmlt0000f5s6bgkmadtq","content":"<p>This is about page.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is about page.</p>\n"},{"title":"categories","date":"2017-04-10T07:03:14.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-04-10 00:03:14\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-11-07T06:16:47.400Z","path":"categories/index.html","layout":"page","_id":"ck8pirmlz0002f5s63pcz4z6k","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-04-10T07:03:21.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-10 00:03:21\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-11-07T06:16:47.400Z","path":"tags/index.html","layout":"page","_id":"ck8pirmm30004f5s6tkpqiuju","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2017年中总结","abbrlink":"543d8669","date":"2017-06-07T06:20:20.000Z","_content":"\n最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。\n\n时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。\n\n回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。\n\n对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。\n\n说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。\n\n第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。\n\n总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。\n\n2017/06/06\n","source":"_posts/2017-mid-year-summary.md","raw":"---\ntitle: 2017年中总结\ncategories:\n  - life\nabbrlink: 543d8669\ndate: 2017-06-06 23:20:20\ntags:\n---\n\n最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。\n\n时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。\n\n回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。\n\n对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。\n\n说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。\n\n第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。\n\n总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。\n\n2017/06/06\n","slug":"2017-mid-year-summary","published":1,"updated":"2019-11-26T03:25:53.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmlu0001f5s6pk8esrq7","content":"<p>最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。</p>\n<p>时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。</p>\n<p>回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。</p>\n<p>对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。</p>\n<p>说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。</p>\n<p>第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。</p>\n<p>总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。</p>\n<p>2017/06/06</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。</p>\n<p>时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。</p>\n<p>回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。</p>\n<p>对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。</p>\n<p>说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。</p>\n<p>第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。</p>\n<p>总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。</p>\n<p>2017/06/06</p>\n"},{"title":"2020 Resolution","abbrlink":"38799c5f","date":"2020-01-15T01:03:28.000Z","_content":"\n说来十分惭愧，为自己的行动力感到汗颜。本打算年初的时候做一个总结，然后制定新年的计划，结果一下子就晃荡到了三月。\n\n我一直是这么看待拖延症，究其原因，还是能力不足导致不愿迈出第一歩，所以迟迟不愿开始。好多事情拖着拖着就没有想去做的念头了。今年首先要改的就是拖延，凡事想到就立刻去做。如果手头正有事，就插入队列中，上一件事完成之后立刻消费掉。比如该回的消息立刻就回复，突然出现的想法随手记录下来，看完了书和电影有感而发就写一段短评。虽然可以预想在开始阶段肯定不会得心应手，先试一段时间再看看。\n\n说回计划，往年可能会说，要读多少书，看多少电影。但是近来隐约有些担心自己的逻辑表达，逐渐陷入碎片化的泥沼。所以今年给自己定了一个小目标，希望多思考，然后落到纸上。最近看了阿乙的《寡人》，书怎么样另说，但是形式给我提供了一个思路。时不时的写上一段，记录下自己的想法，日后再看，或许可以提供一些不同的见解和反思。不敢把目标定得太高，希望年末的时候可以有两万字，来记下我这一年的思考和心得。\n\n除了开始练习写作，阅读也不能落下。在美国的时候，我只看有用的书，技术相关的，不看无用的书。后来想想，这样容易钻牛角尖，整个人就仿佛一台机器，一刻不停歇。无法从工作和一成不变的生活中抽离出来，无法反思，无法思考。现在知道了，不仅要看技术的书，也需要看小说，看传记，看科普类读物，无他，提供另一种生活，另一种思想。这样人才不会故步自封，止步于前。\n\n在技术方面，说起来既羞愧又自责，最近每天早上起来坐在电脑前，第一件事是刷刷微博、知乎，而去年年初时，每天早上到公司第一件事是看 medium 上推送的技术文章。现在想想，过去一年几乎完全没有进步。也很清楚原因——工作上的消极深刻影响到了自己学习的积极性。今年需要纠正过来，找几个方向好好钻研一下，保持每天阅读技术文章的习惯。刷题也得继续，前段时间一直码业务，最近公司不太乐观，还是得多准备准备，保持对算法的熟练程度。\n\n生活方面，希望能早睡早起，现在每天记录自己的起床时间，争取每天早起十分钟，直到稳定到八点钟。年纪大了，感觉新陈代谢也没有年轻时旺盛，呆久了就感觉很是萎靡，虽然说也有最近疫情的影响，每天宅在家中。日常锻炼不可少，每天波比跳不能停。\n\n最后，希望可以找个女朋友，这也算是今年最大的愿望了吧，如果顺利，再养只猫猫狗狗，就再好不过了。\n","source":"_posts/2020-resolution.md","raw":"---\ntitle: 2020 Resolution\ncategories:\n  - life\ntags:\n  - resolution\nabbrlink: 38799c5f\ndate: 2020-01-14 17:03:28\n---\n\n说来十分惭愧，为自己的行动力感到汗颜。本打算年初的时候做一个总结，然后制定新年的计划，结果一下子就晃荡到了三月。\n\n我一直是这么看待拖延症，究其原因，还是能力不足导致不愿迈出第一歩，所以迟迟不愿开始。好多事情拖着拖着就没有想去做的念头了。今年首先要改的就是拖延，凡事想到就立刻去做。如果手头正有事，就插入队列中，上一件事完成之后立刻消费掉。比如该回的消息立刻就回复，突然出现的想法随手记录下来，看完了书和电影有感而发就写一段短评。虽然可以预想在开始阶段肯定不会得心应手，先试一段时间再看看。\n\n说回计划，往年可能会说，要读多少书，看多少电影。但是近来隐约有些担心自己的逻辑表达，逐渐陷入碎片化的泥沼。所以今年给自己定了一个小目标，希望多思考，然后落到纸上。最近看了阿乙的《寡人》，书怎么样另说，但是形式给我提供了一个思路。时不时的写上一段，记录下自己的想法，日后再看，或许可以提供一些不同的见解和反思。不敢把目标定得太高，希望年末的时候可以有两万字，来记下我这一年的思考和心得。\n\n除了开始练习写作，阅读也不能落下。在美国的时候，我只看有用的书，技术相关的，不看无用的书。后来想想，这样容易钻牛角尖，整个人就仿佛一台机器，一刻不停歇。无法从工作和一成不变的生活中抽离出来，无法反思，无法思考。现在知道了，不仅要看技术的书，也需要看小说，看传记，看科普类读物，无他，提供另一种生活，另一种思想。这样人才不会故步自封，止步于前。\n\n在技术方面，说起来既羞愧又自责，最近每天早上起来坐在电脑前，第一件事是刷刷微博、知乎，而去年年初时，每天早上到公司第一件事是看 medium 上推送的技术文章。现在想想，过去一年几乎完全没有进步。也很清楚原因——工作上的消极深刻影响到了自己学习的积极性。今年需要纠正过来，找几个方向好好钻研一下，保持每天阅读技术文章的习惯。刷题也得继续，前段时间一直码业务，最近公司不太乐观，还是得多准备准备，保持对算法的熟练程度。\n\n生活方面，希望能早睡早起，现在每天记录自己的起床时间，争取每天早起十分钟，直到稳定到八点钟。年纪大了，感觉新陈代谢也没有年轻时旺盛，呆久了就感觉很是萎靡，虽然说也有最近疫情的影响，每天宅在家中。日常锻炼不可少，每天波比跳不能停。\n\n最后，希望可以找个女朋友，这也算是今年最大的愿望了吧，如果顺利，再养只猫猫狗狗，就再好不过了。\n","slug":"2020-resolution","published":1,"updated":"2020-03-05T08:44:34.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmm20003f5s6vgr40a0w","content":"<p>说来十分惭愧，为自己的行动力感到汗颜。本打算年初的时候做一个总结，然后制定新年的计划，结果一下子就晃荡到了三月。</p>\n<p>我一直是这么看待拖延症，究其原因，还是能力不足导致不愿迈出第一歩，所以迟迟不愿开始。好多事情拖着拖着就没有想去做的念头了。今年首先要改的就是拖延，凡事想到就立刻去做。如果手头正有事，就插入队列中，上一件事完成之后立刻消费掉。比如该回的消息立刻就回复，突然出现的想法随手记录下来，看完了书和电影有感而发就写一段短评。虽然可以预想在开始阶段肯定不会得心应手，先试一段时间再看看。</p>\n<p>说回计划，往年可能会说，要读多少书，看多少电影。但是近来隐约有些担心自己的逻辑表达，逐渐陷入碎片化的泥沼。所以今年给自己定了一个小目标，希望多思考，然后落到纸上。最近看了阿乙的《寡人》，书怎么样另说，但是形式给我提供了一个思路。时不时的写上一段，记录下自己的想法，日后再看，或许可以提供一些不同的见解和反思。不敢把目标定得太高，希望年末的时候可以有两万字，来记下我这一年的思考和心得。</p>\n<p>除了开始练习写作，阅读也不能落下。在美国的时候，我只看有用的书，技术相关的，不看无用的书。后来想想，这样容易钻牛角尖，整个人就仿佛一台机器，一刻不停歇。无法从工作和一成不变的生活中抽离出来，无法反思，无法思考。现在知道了，不仅要看技术的书，也需要看小说，看传记，看科普类读物，无他，提供另一种生活，另一种思想。这样人才不会故步自封，止步于前。</p>\n<p>在技术方面，说起来既羞愧又自责，最近每天早上起来坐在电脑前，第一件事是刷刷微博、知乎，而去年年初时，每天早上到公司第一件事是看 medium 上推送的技术文章。现在想想，过去一年几乎完全没有进步。也很清楚原因——工作上的消极深刻影响到了自己学习的积极性。今年需要纠正过来，找几个方向好好钻研一下，保持每天阅读技术文章的习惯。刷题也得继续，前段时间一直码业务，最近公司不太乐观，还是得多准备准备，保持对算法的熟练程度。</p>\n<p>生活方面，希望能早睡早起，现在每天记录自己的起床时间，争取每天早起十分钟，直到稳定到八点钟。年纪大了，感觉新陈代谢也没有年轻时旺盛，呆久了就感觉很是萎靡，虽然说也有最近疫情的影响，每天宅在家中。日常锻炼不可少，每天波比跳不能停。</p>\n<p>最后，希望可以找个女朋友，这也算是今年最大的愿望了吧，如果顺利，再养只猫猫狗狗，就再好不过了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>说来十分惭愧，为自己的行动力感到汗颜。本打算年初的时候做一个总结，然后制定新年的计划，结果一下子就晃荡到了三月。</p>\n<p>我一直是这么看待拖延症，究其原因，还是能力不足导致不愿迈出第一歩，所以迟迟不愿开始。好多事情拖着拖着就没有想去做的念头了。今年首先要改的就是拖延，凡事想到就立刻去做。如果手头正有事，就插入队列中，上一件事完成之后立刻消费掉。比如该回的消息立刻就回复，突然出现的想法随手记录下来，看完了书和电影有感而发就写一段短评。虽然可以预想在开始阶段肯定不会得心应手，先试一段时间再看看。</p>\n<p>说回计划，往年可能会说，要读多少书，看多少电影。但是近来隐约有些担心自己的逻辑表达，逐渐陷入碎片化的泥沼。所以今年给自己定了一个小目标，希望多思考，然后落到纸上。最近看了阿乙的《寡人》，书怎么样另说，但是形式给我提供了一个思路。时不时的写上一段，记录下自己的想法，日后再看，或许可以提供一些不同的见解和反思。不敢把目标定得太高，希望年末的时候可以有两万字，来记下我这一年的思考和心得。</p>\n<p>除了开始练习写作，阅读也不能落下。在美国的时候，我只看有用的书，技术相关的，不看无用的书。后来想想，这样容易钻牛角尖，整个人就仿佛一台机器，一刻不停歇。无法从工作和一成不变的生活中抽离出来，无法反思，无法思考。现在知道了，不仅要看技术的书，也需要看小说，看传记，看科普类读物，无他，提供另一种生活，另一种思想。这样人才不会故步自封，止步于前。</p>\n<p>在技术方面，说起来既羞愧又自责，最近每天早上起来坐在电脑前，第一件事是刷刷微博、知乎，而去年年初时，每天早上到公司第一件事是看 medium 上推送的技术文章。现在想想，过去一年几乎完全没有进步。也很清楚原因——工作上的消极深刻影响到了自己学习的积极性。今年需要纠正过来，找几个方向好好钻研一下，保持每天阅读技术文章的习惯。刷题也得继续，前段时间一直码业务，最近公司不太乐观，还是得多准备准备，保持对算法的熟练程度。</p>\n<p>生活方面，希望能早睡早起，现在每天记录自己的起床时间，争取每天早起十分钟，直到稳定到八点钟。年纪大了，感觉新陈代谢也没有年轻时旺盛，呆久了就感觉很是萎靡，虽然说也有最近疫情的影响，每天宅在家中。日常锻炼不可少，每天波比跳不能停。</p>\n<p>最后，希望可以找个女朋友，这也算是今年最大的愿望了吧，如果顺利，再养只猫猫狗狗，就再好不过了。</p>\n"},{"title":"Build a Personal Blog With Hexo","abbrlink":"a183496f","date":"2017-04-10T05:50:50.000Z","_content":"\nAfter spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I'm going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.\n\nBefore we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.\n\nThis article has five sections as follows:\n\n- Install Hexo\n- Deploy on Github\n- Add new layouts\n- Decorate with new Theme\n- Add Busuanzi & Disqus & Google Analytics\n\n#### Install Hexo\n\n```bash\nnpm install hexo-cli -g\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\nAfter the npm installation, you can now run the server:\n\n```bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\nAt this time, go to `localhost:4000`, and you should see your blog now has a \"Hello World\" article with default theme.\n\n#### Deploy on Github\n\nYou can follow [Github Pages](https://pages.github.com/) to create a repo in your github. After that, you can `git clone` with your https or ssh url to your local.\nThen back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\nThen update the `_config.yaml` file by adding these code in the bottom:\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: <your blog repo ssh or https url>\n  branch: master\n```\n\nAt this time, we can deploy the source code to the github repo:\n\n```bash\nhexo deploy\n```\n\n**TIP**: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:\n\n```bash\nhexo clean\n```\n\nThis command will clean the cache file (`db.json`) and generate files (`public`).\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\nNow, you can take a look at your blog in your browser.\n\n#### Add new layouts\n\n```bash\nhexo new post <title>\n```\n\nif met this fatal error:\n\n```bash\nError: fatal: in unpopulated submodule '.deploy_git'\n```\n\ntry install `hexo-deployer-git` again.\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n#### Publish\n\n```bash\nrm -rf .deploy_git\nhexo g\nhexo d\nhexo clean\n```\n\n#### CNAME\n\nstore the `CNAME` file in source so it won't be deleted automatically.\n","source":"_posts/Build-a-Personal-Blog-With-Hexo.md","raw":"---\ntitle: Build a Personal Blog With Hexo\ncategories:\n  - tech\ntags:\n  - hexo\n  - blog\n  - github\nabbrlink: a183496f\ndate: 2017-04-09 22:50:50\n---\n\nAfter spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I'm going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.\n\nBefore we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.\n\nThis article has five sections as follows:\n\n- Install Hexo\n- Deploy on Github\n- Add new layouts\n- Decorate with new Theme\n- Add Busuanzi & Disqus & Google Analytics\n\n#### Install Hexo\n\n```bash\nnpm install hexo-cli -g\nhexo init <folder>\ncd <folder>\nnpm install\n```\n\nAfter the npm installation, you can now run the server:\n\n```bash\nhexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\nAt this time, go to `localhost:4000`, and you should see your blog now has a \"Hello World\" article with default theme.\n\n#### Deploy on Github\n\nYou can follow [Github Pages](https://pages.github.com/) to create a repo in your github. After that, you can `git clone` with your https or ssh url to your local.\nThen back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\nThen update the `_config.yaml` file by adding these code in the bottom:\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: <your blog repo ssh or https url>\n  branch: master\n```\n\nAt this time, we can deploy the source code to the github repo:\n\n```bash\nhexo deploy\n```\n\n**TIP**: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:\n\n```bash\nhexo clean\n```\n\nThis command will clean the cache file (`db.json`) and generate files (`public`).\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\nNow, you can take a look at your blog in your browser.\n\n#### Add new layouts\n\n```bash\nhexo new post <title>\n```\n\nif met this fatal error:\n\n```bash\nError: fatal: in unpopulated submodule '.deploy_git'\n```\n\ntry install `hexo-deployer-git` again.\n\n```bash\nnpm install hexo-deployer-git --save\n```\n\n#### Publish\n\n```bash\nrm -rf .deploy_git\nhexo g\nhexo d\nhexo clean\n```\n\n#### CNAME\n\nstore the `CNAME` file in source so it won't be deleted automatically.\n","slug":"Build-a-Personal-Blog-With-Hexo","published":1,"updated":"2019-11-15T09:39:12.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmm40005f5s6e30rklvl","content":"<p>After spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I’m going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.</p>\n<p>Before we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.</p>\n<p>This article has five sections as follows:</p>\n<ul>\n<li>Install Hexo</li>\n<li>Deploy on Github</li>\n<li>Add new layouts</li>\n<li>Decorate with new Theme</li>\n<li>Add Busuanzi &amp; Disqus &amp; Google Analytics</li>\n</ul>\n<h4 id=\"Install-Hexo\"><a href=\"#Install-Hexo\" class=\"headerlink\" title=\"Install Hexo\"></a>Install Hexo</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>After the npm installation, you can now run the server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<p>At this time, go to <code>localhost:4000</code>, and you should see your blog now has a “Hello World” article with default theme.</p>\n<h4 id=\"Deploy-on-Github\"><a href=\"#Deploy-on-Github\" class=\"headerlink\" title=\"Deploy on Github\"></a>Deploy on Github</h4><p>You can follow <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a> to create a repo in your github. After that, you can <code>git clone</code> with your https or ssh url to your local.<br>Then back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>Then update the <code>_config.yaml</code> file by adding these code in the bottom:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;your blog repo ssh or https url&gt;</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>At this time, we can deploy the source code to the github repo:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p><strong>TIP</strong>: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<p>This command will clean the cache file (<code>db.json</code>) and generate files (<code>public</code>).</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p>Now, you can take a look at your blog in your browser.</p>\n<h4 id=\"Add-new-layouts\"><a href=\"#Add-new-layouts\" class=\"headerlink\" title=\"Add new layouts\"></a>Add new layouts</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>if met this fatal error:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">'.deploy_git'</span></span><br></pre></td></tr></table></figure>\n<p>try install <code>hexo-deployer-git</code> again.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<h4 id=\"Publish\"><a href=\"#Publish\" class=\"headerlink\" title=\"Publish\"></a>Publish</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<h4 id=\"CNAME\"><a href=\"#CNAME\" class=\"headerlink\" title=\"CNAME\"></a>CNAME</h4><p>store the <code>CNAME</code> file in source so it won’t be deleted automatically.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>After spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I’m going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.</p>\n<p>Before we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.</p>\n<p>This article has five sections as follows:</p>\n<ul>\n<li>Install Hexo</li>\n<li>Deploy on Github</li>\n<li>Add new layouts</li>\n<li>Decorate with new Theme</li>\n<li>Add Busuanzi &amp; Disqus &amp; Google Analytics</li>\n</ul>\n<h4 id=\"Install-Hexo\"><a href=\"#Install-Hexo\" class=\"headerlink\" title=\"Install Hexo\"></a>Install Hexo</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\"><span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>After the npm installation, you can now run the server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<p>At this time, go to <code>localhost:4000</code>, and you should see your blog now has a “Hello World” article with default theme.</p>\n<h4 id=\"Deploy-on-Github\"><a href=\"#Deploy-on-Github\" class=\"headerlink\" title=\"Deploy on Github\"></a>Deploy on Github</h4><p>You can follow <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a> to create a repo in your github. After that, you can <code>git clone</code> with your https or ssh url to your local.<br>Then back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>Then update the <code>_config.yaml</code> file by adding these code in the bottom:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;your blog repo ssh or https url&gt;</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>At this time, we can deploy the source code to the github repo:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<p><strong>TIP</strong>: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<p>This command will clean the cache file (<code>db.json</code>) and generate files (<code>public</code>).</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p>Now, you can take a look at your blog in your browser.</p>\n<h4 id=\"Add-new-layouts\"><a href=\"#Add-new-layouts\" class=\"headerlink\" title=\"Add new layouts\"></a>Add new layouts</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>if met this fatal error:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">'.deploy_git'</span></span><br></pre></td></tr></table></figure>\n<p>try install <code>hexo-deployer-git</code> again.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<h4 id=\"Publish\"><a href=\"#Publish\" class=\"headerlink\" title=\"Publish\"></a>Publish</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n<h4 id=\"CNAME\"><a href=\"#CNAME\" class=\"headerlink\" title=\"CNAME\"></a>CNAME</h4><p>store the <code>CNAME</code> file in source so it won’t be deleted automatically.</p>\n"},{"title":"Decorators in JavaScript","abbrlink":"89c05b44","date":"2018-10-21T00:14:24.000Z","_content":"\n#### Decorators in Python\n\nIn Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.\n\n```python\ndef identity(ob):\n    return ob\n\n@identity\ndef myfunc():\n    print \"my function\"\n\nmyfunc()\nprint myfunc\n```\n\n```shell\nmy function\n<function myfunc at 0xb76db17c>\n```\n\n#### ES2016 Decorators\n\nAn ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.\n\n##### Syntax\n\n```js\n// es5\nvar person = { name: 'John' };\n\nfunction addAge(age) {\n  return function(person) {\n    return {\n      age: age,\n      name: person.name,\n    };\n  };\n}\n\nvar newPerson = addAge(30)(person);\nconsole.log(newPerson);\n\n// es6 (babel)\n// this is the decorator factory\nfunction addAgeDecorator(age) {\n  // this is the decorator\n  return function(targetClass) {\n    // do something with 'target' and 'value'...\n    return class {\n      name = new targetClass().name;\n      age = age;\n    };\n  };\n}\n\n@addAgeDecorator(30)\nclass Person {\n  name = 'John';\n}\n\nconsole.log(new Person());\n```\n\n### Decorating a property\n\n```js\nclass Cat {\n  @readonly\n  meow() {\n    console.log(`Meow!`);\n  }\n\n  sing() {\n    console.log(`soft kitty~`);\n  }\n}\n\nfunction readonly(target, name, descriptor) {\n  descriptor.writable = false;\n  return descriptor;\n}\n\nvar Garfield = new Cat();\nGarfield.meow = function() {\n  console.log('I want lasagne!');\n};\nGarfield.sing = function() {\n  console.log(\"Let's rock\");\n};\n\nGarfield.meow();\nGarfield.sing();\n// http://jsfiddle.net/minhuizheng/0h45utcd/5/\n```\n\nexplanation:\n\ntarget — class that the property is a part of  \nname — the name of the property the decorator is modifying  \ndescriptor — property descriptor. Think: object passed to Object.defineProperty\n\n#### Reference and Reading\n\n1. [Exploring EcmaScript Decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841)\n\n2. [Javascript Decorators](https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3)\n\n3. [Decorators](https://www.typescriptlang.org/docs/handbook/decorators.html)\n\n4. [JavaScript Decorators: What They Are and When to Use Them](https://www.sitepoint.com/javascript-decorators-what-they-are/)\n\n5. [React DnD](http://react-dnd.github.io/react-dnd/)\n","source":"_posts/Decorator-in-JavaScript.md","raw":"---\ntitle: Decorators in JavaScript\ncategories:\n  - web\ntags:\n  - ECMAScript2016\n  - es7\n  - decorator\n  - javascript\nabbrlink: 89c05b44\ndate: 2018-10-20 17:14:24\n---\n\n#### Decorators in Python\n\nIn Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.\n\n```python\ndef identity(ob):\n    return ob\n\n@identity\ndef myfunc():\n    print \"my function\"\n\nmyfunc()\nprint myfunc\n```\n\n```shell\nmy function\n<function myfunc at 0xb76db17c>\n```\n\n#### ES2016 Decorators\n\nAn ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.\n\n##### Syntax\n\n```js\n// es5\nvar person = { name: 'John' };\n\nfunction addAge(age) {\n  return function(person) {\n    return {\n      age: age,\n      name: person.name,\n    };\n  };\n}\n\nvar newPerson = addAge(30)(person);\nconsole.log(newPerson);\n\n// es6 (babel)\n// this is the decorator factory\nfunction addAgeDecorator(age) {\n  // this is the decorator\n  return function(targetClass) {\n    // do something with 'target' and 'value'...\n    return class {\n      name = new targetClass().name;\n      age = age;\n    };\n  };\n}\n\n@addAgeDecorator(30)\nclass Person {\n  name = 'John';\n}\n\nconsole.log(new Person());\n```\n\n### Decorating a property\n\n```js\nclass Cat {\n  @readonly\n  meow() {\n    console.log(`Meow!`);\n  }\n\n  sing() {\n    console.log(`soft kitty~`);\n  }\n}\n\nfunction readonly(target, name, descriptor) {\n  descriptor.writable = false;\n  return descriptor;\n}\n\nvar Garfield = new Cat();\nGarfield.meow = function() {\n  console.log('I want lasagne!');\n};\nGarfield.sing = function() {\n  console.log(\"Let's rock\");\n};\n\nGarfield.meow();\nGarfield.sing();\n// http://jsfiddle.net/minhuizheng/0h45utcd/5/\n```\n\nexplanation:\n\ntarget — class that the property is a part of  \nname — the name of the property the decorator is modifying  \ndescriptor — property descriptor. Think: object passed to Object.defineProperty\n\n#### Reference and Reading\n\n1. [Exploring EcmaScript Decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841)\n\n2. [Javascript Decorators](https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3)\n\n3. [Decorators](https://www.typescriptlang.org/docs/handbook/decorators.html)\n\n4. [JavaScript Decorators: What They Are and When to Use Them](https://www.sitepoint.com/javascript-decorators-what-they-are/)\n\n5. [React DnD](http://react-dnd.github.io/react-dnd/)\n","slug":"Decorator-in-JavaScript","published":1,"updated":"2019-11-15T09:39:12.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmm60006f5s6z6afyhoc","content":"<h4 id=\"Decorators-in-Python\"><a href=\"#Decorators-in-Python\" class=\"headerlink\" title=\"Decorators in Python\"></a>Decorators in Python</h4><p>In Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">identity</span><span class=\"params\">(ob)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ob</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@identity</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfunc</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"my function\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">myfunc()</span><br><span class=\"line\"><span class=\"keyword\">print</span> myfunc</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my function</span><br><span class=\"line\">&lt;function myfunc at 0xb76db17c&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ES2016-Decorators\"><a href=\"#ES2016-Decorators\" class=\"headerlink\" title=\"ES2016 Decorators\"></a>ES2016 Decorators</h4><p>An ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.</p>\n<h5 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAge</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">person</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      age: age,</span><br><span class=\"line\">      name: person.name,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newPerson = addAge(<span class=\"number\">30</span>)(person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newPerson);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6 (babel)</span></span><br><span class=\"line\"><span class=\"comment\">// this is the decorator factory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAgeDecorator</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this is the decorator</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">targetClass</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something with 'target' and 'value'...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">      name = <span class=\"keyword\">new</span> targetClass().name;</span><br><span class=\"line\">      age = age;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@addAgeDecorator(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  name = <span class=\"string\">'John'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Person());</span><br></pre></td></tr></table></figure>\n<h3 id=\"Decorating-a-property\"><a href=\"#Decorating-a-property\" class=\"headerlink\" title=\"Decorating a property\"></a>Decorating a property</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  meow() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Meow!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sing() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`soft kitty~`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readonly</span>(<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">  descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Garfield = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">Garfield.meow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I want lasagne!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Garfield.sing = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Let's rock\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Garfield.meow();</span><br><span class=\"line\">Garfield.sing();</span><br><span class=\"line\"><span class=\"comment\">// http://jsfiddle.net/minhuizheng/0h45utcd/5/</span></span><br></pre></td></tr></table></figure>\n<p>explanation:</p>\n<p>target — class that the property is a part of<br>name — the name of the property the decorator is modifying<br>descriptor — property descriptor. Think: object passed to Object.defineProperty</p>\n<h4 id=\"Reference-and-Reading\"><a href=\"#Reference-and-Reading\" class=\"headerlink\" title=\"Reference and Reading\"></a>Reference and Reading</h4><ol>\n<li><p><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841\" target=\"_blank\" rel=\"noopener\">Exploring EcmaScript Decorators</a></p>\n</li>\n<li><p><a href=\"https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3\" target=\"_blank\" rel=\"noopener\">Javascript Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener\">Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.sitepoint.com/javascript-decorators-what-they-are/\" target=\"_blank\" rel=\"noopener\">JavaScript Decorators: What They Are and When to Use Them</a></p>\n</li>\n<li><p><a href=\"http://react-dnd.github.io/react-dnd/\" target=\"_blank\" rel=\"noopener\">React DnD</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Decorators-in-Python\"><a href=\"#Decorators-in-Python\" class=\"headerlink\" title=\"Decorators in Python\"></a>Decorators in Python</h4><p>In Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">identity</span><span class=\"params\">(ob)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ob</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@identity</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfunc</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"my function\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">myfunc()</span><br><span class=\"line\"><span class=\"keyword\">print</span> myfunc</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my function</span><br><span class=\"line\">&lt;function myfunc at 0xb76db17c&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ES2016-Decorators\"><a href=\"#ES2016-Decorators\" class=\"headerlink\" title=\"ES2016 Decorators\"></a>ES2016 Decorators</h4><p>An ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.</p>\n<h5 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAge</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">person</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      age: age,</span><br><span class=\"line\">      name: person.name,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newPerson = addAge(<span class=\"number\">30</span>)(person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newPerson);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6 (babel)</span></span><br><span class=\"line\"><span class=\"comment\">// this is the decorator factory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAgeDecorator</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this is the decorator</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">targetClass</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something with 'target' and 'value'...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">      name = <span class=\"keyword\">new</span> targetClass().name;</span><br><span class=\"line\">      age = age;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@addAgeDecorator(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  name = <span class=\"string\">'John'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Person());</span><br></pre></td></tr></table></figure>\n<h3 id=\"Decorating-a-property\"><a href=\"#Decorating-a-property\" class=\"headerlink\" title=\"Decorating a property\"></a>Decorating a property</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  meow() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Meow!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sing() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`soft kitty~`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readonly</span>(<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">  descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Garfield = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">Garfield.meow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I want lasagne!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Garfield.sing = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Let's rock\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Garfield.meow();</span><br><span class=\"line\">Garfield.sing();</span><br><span class=\"line\"><span class=\"comment\">// http://jsfiddle.net/minhuizheng/0h45utcd/5/</span></span><br></pre></td></tr></table></figure>\n<p>explanation:</p>\n<p>target — class that the property is a part of<br>name — the name of the property the decorator is modifying<br>descriptor — property descriptor. Think: object passed to Object.defineProperty</p>\n<h4 id=\"Reference-and-Reading\"><a href=\"#Reference-and-Reading\" class=\"headerlink\" title=\"Reference and Reading\"></a>Reference and Reading</h4><ol>\n<li><p><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841\" target=\"_blank\" rel=\"noopener\">Exploring EcmaScript Decorators</a></p>\n</li>\n<li><p><a href=\"https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3\" target=\"_blank\" rel=\"noopener\">Javascript Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener\">Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.sitepoint.com/javascript-decorators-what-they-are/\" target=\"_blank\" rel=\"noopener\">JavaScript Decorators: What They Are and When to Use Them</a></p>\n</li>\n<li><p><a href=\"http://react-dnd.github.io/react-dnd/\" target=\"_blank\" rel=\"noopener\">React DnD</a></p>\n</li>\n</ol>\n"},{"title":"Iterators and generators","abbrlink":"f1b3125a","date":"2018-05-01T08:19:28.000Z","_content":"\n#### Iterators\n\nIterators are objects with a specific interface designed for iteration.\n\nIn JavaScript an iterator is an object that provides a `next()` method which returns the next item in the sequence. This method returns an object with two properties: `done` and `value`.\n\nBelow is an implementation of iterator in ES5.\n\n```js\nfunction createIterator(items) {\n  var i = 0;\n  return {\n    next: function() {\n      var done = i >= items.length;\n      var value = !done ? items[i++] : undefined;\n\n      return {\n        done: done,\n        value: value,\n      };\n    },\n  };\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { done: false, value: 1 }\nconsole.log(iterator.next()); // { done: false, value: 2 }\nconsole.log(iterator.next()); // { done: false, value: 3 }\nconsole.log(iterator.next()); // { done: true, value: undefined }\n```\n\n#### Generators\n\nA generator is a function that returns an iterator. Generator functions are indicated by an asterisk (_) after the `function` key word and use the `yield` keyword. It doesn't matter how many whitespace between `function` and `_`. On MDN, the`_`is right next to`function`, however in Zakas's book, the`_` is just before the function name.\n\nGenerators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\n\n> you can use `yield` only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.\n\n```js\n// method 1: function declaration\nfunction* createIterator1(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n}\n\n// method 2: function expression\nlet createIterator2 = function*(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n};\n\nconst iterator = createIterator2([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n> create an arrow function that is also a generator is not possible.\n\n#### Generator Object Method\n\nSince generators are just functions. You can add generators to objects.\n\n```js\n// method 1: es5 style object literal\nlet obj1 = {\n  createIterator: function*(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\n// method 2: es6 shorthand\nlet obj2 = {\n  *createIterator(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\nconst iterator = obj2.createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n#### Iterable and for-of loops\n\n`iterable protocol`: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a `for..of` construct.\n\nAn iterable is an object with a `Symbol.iterator` property.\n\nThese are iterables:\n\n- Arrays and TypedArrays\n- Maps\n- Sets\n- Strings\n- `arguments`\n- DOM Elements `NodeList`\n\n> All iterators created by generators are also iterables, because generators assign the `Symbol.iterator` property by default.\n\n##### Accessing the default Iterator\n\n```js\nlet values = [1, 2, 3];\n\n// same process happens behind the scene when using for-of loop\nlet iterator = values[Symbol.iterator]();\n\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\n\n// check\nfunction isIterable(object) {\n  return typeof object[Symbol.iterator] === 'function';\n}\n\nconsole.log(isIterable([1, 2, 3])); // true\nconsole.log(isIterable('Hello')); // true\nconsole.log(isIterable(new Map())); // true\nconsole.log(isIterable(new Set())); // true\nconsole.log(isIterable(new WeakMap())); // false\nconsole.log(isIterable(new WeakSet())); // false\n```\n\n#### Creating Iterator\n\n```js\nlet collection = {\n  items: [],\n  *[Symbol.iterator]() {\n    for (let item of this.items) {\n      yield item;\n    }\n  },\n};\n\ncollection.items.push(1);\ncollection.items.push(2);\ncollection.items.push(3);\n\nfor (let x of collection) {\n  console.log(x);\n}\n\n// 1\n// 2\n// 3\n```\n\n#### Built-in Iterators\n\n#### collection iterators\n\n- `entries()`\n- `values()`\n- `keys()`\n\n##### `entries()`\n\n- array: [index, value]\n- set: [value, value]\n- map: [key, value]\n\n##### `values()`\n\n- array: value\n- set: value\n- map: value\n\n##### `keys()`\n\n- array: index\n- set: value\n- map: key\n\n#### Default Iterators for Collection Types\n\n- array: `values()`\n- set: `values()`\n- map: `entries()`\n\n```js\n// destructuring and for-of loop\nlet data = new Map();\n\ndata.set('title', 'Understanding ECMAScript 6');\ndata.set('format', 'ebook');\n\n// same as using data.entries()\nfor (let [key, value] of data) {\n  console.log(key + '=' + value);\n}\n```\n\n- NodeList\n\n```js\nvar divs = document.getElementsByTagName('div');\n\nfor (let div of divs) {\n  console.log(div.id);\n}\n```\n\n#### Constructs accept iterables\n\nSome other constructs in JS that use iterables are:\n\n- `for-of`\n- Destructuring of Arrays\n- The spread operator (`…`)\n- `Promise.all` and `Promise.race` accept iterables over Promises.\n- Maps and Sets\n\n```js\nconst map = new Map([[1, 'one'], [2, 'two']]);\nmap.get(1)\n// one\nconst set = new Set(['a', 'b', 'c]);\nset.has('c');\n// true\n```\n\n#### Advanced Iterator Functionality\n\n##### passing arguments to Iterators\n\nThe `next()` method also accepts a value which can be used to modify the internal state of the generator. A value passed to `next()` will be treated as the result of the last yield expression that paused the generator.\n\n```js\nfunction* createIterator() {\n  let first = yield 1;\n  let second = yield first + 2; // 4 + 2\n  yield second + 3; // 5 + 3\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next(4)); // \"{ value: 6, done: false }\"\nconsole.log(iterator.next(5)); // \"{ value: 8, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n#### Throw and Return\n\n- throw\n\nResume the execution of a generator by throwing an error into it and returns an object with two properties done and value.\n\n```js\nfunction* gen() {\n  while (true) {\n    try {\n      yield 42;\n    } catch (e) {\n      console.log('Error caught!');\n    }\n  }\n}\n\nvar g = gen();\ng.next();\n// { value: 42, done: false }\ng.throw(new Error('Something went wrong'));\n// \"Error caught!\"\n// { value: 42, done: false }\n```\n\n- return\n\nReturn the given value and finishes the generator.\n\n```js\nfunction* createIterator() {\n  yield 1;\n  return;\n  yield 2;\n  yield 3;\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n#### Delegating generators\n\n```js\nfunction* g1() {\n  yield 1;\n  yield 2;\n}\n\nfunction* g2() {\n  yield 0;\n  yield* g1();\n  yield* [3, 4];\n  yield* '56';\n  yield* Array.from(arguments);\n}\n\nvar iterator = g2(7, 8);\n\nconsole.log(iterator.next()); // {value: 0, done: false}\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: 4, done: false}\nconsole.log(iterator.next()); // {value: '5', done: false}\nconsole.log(iterator.next()); // {value: '6', done: false}\nconsole.log(iterator.next()); // {value: 7, done: false}\nconsole.log(iterator.next()); // {value: 8, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```\n\n`yield*` is an expression, not a statement, so it evaluates to a value.\n\n```js\nfunction* g4() {\n  yield* [1, 2, 3];\n  return 'foo';\n}\n\nvar result;\n\nfunction* g5() {\n  result = yield* g4();\n}\n\nvar iterator = g5();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true},\n// g4() returned {value: 'foo', done: true} at this point\n\nconsole.log(result); // \"foo\"\n```\n\n#### Asynchronous Task Running\n\n##### tradition callback\n\n```js\nlet fs = require('fs');\n\nfs.readFile('config.json', function(err, contents) {\n  if (err) {\n    throw err;\n  }\n\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n#### Asynchronous task runner\n\n```js\nfunction run(taskDef) {\n  // create the iterator, make available elsewhere\n  let task = taskDef();\n\n  // start the task\n  let result = task.next();\n\n  // recursive function to keep calling next()\n  function step() {\n    // if there's more to do\n    if (!result.done) {\n      if (typeof result.value === 'function') {\n        result.value(function(err, data) {\n          if (err) {\n            result = task.throw(err);\n            return;\n          }\n\n          result = task.next(data);\n          step();\n        });\n      } else {\n        result = task.next(result.value);\n        step();\n      }\n    }\n  }\n\n  // start the process\n  step();\n}\n\nlet fs = require('fs');\n\nfunction readFile(filename) {\n  return function(callback) {\n    fs.readFile(filename, callback);\n  };\n}\n\nrun(function*() {\n  let contents = yield readFile('config.json');\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n#### Pros and Cons\n\nPros:\n\n- Lazy Evaluation: It is calculated as we demand it;\n- Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.\n\nCons:\n\n- Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.\n- Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.\n\n#### Related Reading\n\n1.  Nicholas C. Zakas, [Iterators and Generators](https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators)\n\n2.  Axel Rauschmayer, [Iterables and iterators](http://exploringjs.com/es6/ch_iteration.html)\n\n3.  Axel Rauschmayer, [Generators](http://exploringjs.com/es6/ch_generators.html)\n\n4.  Brandon Morelli, [A Simple Guide to ES6 Iterators in JavaScript with Examples](https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e)\n\n5.  Arfat Salman, [Understanding Generators in ES6 JavaScript with Examples](https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5)\n\n6.  MDN, [Iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n\n7.  MDN, [Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n","source":"_posts/Iterators-and-generators.md","raw":"---\ntitle: Iterators and generators\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - iterators\n  - generators\nabbrlink: f1b3125a\ndate: 2018-05-01 01:19:28\n---\n\n#### Iterators\n\nIterators are objects with a specific interface designed for iteration.\n\nIn JavaScript an iterator is an object that provides a `next()` method which returns the next item in the sequence. This method returns an object with two properties: `done` and `value`.\n\nBelow is an implementation of iterator in ES5.\n\n```js\nfunction createIterator(items) {\n  var i = 0;\n  return {\n    next: function() {\n      var done = i >= items.length;\n      var value = !done ? items[i++] : undefined;\n\n      return {\n        done: done,\n        value: value,\n      };\n    },\n  };\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { done: false, value: 1 }\nconsole.log(iterator.next()); // { done: false, value: 2 }\nconsole.log(iterator.next()); // { done: false, value: 3 }\nconsole.log(iterator.next()); // { done: true, value: undefined }\n```\n\n#### Generators\n\nA generator is a function that returns an iterator. Generator functions are indicated by an asterisk (_) after the `function` key word and use the `yield` keyword. It doesn't matter how many whitespace between `function` and `_`. On MDN, the`_`is right next to`function`, however in Zakas's book, the`_` is just before the function name.\n\nGenerators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\n\n> you can use `yield` only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.\n\n```js\n// method 1: function declaration\nfunction* createIterator1(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n}\n\n// method 2: function expression\nlet createIterator2 = function*(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n};\n\nconst iterator = createIterator2([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n> create an arrow function that is also a generator is not possible.\n\n#### Generator Object Method\n\nSince generators are just functions. You can add generators to objects.\n\n```js\n// method 1: es5 style object literal\nlet obj1 = {\n  createIterator: function*(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\n// method 2: es6 shorthand\nlet obj2 = {\n  *createIterator(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\nconst iterator = obj2.createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n#### Iterable and for-of loops\n\n`iterable protocol`: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a `for..of` construct.\n\nAn iterable is an object with a `Symbol.iterator` property.\n\nThese are iterables:\n\n- Arrays and TypedArrays\n- Maps\n- Sets\n- Strings\n- `arguments`\n- DOM Elements `NodeList`\n\n> All iterators created by generators are also iterables, because generators assign the `Symbol.iterator` property by default.\n\n##### Accessing the default Iterator\n\n```js\nlet values = [1, 2, 3];\n\n// same process happens behind the scene when using for-of loop\nlet iterator = values[Symbol.iterator]();\n\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\n\n// check\nfunction isIterable(object) {\n  return typeof object[Symbol.iterator] === 'function';\n}\n\nconsole.log(isIterable([1, 2, 3])); // true\nconsole.log(isIterable('Hello')); // true\nconsole.log(isIterable(new Map())); // true\nconsole.log(isIterable(new Set())); // true\nconsole.log(isIterable(new WeakMap())); // false\nconsole.log(isIterable(new WeakSet())); // false\n```\n\n#### Creating Iterator\n\n```js\nlet collection = {\n  items: [],\n  *[Symbol.iterator]() {\n    for (let item of this.items) {\n      yield item;\n    }\n  },\n};\n\ncollection.items.push(1);\ncollection.items.push(2);\ncollection.items.push(3);\n\nfor (let x of collection) {\n  console.log(x);\n}\n\n// 1\n// 2\n// 3\n```\n\n#### Built-in Iterators\n\n#### collection iterators\n\n- `entries()`\n- `values()`\n- `keys()`\n\n##### `entries()`\n\n- array: [index, value]\n- set: [value, value]\n- map: [key, value]\n\n##### `values()`\n\n- array: value\n- set: value\n- map: value\n\n##### `keys()`\n\n- array: index\n- set: value\n- map: key\n\n#### Default Iterators for Collection Types\n\n- array: `values()`\n- set: `values()`\n- map: `entries()`\n\n```js\n// destructuring and for-of loop\nlet data = new Map();\n\ndata.set('title', 'Understanding ECMAScript 6');\ndata.set('format', 'ebook');\n\n// same as using data.entries()\nfor (let [key, value] of data) {\n  console.log(key + '=' + value);\n}\n```\n\n- NodeList\n\n```js\nvar divs = document.getElementsByTagName('div');\n\nfor (let div of divs) {\n  console.log(div.id);\n}\n```\n\n#### Constructs accept iterables\n\nSome other constructs in JS that use iterables are:\n\n- `for-of`\n- Destructuring of Arrays\n- The spread operator (`…`)\n- `Promise.all` and `Promise.race` accept iterables over Promises.\n- Maps and Sets\n\n```js\nconst map = new Map([[1, 'one'], [2, 'two']]);\nmap.get(1)\n// one\nconst set = new Set(['a', 'b', 'c]);\nset.has('c');\n// true\n```\n\n#### Advanced Iterator Functionality\n\n##### passing arguments to Iterators\n\nThe `next()` method also accepts a value which can be used to modify the internal state of the generator. A value passed to `next()` will be treated as the result of the last yield expression that paused the generator.\n\n```js\nfunction* createIterator() {\n  let first = yield 1;\n  let second = yield first + 2; // 4 + 2\n  yield second + 3; // 5 + 3\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next(4)); // \"{ value: 6, done: false }\"\nconsole.log(iterator.next(5)); // \"{ value: 8, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n#### Throw and Return\n\n- throw\n\nResume the execution of a generator by throwing an error into it and returns an object with two properties done and value.\n\n```js\nfunction* gen() {\n  while (true) {\n    try {\n      yield 42;\n    } catch (e) {\n      console.log('Error caught!');\n    }\n  }\n}\n\nvar g = gen();\ng.next();\n// { value: 42, done: false }\ng.throw(new Error('Something went wrong'));\n// \"Error caught!\"\n// { value: 42, done: false }\n```\n\n- return\n\nReturn the given value and finishes the generator.\n\n```js\nfunction* createIterator() {\n  yield 1;\n  return;\n  yield 2;\n  yield 3;\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n#### Delegating generators\n\n```js\nfunction* g1() {\n  yield 1;\n  yield 2;\n}\n\nfunction* g2() {\n  yield 0;\n  yield* g1();\n  yield* [3, 4];\n  yield* '56';\n  yield* Array.from(arguments);\n}\n\nvar iterator = g2(7, 8);\n\nconsole.log(iterator.next()); // {value: 0, done: false}\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: 4, done: false}\nconsole.log(iterator.next()); // {value: '5', done: false}\nconsole.log(iterator.next()); // {value: '6', done: false}\nconsole.log(iterator.next()); // {value: 7, done: false}\nconsole.log(iterator.next()); // {value: 8, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```\n\n`yield*` is an expression, not a statement, so it evaluates to a value.\n\n```js\nfunction* g4() {\n  yield* [1, 2, 3];\n  return 'foo';\n}\n\nvar result;\n\nfunction* g5() {\n  result = yield* g4();\n}\n\nvar iterator = g5();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true},\n// g4() returned {value: 'foo', done: true} at this point\n\nconsole.log(result); // \"foo\"\n```\n\n#### Asynchronous Task Running\n\n##### tradition callback\n\n```js\nlet fs = require('fs');\n\nfs.readFile('config.json', function(err, contents) {\n  if (err) {\n    throw err;\n  }\n\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n#### Asynchronous task runner\n\n```js\nfunction run(taskDef) {\n  // create the iterator, make available elsewhere\n  let task = taskDef();\n\n  // start the task\n  let result = task.next();\n\n  // recursive function to keep calling next()\n  function step() {\n    // if there's more to do\n    if (!result.done) {\n      if (typeof result.value === 'function') {\n        result.value(function(err, data) {\n          if (err) {\n            result = task.throw(err);\n            return;\n          }\n\n          result = task.next(data);\n          step();\n        });\n      } else {\n        result = task.next(result.value);\n        step();\n      }\n    }\n  }\n\n  // start the process\n  step();\n}\n\nlet fs = require('fs');\n\nfunction readFile(filename) {\n  return function(callback) {\n    fs.readFile(filename, callback);\n  };\n}\n\nrun(function*() {\n  let contents = yield readFile('config.json');\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n#### Pros and Cons\n\nPros:\n\n- Lazy Evaluation: It is calculated as we demand it;\n- Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.\n\nCons:\n\n- Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.\n- Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.\n\n#### Related Reading\n\n1.  Nicholas C. Zakas, [Iterators and Generators](https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators)\n\n2.  Axel Rauschmayer, [Iterables and iterators](http://exploringjs.com/es6/ch_iteration.html)\n\n3.  Axel Rauschmayer, [Generators](http://exploringjs.com/es6/ch_generators.html)\n\n4.  Brandon Morelli, [A Simple Guide to ES6 Iterators in JavaScript with Examples](https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e)\n\n5.  Arfat Salman, [Understanding Generators in ES6 JavaScript with Examples](https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5)\n\n6.  MDN, [Iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n\n7.  MDN, [Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n","slug":"Iterators-and-generators","published":1,"updated":"2019-11-15T09:39:12.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmm70007f5s6b70pvdab","content":"<h4 id=\"Iterators\"><a href=\"#Iterators\" class=\"headerlink\" title=\"Iterators\"></a>Iterators</h4><p>Iterators are objects with a specific interface designed for iteration.</p>\n<p>In JavaScript an iterator is an object that provides a <code>next()</code> method which returns the next item in the sequence. This method returns an object with two properties: <code>done</code> and <code>value</code>.</p>\n<p>Below is an implementation of iterator in ES5.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIterator</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> done = i &gt;= items.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = !done ? items[i++] : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        done: done,</span><br><span class=\"line\">        value: value,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 1 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 2 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h4><p>A generator is a function that returns an iterator. Generator functions are indicated by an asterisk (<em>) after the <code>function</code> key word and use the <code>yield</code> keyword. It doesn’t matter how many whitespace between <code>function</code> and `</em><code>. On MDN, the</code><em><code>is right next to</code>function<code>, however in Zakas&#39;s book, the</code></em>` is just before the function name.</p>\n<p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p>\n<blockquote>\n<p>you can use <code>yield</code> only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: function declaration</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator1</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: function expression</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createIterator2 = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = createIterator2([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>create an arrow function that is also a generator is not possible.</p>\n</blockquote>\n<h4 id=\"Generator-Object-Method\"><a href=\"#Generator-Object-Method\" class=\"headerlink\" title=\"Generator Object Method\"></a>Generator Object Method</h4><p>Since generators are just functions. You can add generators to objects.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: es5 style object literal</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  createIterator: <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: es6 shorthand</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  *createIterator(items) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = obj2.createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Iterable-and-for-of-loops\"><a href=\"#Iterable-and-for-of-loops\" class=\"headerlink\" title=\"Iterable and for-of loops\"></a>Iterable and for-of loops</h4><p><code>iterable protocol</code>: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a <code>for..of</code> construct.</p>\n<p>An iterable is an object with a <code>Symbol.iterator</code> property.</p>\n<p>These are iterables:</p>\n<ul>\n<li>Arrays and TypedArrays</li>\n<li>Maps</li>\n<li>Sets</li>\n<li>Strings</li>\n<li><code>arguments</code></li>\n<li>DOM Elements <code>NodeList</code></li>\n</ul>\n<blockquote>\n<p>All iterators created by generators are also iterables, because generators assign the <code>Symbol.iterator</code> property by default.</p>\n</blockquote>\n<h5 id=\"Accessing-the-default-Iterator\"><a href=\"#Accessing-the-default-Iterator\" class=\"headerlink\" title=\"Accessing the default Iterator\"></a>Accessing the default Iterator</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same process happens behind the scene when using for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = values[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isIterable</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> object[<span class=\"built_in\">Symbol</span>.iterator] === <span class=\"string\">'function'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"string\">'Hello'</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>())); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>())); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Creating-Iterator\"><a href=\"#Creating-Iterator\" class=\"headerlink\" title=\"Creating Iterator\"></a>Creating Iterator</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> collection = &#123;</span><br><span class=\"line\">  items: [],</span><br><span class=\"line\">  *[<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.items) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">collection.items.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> collection) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Built-in-Iterators\"><a href=\"#Built-in-Iterators\" class=\"headerlink\" title=\"Built-in Iterators\"></a>Built-in Iterators</h4><h4 id=\"collection-iterators\"><a href=\"#collection-iterators\" class=\"headerlink\" title=\"collection iterators\"></a>collection iterators</h4><ul>\n<li><code>entries()</code></li>\n<li><code>values()</code></li>\n<li><code>keys()</code></li>\n</ul>\n<h5 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a><code>entries()</code></h5><ul>\n<li>array: [index, value]</li>\n<li>set: [value, value]</li>\n<li>map: [key, value]</li>\n</ul>\n<h5 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a><code>values()</code></h5><ul>\n<li>array: value</li>\n<li>set: value</li>\n<li>map: value</li>\n</ul>\n<h5 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a><code>keys()</code></h5><ul>\n<li>array: index</li>\n<li>set: value</li>\n<li>map: key</li>\n</ul>\n<h4 id=\"Default-Iterators-for-Collection-Types\"><a href=\"#Default-Iterators-for-Collection-Types\" class=\"headerlink\" title=\"Default Iterators for Collection Types\"></a>Default Iterators for Collection Types</h4><ul>\n<li>array: <code>values()</code></li>\n<li>set: <code>values()</code></li>\n<li>map: <code>entries()</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// destructuring and for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">data.set(<span class=\"string\">'title'</span>, <span class=\"string\">'Understanding ECMAScript 6'</span>);</span><br><span class=\"line\">data.set(<span class=\"string\">'format'</span>, <span class=\"string\">'ebook'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same as using data.entries()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">'='</span> + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NodeList</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> div <span class=\"keyword\">of</span> divs) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(div.id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Constructs-accept-iterables\"><a href=\"#Constructs-accept-iterables\" class=\"headerlink\" title=\"Constructs accept iterables\"></a>Constructs accept iterables</h4><p>Some other constructs in JS that use iterables are:</p>\n<ul>\n<li><code>for-of</code></li>\n<li>Destructuring of Arrays</li>\n<li>The spread operator (<code>…</code>)</li>\n<li><code>Promise.all</code> and <code>Promise.race</code> accept iterables over Promises.</li>\n<li>Maps and Sets</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'one'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>]]);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c]);</span></span><br><span class=\"line\"><span class=\"string\">set.has('</span>c<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Advanced-Iterator-Functionality\"><a href=\"#Advanced-Iterator-Functionality\" class=\"headerlink\" title=\"Advanced Iterator Functionality\"></a>Advanced Iterator Functionality</h4><h5 id=\"passing-arguments-to-Iterators\"><a href=\"#passing-arguments-to-Iterators\" class=\"headerlink\" title=\"passing arguments to Iterators\"></a>passing arguments to Iterators</h5><p>The <code>next()</code> method also accepts a value which can be used to modify the internal state of the generator. A value passed to <code>next()</code> will be treated as the result of the last yield expression that paused the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> second = <span class=\"keyword\">yield</span> first + <span class=\"number\">2</span>; <span class=\"comment\">// 4 + 2</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> second + <span class=\"number\">3</span>; <span class=\"comment\">// 5 + 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">4</span>)); <span class=\"comment\">// \"&#123; value: 6, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">5</span>)); <span class=\"comment\">// \"&#123; value: 8, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Throw-and-Return\"><a href=\"#Throw-and-Return\" class=\"headerlink\" title=\"Throw and Return\"></a>Throw and Return</h4><ul>\n<li>throw</li>\n</ul>\n<p>Resume the execution of a generator by throwing an error into it and returns an object with two properties done and value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error caught!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br><span class=\"line\">g.throw(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Something went wrong'</span>));</span><br><span class=\"line\"><span class=\"comment\">// \"Error caught!\"</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>return</li>\n</ul>\n<p>Return the given value and finishes the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Delegating-generators\"><a href=\"#Delegating-generators\" class=\"headerlink\" title=\"Delegating generators\"></a>Delegating generators</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* g1();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"string\">'56'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g2(<span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 4, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '5', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '6', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 7, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 8, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>yield*</code> is an expression, not a statement, so it evaluates to a value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  result = <span class=\"keyword\">yield</span>* g4();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g5();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// g4() returned &#123;value: 'foo', done: true&#125; at this point</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"foo\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Asynchronous-Task-Running\"><a href=\"#Asynchronous-Task-Running\" class=\"headerlink\" title=\"Asynchronous Task Running\"></a>Asynchronous Task Running</h4><h5 id=\"tradition-callback\"><a href=\"#tradition-callback\" class=\"headerlink\" title=\"tradition callback\"></a>tradition callback</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'config.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Asynchronous-task-runner\"><a href=\"#Asynchronous-task-runner\" class=\"headerlink\" title=\"Asynchronous task runner\"></a>Asynchronous task runner</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">taskDef</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// create the iterator, make available elsewhere</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> task = taskDef();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the task</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = task.next();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// recursive function to keep calling next()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if there's more to do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result.done) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result.value === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        result.value(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            result = task.throw(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          result = task.next(data);</span><br><span class=\"line\">          step();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = task.next(result.value);</span><br><span class=\"line\">        step();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the process</span></span><br><span class=\"line\">  step();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFile</span>(<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filename, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> contents = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'config.json'</span>);</span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h4><p>Pros:</p>\n<ul>\n<li>Lazy Evaluation: It is calculated as we demand it;</li>\n<li>Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.</li>\n<li>Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.</li>\n</ul>\n<h4 id=\"Related-Reading\"><a href=\"#Related-Reading\" class=\"headerlink\" title=\"Related Reading\"></a>Related Reading</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators\" target=\"_blank\" rel=\"noopener\">Iterators and Generators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_iteration.html\" target=\"_blank\" rel=\"noopener\">Iterables and iterators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_generators.html\" target=\"_blank\" rel=\"noopener\">Generators</a></p>\n</li>\n<li><p>Brandon Morelli, <a href=\"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e\" target=\"_blank\" rel=\"noopener\">A Simple Guide to ES6 Iterators in JavaScript with Examples</a></p>\n</li>\n<li><p>Arfat Salman, <a href=\"https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5\" target=\"_blank\" rel=\"noopener\">Understanding Generators in ES6 JavaScript with Examples</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iterators and generators</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iteration protocols</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Iterators\"><a href=\"#Iterators\" class=\"headerlink\" title=\"Iterators\"></a>Iterators</h4><p>Iterators are objects with a specific interface designed for iteration.</p>\n<p>In JavaScript an iterator is an object that provides a <code>next()</code> method which returns the next item in the sequence. This method returns an object with two properties: <code>done</code> and <code>value</code>.</p>\n<p>Below is an implementation of iterator in ES5.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIterator</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> done = i &gt;= items.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = !done ? items[i++] : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        done: done,</span><br><span class=\"line\">        value: value,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 1 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 2 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h4><p>A generator is a function that returns an iterator. Generator functions are indicated by an asterisk (<em>) after the <code>function</code> key word and use the <code>yield</code> keyword. It doesn’t matter how many whitespace between <code>function</code> and `</em><code>. On MDN, the</code><em><code>is right next to</code>function<code>, however in Zakas&#39;s book, the</code></em>` is just before the function name.</p>\n<p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p>\n<blockquote>\n<p>you can use <code>yield</code> only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: function declaration</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator1</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: function expression</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createIterator2 = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = createIterator2([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>create an arrow function that is also a generator is not possible.</p>\n</blockquote>\n<h4 id=\"Generator-Object-Method\"><a href=\"#Generator-Object-Method\" class=\"headerlink\" title=\"Generator Object Method\"></a>Generator Object Method</h4><p>Since generators are just functions. You can add generators to objects.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: es5 style object literal</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  createIterator: <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: es6 shorthand</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  *createIterator(items) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = obj2.createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Iterable-and-for-of-loops\"><a href=\"#Iterable-and-for-of-loops\" class=\"headerlink\" title=\"Iterable and for-of loops\"></a>Iterable and for-of loops</h4><p><code>iterable protocol</code>: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a <code>for..of</code> construct.</p>\n<p>An iterable is an object with a <code>Symbol.iterator</code> property.</p>\n<p>These are iterables:</p>\n<ul>\n<li>Arrays and TypedArrays</li>\n<li>Maps</li>\n<li>Sets</li>\n<li>Strings</li>\n<li><code>arguments</code></li>\n<li>DOM Elements <code>NodeList</code></li>\n</ul>\n<blockquote>\n<p>All iterators created by generators are also iterables, because generators assign the <code>Symbol.iterator</code> property by default.</p>\n</blockquote>\n<h5 id=\"Accessing-the-default-Iterator\"><a href=\"#Accessing-the-default-Iterator\" class=\"headerlink\" title=\"Accessing the default Iterator\"></a>Accessing the default Iterator</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same process happens behind the scene when using for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = values[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isIterable</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> object[<span class=\"built_in\">Symbol</span>.iterator] === <span class=\"string\">'function'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"string\">'Hello'</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>())); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>())); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Creating-Iterator\"><a href=\"#Creating-Iterator\" class=\"headerlink\" title=\"Creating Iterator\"></a>Creating Iterator</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> collection = &#123;</span><br><span class=\"line\">  items: [],</span><br><span class=\"line\">  *[<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.items) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">collection.items.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> collection) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Built-in-Iterators\"><a href=\"#Built-in-Iterators\" class=\"headerlink\" title=\"Built-in Iterators\"></a>Built-in Iterators</h4><h4 id=\"collection-iterators\"><a href=\"#collection-iterators\" class=\"headerlink\" title=\"collection iterators\"></a>collection iterators</h4><ul>\n<li><code>entries()</code></li>\n<li><code>values()</code></li>\n<li><code>keys()</code></li>\n</ul>\n<h5 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a><code>entries()</code></h5><ul>\n<li>array: [index, value]</li>\n<li>set: [value, value]</li>\n<li>map: [key, value]</li>\n</ul>\n<h5 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a><code>values()</code></h5><ul>\n<li>array: value</li>\n<li>set: value</li>\n<li>map: value</li>\n</ul>\n<h5 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a><code>keys()</code></h5><ul>\n<li>array: index</li>\n<li>set: value</li>\n<li>map: key</li>\n</ul>\n<h4 id=\"Default-Iterators-for-Collection-Types\"><a href=\"#Default-Iterators-for-Collection-Types\" class=\"headerlink\" title=\"Default Iterators for Collection Types\"></a>Default Iterators for Collection Types</h4><ul>\n<li>array: <code>values()</code></li>\n<li>set: <code>values()</code></li>\n<li>map: <code>entries()</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// destructuring and for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">data.set(<span class=\"string\">'title'</span>, <span class=\"string\">'Understanding ECMAScript 6'</span>);</span><br><span class=\"line\">data.set(<span class=\"string\">'format'</span>, <span class=\"string\">'ebook'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same as using data.entries()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">'='</span> + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NodeList</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> div <span class=\"keyword\">of</span> divs) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(div.id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Constructs-accept-iterables\"><a href=\"#Constructs-accept-iterables\" class=\"headerlink\" title=\"Constructs accept iterables\"></a>Constructs accept iterables</h4><p>Some other constructs in JS that use iterables are:</p>\n<ul>\n<li><code>for-of</code></li>\n<li>Destructuring of Arrays</li>\n<li>The spread operator (<code>…</code>)</li>\n<li><code>Promise.all</code> and <code>Promise.race</code> accept iterables over Promises.</li>\n<li>Maps and Sets</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'one'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>]]);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c]);</span></span><br><span class=\"line\"><span class=\"string\">set.has('</span>c<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Advanced-Iterator-Functionality\"><a href=\"#Advanced-Iterator-Functionality\" class=\"headerlink\" title=\"Advanced Iterator Functionality\"></a>Advanced Iterator Functionality</h4><h5 id=\"passing-arguments-to-Iterators\"><a href=\"#passing-arguments-to-Iterators\" class=\"headerlink\" title=\"passing arguments to Iterators\"></a>passing arguments to Iterators</h5><p>The <code>next()</code> method also accepts a value which can be used to modify the internal state of the generator. A value passed to <code>next()</code> will be treated as the result of the last yield expression that paused the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> second = <span class=\"keyword\">yield</span> first + <span class=\"number\">2</span>; <span class=\"comment\">// 4 + 2</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> second + <span class=\"number\">3</span>; <span class=\"comment\">// 5 + 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">4</span>)); <span class=\"comment\">// \"&#123; value: 6, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">5</span>)); <span class=\"comment\">// \"&#123; value: 8, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Throw-and-Return\"><a href=\"#Throw-and-Return\" class=\"headerlink\" title=\"Throw and Return\"></a>Throw and Return</h4><ul>\n<li>throw</li>\n</ul>\n<p>Resume the execution of a generator by throwing an error into it and returns an object with two properties done and value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error caught!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br><span class=\"line\">g.throw(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Something went wrong'</span>));</span><br><span class=\"line\"><span class=\"comment\">// \"Error caught!\"</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>return</li>\n</ul>\n<p>Return the given value and finishes the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Delegating-generators\"><a href=\"#Delegating-generators\" class=\"headerlink\" title=\"Delegating generators\"></a>Delegating generators</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* g1();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"string\">'56'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g2(<span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 4, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '5', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '6', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 7, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 8, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>yield*</code> is an expression, not a statement, so it evaluates to a value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  result = <span class=\"keyword\">yield</span>* g4();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g5();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// g4() returned &#123;value: 'foo', done: true&#125; at this point</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"foo\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Asynchronous-Task-Running\"><a href=\"#Asynchronous-Task-Running\" class=\"headerlink\" title=\"Asynchronous Task Running\"></a>Asynchronous Task Running</h4><h5 id=\"tradition-callback\"><a href=\"#tradition-callback\" class=\"headerlink\" title=\"tradition callback\"></a>tradition callback</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'config.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Asynchronous-task-runner\"><a href=\"#Asynchronous-task-runner\" class=\"headerlink\" title=\"Asynchronous task runner\"></a>Asynchronous task runner</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">taskDef</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// create the iterator, make available elsewhere</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> task = taskDef();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the task</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = task.next();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// recursive function to keep calling next()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if there's more to do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result.done) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result.value === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        result.value(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            result = task.throw(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          result = task.next(data);</span><br><span class=\"line\">          step();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = task.next(result.value);</span><br><span class=\"line\">        step();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the process</span></span><br><span class=\"line\">  step();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFile</span>(<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filename, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> contents = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'config.json'</span>);</span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h4><p>Pros:</p>\n<ul>\n<li>Lazy Evaluation: It is calculated as we demand it;</li>\n<li>Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.</li>\n<li>Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.</li>\n</ul>\n<h4 id=\"Related-Reading\"><a href=\"#Related-Reading\" class=\"headerlink\" title=\"Related Reading\"></a>Related Reading</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators\" target=\"_blank\" rel=\"noopener\">Iterators and Generators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_iteration.html\" target=\"_blank\" rel=\"noopener\">Iterables and iterators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_generators.html\" target=\"_blank\" rel=\"noopener\">Generators</a></p>\n</li>\n<li><p>Brandon Morelli, <a href=\"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e\" target=\"_blank\" rel=\"noopener\">A Simple Guide to ES6 Iterators in JavaScript with Examples</a></p>\n</li>\n<li><p>Arfat Salman, <a href=\"https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5\" target=\"_blank\" rel=\"noopener\">Understanding Generators in ES6 JavaScript with Examples</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iterators and generators</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iteration protocols</a></p>\n</li>\n</ol>\n"},{"title":"ES6 Block Binding","abbrlink":"8d1d7da4","date":"2018-05-03T07:07:52.000Z","_content":"\n#### Var declaration and hoisting\n\nHoisting: Variable declarations using `var` are treated as if they are at the top of the **function** (or **global** scope, if declared outside of a function) regardless of where the actual declaration occurs.\n\n#### Block-level Declarartion\n\nBlock-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:\n\n1.  Inside of a function\n2.  Inside of a block (indicated by the `{` and `}` characters)\n\n##### Let\n\n`let` declarations are not hoisted to the top of the enclosing block.\n\n##### No Redeclaration\n\n```js\nvar count = 30;\n// Syntax error\nlet count = 40;\n```\n\nBut in a block, let ccan be use to declare an variable with same name.\n\n```js\nvar count = 30;\n// Does not throw an error\nif (condition) {\n  let count = 40;\n  // more code\n}\n```\n\n##### Const\n\n`const`, like `let` declarations, are block-level declarations.\n\n```js\nif (condition) {\n  const maxItems = 5;\n  // more code\n}\n// maxItems isn't accessible here\n```\n\n`const` cannot re-declaration as well.\n\n`const` cannot re-assign.\n\n```js\nconst maxItems = 5;\nmaxItems = 6; // throws error\n```\n\n##### Declaring Objects with const\n\nA `const` declaration prevents modification of the binding and not of the value itself.\n\n```js\nconst person = {\n  name: 'Nicholas',\n};\n\n// works\nperson.name = 'Greg';\n\n// throws an error\nperson = {\n  name: 'Greg',\n};\n```\n\n`const` prevents modification of the binding, not modification of the bound value.\n\n#### The Temporal Dead Zone(TDZ)\n\nA variable declared with either `let` or `const` cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the `typeof` operation.\n\n```js\nif (condition) {\n  console.log(typeof value); // ReferenceError!\n  let value = 'blue';\n}\n\nconsole.log(typeof value); // \"undefined\"\n\nif (condition) {\n  let value = 'blue';\n}\n```\n","source":"_posts/ES6-Block-Binding.md","raw":"---\ntitle: ES6 Block Binding\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - var\n  - let\n  - const\n  - block binding\n  - hoisting\nabbrlink: 8d1d7da4\ndate: 2018-05-03 00:07:52\n---\n\n#### Var declaration and hoisting\n\nHoisting: Variable declarations using `var` are treated as if they are at the top of the **function** (or **global** scope, if declared outside of a function) regardless of where the actual declaration occurs.\n\n#### Block-level Declarartion\n\nBlock-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:\n\n1.  Inside of a function\n2.  Inside of a block (indicated by the `{` and `}` characters)\n\n##### Let\n\n`let` declarations are not hoisted to the top of the enclosing block.\n\n##### No Redeclaration\n\n```js\nvar count = 30;\n// Syntax error\nlet count = 40;\n```\n\nBut in a block, let ccan be use to declare an variable with same name.\n\n```js\nvar count = 30;\n// Does not throw an error\nif (condition) {\n  let count = 40;\n  // more code\n}\n```\n\n##### Const\n\n`const`, like `let` declarations, are block-level declarations.\n\n```js\nif (condition) {\n  const maxItems = 5;\n  // more code\n}\n// maxItems isn't accessible here\n```\n\n`const` cannot re-declaration as well.\n\n`const` cannot re-assign.\n\n```js\nconst maxItems = 5;\nmaxItems = 6; // throws error\n```\n\n##### Declaring Objects with const\n\nA `const` declaration prevents modification of the binding and not of the value itself.\n\n```js\nconst person = {\n  name: 'Nicholas',\n};\n\n// works\nperson.name = 'Greg';\n\n// throws an error\nperson = {\n  name: 'Greg',\n};\n```\n\n`const` prevents modification of the binding, not modification of the bound value.\n\n#### The Temporal Dead Zone(TDZ)\n\nA variable declared with either `let` or `const` cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the `typeof` operation.\n\n```js\nif (condition) {\n  console.log(typeof value); // ReferenceError!\n  let value = 'blue';\n}\n\nconsole.log(typeof value); // \"undefined\"\n\nif (condition) {\n  let value = 'blue';\n}\n```\n","slug":"ES6-Block-Binding","published":1,"updated":"2019-11-15T09:39:12.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmm80008f5s69kzr9rbi","content":"<h4 id=\"Var-declaration-and-hoisting\"><a href=\"#Var-declaration-and-hoisting\" class=\"headerlink\" title=\"Var declaration and hoisting\"></a>Var declaration and hoisting</h4><p>Hoisting: Variable declarations using <code>var</code> are treated as if they are at the top of the <strong>function</strong> (or <strong>global</strong> scope, if declared outside of a function) regardless of where the actual declaration occurs.</p>\n<h4 id=\"Block-level-Declarartion\"><a href=\"#Block-level-Declarartion\" class=\"headerlink\" title=\"Block-level Declarartion\"></a>Block-level Declarartion</h4><p>Block-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:</p>\n<ol>\n<li>Inside of a function</li>\n<li>Inside of a block (indicated by the <code>{</code> and <code>}</code> characters)</li>\n</ol>\n<h5 id=\"Let\"><a href=\"#Let\" class=\"headerlink\" title=\"Let\"></a>Let</h5><p><code>let</code> declarations are not hoisted to the top of the enclosing block.</p>\n<h5 id=\"No-Redeclaration\"><a href=\"#No-Redeclaration\" class=\"headerlink\" title=\"No Redeclaration\"></a>No Redeclaration</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Syntax error</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br></pre></td></tr></table></figure>\n<p>But in a block, let ccan be use to declare an variable with same name.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Does not throw an error</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const\"></a>Const</h5><p><code>const</code>, like <code>let</code> declarations, are block-level declarations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// maxItems isn't accessible here</span></span><br></pre></td></tr></table></figure>\n<p><code>const</code> cannot re-declaration as well.</p>\n<p><code>const</code> cannot re-assign.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">maxItems = <span class=\"number\">6</span>; <span class=\"comment\">// throws error</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Declaring-Objects-with-const\"><a href=\"#Declaring-Objects-with-const\" class=\"headerlink\" title=\"Declaring Objects with const\"></a>Declaring Objects with const</h5><p>A <code>const</code> declaration prevents modification of the binding and not of the value itself.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Nicholas'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// works</span></span><br><span class=\"line\">person.name = <span class=\"string\">'Greg'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// throws an error</span></span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Greg'</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>const</code> prevents modification of the binding, not modification of the bound value.</p>\n<h4 id=\"The-Temporal-Dead-Zone-TDZ\"><a href=\"#The-Temporal-Dead-Zone-TDZ\" class=\"headerlink\" title=\"The Temporal Dead Zone(TDZ)\"></a>The Temporal Dead Zone(TDZ)</h4><p>A variable declared with either <code>let</code> or <code>const</code> cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the <code>typeof</code> operation.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// ReferenceError!</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// \"undefined\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Var-declaration-and-hoisting\"><a href=\"#Var-declaration-and-hoisting\" class=\"headerlink\" title=\"Var declaration and hoisting\"></a>Var declaration and hoisting</h4><p>Hoisting: Variable declarations using <code>var</code> are treated as if they are at the top of the <strong>function</strong> (or <strong>global</strong> scope, if declared outside of a function) regardless of where the actual declaration occurs.</p>\n<h4 id=\"Block-level-Declarartion\"><a href=\"#Block-level-Declarartion\" class=\"headerlink\" title=\"Block-level Declarartion\"></a>Block-level Declarartion</h4><p>Block-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:</p>\n<ol>\n<li>Inside of a function</li>\n<li>Inside of a block (indicated by the <code>{</code> and <code>}</code> characters)</li>\n</ol>\n<h5 id=\"Let\"><a href=\"#Let\" class=\"headerlink\" title=\"Let\"></a>Let</h5><p><code>let</code> declarations are not hoisted to the top of the enclosing block.</p>\n<h5 id=\"No-Redeclaration\"><a href=\"#No-Redeclaration\" class=\"headerlink\" title=\"No Redeclaration\"></a>No Redeclaration</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Syntax error</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br></pre></td></tr></table></figure>\n<p>But in a block, let ccan be use to declare an variable with same name.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Does not throw an error</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const\"></a>Const</h5><p><code>const</code>, like <code>let</code> declarations, are block-level declarations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// maxItems isn't accessible here</span></span><br></pre></td></tr></table></figure>\n<p><code>const</code> cannot re-declaration as well.</p>\n<p><code>const</code> cannot re-assign.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">maxItems = <span class=\"number\">6</span>; <span class=\"comment\">// throws error</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Declaring-Objects-with-const\"><a href=\"#Declaring-Objects-with-const\" class=\"headerlink\" title=\"Declaring Objects with const\"></a>Declaring Objects with const</h5><p>A <code>const</code> declaration prevents modification of the binding and not of the value itself.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Nicholas'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// works</span></span><br><span class=\"line\">person.name = <span class=\"string\">'Greg'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// throws an error</span></span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Greg'</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>const</code> prevents modification of the binding, not modification of the bound value.</p>\n<h4 id=\"The-Temporal-Dead-Zone-TDZ\"><a href=\"#The-Temporal-Dead-Zone-TDZ\" class=\"headerlink\" title=\"The Temporal Dead Zone(TDZ)\"></a>The Temporal Dead Zone(TDZ)</h4><p>A variable declared with either <code>let</code> or <code>const</code> cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the <code>typeof</code> operation.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// ReferenceError!</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// \"undefined\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Regret Minimization and Multi-task Serially","abbrlink":"eaf5670e","date":"2018-02-24T01:29:46.000Z","_content":"\n前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。\n\n第一个就是之前听他说的 \"regret minimization\"。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 \"a better idea for someone who didn't have a good job\"。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 \"path not taken\" 而后悔。\n\n我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。\n\n第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，\"be doing whatever I'm doing\"。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，\"multi-task serially\"，按顺序的多任务。\n\n关于这点，我近年来也算是感触很深了。原来总觉得自己聪明（其实都是耍小聪明罢了），喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。\n\n现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。\n\n最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。\n\n目前就想到这么多吧，希望时刻能督促自己。\n","source":"_posts/Regret-Minimization-and-Multi-task-Serially.md","raw":"---\ntitle: Regret Minimization and Multi-task Serially\ncategories:\n  - life\nabbrlink: eaf5670e\ndate: 2018-02-23 17:29:46\ntags:\n---\n\n前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。\n\n第一个就是之前听他说的 \"regret minimization\"。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 \"a better idea for someone who didn't have a good job\"。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 \"path not taken\" 而后悔。\n\n我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。\n\n第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，\"be doing whatever I'm doing\"。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，\"multi-task serially\"，按顺序的多任务。\n\n关于这点，我近年来也算是感触很深了。原来总觉得自己聪明（其实都是耍小聪明罢了），喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。\n\n现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。\n\n最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。\n\n目前就想到这么多吧，希望时刻能督促自己。\n","slug":"Regret-Minimization-and-Multi-task-Serially","published":1,"updated":"2019-11-15T09:39:12.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmm80009f5s6zw17bqhv","content":"<p>前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。</p>\n<p>第一个就是之前听他说的 “regret minimization”。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 “a better idea for someone who didn’t have a good job”。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 “path not taken” 而后悔。</p>\n<p>我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。</p>\n<p>第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，”be doing whatever I’m doing”。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，”multi-task serially”，按顺序的多任务。</p>\n<p>关于这点，我近年来也算是感触很深了。原来总觉得自己聪明（其实都是耍小聪明罢了），喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。</p>\n<p>现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。</p>\n<p>最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。</p>\n<p>目前就想到这么多吧，希望时刻能督促自己。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。</p>\n<p>第一个就是之前听他说的 “regret minimization”。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 “a better idea for someone who didn’t have a good job”。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 “path not taken” 而后悔。</p>\n<p>我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。</p>\n<p>第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，”be doing whatever I’m doing”。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，”multi-task serially”，按顺序的多任务。</p>\n<p>关于这点，我近年来也算是感触很深了。原来总觉得自己聪明（其实都是耍小聪明罢了），喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。</p>\n<p>现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。</p>\n<p>最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。</p>\n<p>目前就想到这么多吧，希望时刻能督促自己。</p>\n"},{"title":"Run React Native App on Mac","abbrlink":"b18b9540","date":"2018-02-05T09:05:04.000Z","_content":"\n1. make sure installed LATEST Xcode on your mac. Be make sure check your app store to upgrade your Xcode to latest version.\n2. install homebrew or nvm, so you can install node and manage your nodejs version.\n3. install nodejs and npm\n4. install watchman\n5. install react native cli such as `react-native-cli`\n6. create your react native project using `react-native init <project-name>`\n\nAfter installing these tools, use `react-native run-ios` to start your simulator.\n\nAnd in case if you met this error code when you run `react-native run-ios [--simulator=\"iPhone X\"]`\n\n```shell\nFound Xcode project TestProject.xcodeproj\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n\nCommand failed: xcrun instruments -s\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n```\n\nthis is because you did not set your xcode's command line tools, so your can go to `preference -> locations -> Command Line Tools` to select.\n\n![xcode command line tools](http://ww1.sinaimg.cn/large/71dc9500ly1fo5oy30mhdj21eo0w646p.jpg)\n","source":"_posts/Run-react-native-app-on-Mac.md","raw":"---\ntitle: Run React Native App on Mac\ncategories:\n  - web\ntags:\n  - react\n  - react native\n  - Xcode\nabbrlink: b18b9540\ndate: 2018-02-05 01:05:04\n---\n\n1. make sure installed LATEST Xcode on your mac. Be make sure check your app store to upgrade your Xcode to latest version.\n2. install homebrew or nvm, so you can install node and manage your nodejs version.\n3. install nodejs and npm\n4. install watchman\n5. install react native cli such as `react-native-cli`\n6. create your react native project using `react-native init <project-name>`\n\nAfter installing these tools, use `react-native run-ios` to start your simulator.\n\nAnd in case if you met this error code when you run `react-native run-ios [--simulator=\"iPhone X\"]`\n\n```shell\nFound Xcode project TestProject.xcodeproj\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n\nCommand failed: xcrun instruments -s\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n```\n\nthis is because you did not set your xcode's command line tools, so your can go to `preference -> locations -> Command Line Tools` to select.\n\n![xcode command line tools](http://ww1.sinaimg.cn/large/71dc9500ly1fo5oy30mhdj21eo0w646p.jpg)\n","slug":"Run-react-native-app-on-Mac","published":1,"updated":"2019-11-15T09:39:12.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmm9000af5s64w3p1wlb","content":"<ol>\n<li>make sure installed LATEST Xcode on your mac. Be make sure check your app store to upgrade your Xcode to latest version.</li>\n<li>install homebrew or nvm, so you can install node and manage your nodejs version.</li>\n<li>install nodejs and npm</li>\n<li>install watchman</li>\n<li>install react native cli such as <code>react-native-cli</code></li>\n<li>create your react native project using <code>react-native init &lt;project-name&gt;</code></li>\n</ol>\n<p>After installing these tools, use <code>react-native run-ios</code> to start your simulator.</p>\n<p>And in case if you met this error code when you run <code>react-native run-ios [--simulator=&quot;iPhone X&quot;]</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found Xcode project TestProject.xcodeproj</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br><span class=\"line\"></span><br><span class=\"line\">Command failed: xcrun instruments -s</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br></pre></td></tr></table></figure>\n<p>this is because you did not set your xcode’s command line tools, so your can go to <code>preference -&gt; locations -&gt; Command Line Tools</code> to select.</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/71dc9500ly1fo5oy30mhdj21eo0w646p.jpg\" alt=\"xcode command line tools\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>make sure installed LATEST Xcode on your mac. Be make sure check your app store to upgrade your Xcode to latest version.</li>\n<li>install homebrew or nvm, so you can install node and manage your nodejs version.</li>\n<li>install nodejs and npm</li>\n<li>install watchman</li>\n<li>install react native cli such as <code>react-native-cli</code></li>\n<li>create your react native project using <code>react-native init &lt;project-name&gt;</code></li>\n</ol>\n<p>After installing these tools, use <code>react-native run-ios</code> to start your simulator.</p>\n<p>And in case if you met this error code when you run <code>react-native run-ios [--simulator=&quot;iPhone X&quot;]</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found Xcode project TestProject.xcodeproj</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br><span class=\"line\"></span><br><span class=\"line\">Command failed: xcrun instruments -s</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br></pre></td></tr></table></figure>\n<p>this is because you did not set your xcode’s command line tools, so your can go to <code>preference -&gt; locations -&gt; Command Line Tools</code> to select.</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/71dc9500ly1fo5oy30mhdj21eo0w646p.jpg\" alt=\"xcode command line tools\"></p>\n"},{"title":"Timers in JavaScript","abbrlink":"d1698058","date":"2018-10-20T23:55:28.000Z","_content":"\n#### Challenge 1\n\nprint the following 2 messages after their corresponding delays.\n\n- Print the message “_Hello after 4 seconds_” after 4 seconds\n- Print the message “_Hello after 8 seconds_” after 8 seconds.\n\n**Constraints**:\nYou can define only a single function in your solution, which includes inline functions. This means many `setTimeout` calls will have to use the exact same function.\n\n```javascript\nconst func = (time) => {\n  console.log(`Hello after ${time} seconds`);\n};\nsetTimeout(func, 4000, 4);\nsetTimeout(func, 8000, 8);\n```\n\nsetTimeout clearTimeout;\n\nsetInterval clearInterval\n\nsetImmediate clearImmediate\n\ndelay is not guarantee\n\n```js\nsetTimeout(() => console.log('Hello after 0.5 seconds. MAYBE!'), 500);\nfor (let i = 0; i < 1e10; i++) {\n  // Block Things Synchronously\n}\n```\n\n#### Challenge 2\n\nWrite a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.\n\n```js\nlet count = 0;\nconst itv = setInterval(() => {\n  console.log('hello world');\n  count += 1;\n  if (count === 5) {\n    console.log('done');\n    clearInterval(itv);\n  }\n}, 1000);\n```\n\n#### Challenge 3\n\nonly use `const`, can't use `let` or `var`.\n\nWrite a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.\n\nprint\n\nHello World. 1\nHello World. 2\nHello World. 3\n...\n\n```js\nconst recur = (delay) => {\n  setTimeout(() => {\n    console.log('Hello World.', delay);\n    recur(delay + 1);\n  }, delay * 1000);\n};\nrecur(1);\n```\n\n#### Challenge 4\n\nWrite a script to continuously print the message “_Hello World_” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.\n\nprint\n\n```\nHello World. 100  // At 100ms\nHello World. 100  // At 200ms\nHello World. 100  // At 300ms\nHello World. 100  // At 400ms\nHello World. 100  // At 500ms\nHello World. 200  // At 700ms\nHello World. 200  // At 900ms\nHello World. 200  // At 1100ms\n...\n```\n\n**Constraints:** You can use only `setInterval` calls (not `setTimeout`) and you can use only ONE if statement.\n\n```js\nlet lastIntervalId,\n  counter = 5;\nconst greeting = (delay) => {\n  if (counter === 5) {\n    clearInterval(lastIntervalId);\n    lastIntervalId = setInterval(() => {\n      console.log('Hello World. ', delay);\n      greeting(delay + 100);\n    }, delay);\n    counter = 0;\n  }\n  counter += 1;\n};\ngreeting(100);\n```\n\n#### original Article\n\n[JavaScript Timers: Everything you need to know](https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162)\n","source":"_posts/Timers-in-JavaScript.md","raw":"---\ntitle: Timers in JavaScript\ncategories:\n  - tech\ntags:\n  - javascript\n  - setTimeout\n  - setInterval\nabbrlink: d1698058\ndate: 2018-10-20 16:55:28\n---\n\n#### Challenge 1\n\nprint the following 2 messages after their corresponding delays.\n\n- Print the message “_Hello after 4 seconds_” after 4 seconds\n- Print the message “_Hello after 8 seconds_” after 8 seconds.\n\n**Constraints**:\nYou can define only a single function in your solution, which includes inline functions. This means many `setTimeout` calls will have to use the exact same function.\n\n```javascript\nconst func = (time) => {\n  console.log(`Hello after ${time} seconds`);\n};\nsetTimeout(func, 4000, 4);\nsetTimeout(func, 8000, 8);\n```\n\nsetTimeout clearTimeout;\n\nsetInterval clearInterval\n\nsetImmediate clearImmediate\n\ndelay is not guarantee\n\n```js\nsetTimeout(() => console.log('Hello after 0.5 seconds. MAYBE!'), 500);\nfor (let i = 0; i < 1e10; i++) {\n  // Block Things Synchronously\n}\n```\n\n#### Challenge 2\n\nWrite a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.\n\n```js\nlet count = 0;\nconst itv = setInterval(() => {\n  console.log('hello world');\n  count += 1;\n  if (count === 5) {\n    console.log('done');\n    clearInterval(itv);\n  }\n}, 1000);\n```\n\n#### Challenge 3\n\nonly use `const`, can't use `let` or `var`.\n\nWrite a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.\n\nprint\n\nHello World. 1\nHello World. 2\nHello World. 3\n...\n\n```js\nconst recur = (delay) => {\n  setTimeout(() => {\n    console.log('Hello World.', delay);\n    recur(delay + 1);\n  }, delay * 1000);\n};\nrecur(1);\n```\n\n#### Challenge 4\n\nWrite a script to continuously print the message “_Hello World_” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.\n\nprint\n\n```\nHello World. 100  // At 100ms\nHello World. 100  // At 200ms\nHello World. 100  // At 300ms\nHello World. 100  // At 400ms\nHello World. 100  // At 500ms\nHello World. 200  // At 700ms\nHello World. 200  // At 900ms\nHello World. 200  // At 1100ms\n...\n```\n\n**Constraints:** You can use only `setInterval` calls (not `setTimeout`) and you can use only ONE if statement.\n\n```js\nlet lastIntervalId,\n  counter = 5;\nconst greeting = (delay) => {\n  if (counter === 5) {\n    clearInterval(lastIntervalId);\n    lastIntervalId = setInterval(() => {\n      console.log('Hello World. ', delay);\n      greeting(delay + 100);\n    }, delay);\n    counter = 0;\n  }\n  counter += 1;\n};\ngreeting(100);\n```\n\n#### original Article\n\n[JavaScript Timers: Everything you need to know](https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162)\n","slug":"Timers-in-JavaScript","published":1,"updated":"2019-11-15T09:39:12.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmmb000bf5s65u1e98xk","content":"<h4 id=\"Challenge-1\"><a href=\"#Challenge-1\" class=\"headerlink\" title=\"Challenge 1\"></a>Challenge 1</h4><p>print the following 2 messages after their corresponding delays.</p>\n<ul>\n<li>Print the message “<em>Hello after 4 seconds</em>” after 4 seconds</li>\n<li>Print the message “<em>Hello after 8 seconds</em>” after 8 seconds.</li>\n</ul>\n<p><strong>Constraints</strong>:<br>You can define only a single function in your solution, which includes inline functions. This means many <code>setTimeout</code> calls will have to use the exact same function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello after <span class=\"subst\">$&#123;time&#125;</span> seconds`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(func, <span class=\"number\">4000</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">setTimeout(func, <span class=\"number\">8000</span>, <span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure>\n<p>setTimeout clearTimeout;</p>\n<p>setInterval clearInterval</p>\n<p>setImmediate clearImmediate</p>\n<p>delay is not guarantee</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello after 0.5 seconds. MAYBE!'</span>), <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Block Things Synchronously</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-2\"><a href=\"#Challenge-2\" class=\"headerlink\" title=\"Challenge 2\"></a>Challenge 2</h4><p>Write a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> itv = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">  count += <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>);</span><br><span class=\"line\">    clearInterval(itv);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-3\"><a href=\"#Challenge-3\" class=\"headerlink\" title=\"Challenge 3\"></a>Challenge 3</h4><p>only use <code>const</code>, can’t use <code>let</code> or <code>var</code>.</p>\n<p>Write a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.</p>\n<p>print</p>\n<p>Hello World. 1<br>Hello World. 2<br>Hello World. 3<br>…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> recur = <span class=\"function\">(<span class=\"params\">delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World.'</span>, delay);</span><br><span class=\"line\">    recur(delay + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;, delay * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">recur(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-4\"><a href=\"#Challenge-4\" class=\"headerlink\" title=\"Challenge 4\"></a>Challenge 4</h4><p>Write a script to continuously print the message “<em>Hello World</em>” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.</p>\n<p>print</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World. 100  // At 100ms</span><br><span class=\"line\">Hello World. 100  // At 200ms</span><br><span class=\"line\">Hello World. 100  // At 300ms</span><br><span class=\"line\">Hello World. 100  // At 400ms</span><br><span class=\"line\">Hello World. 100  // At 500ms</span><br><span class=\"line\">Hello World. 200  // At 700ms</span><br><span class=\"line\">Hello World. 200  // At 900ms</span><br><span class=\"line\">Hello World. 200  // At 1100ms</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>Constraints:</strong> You can use only <code>setInterval</code> calls (not <code>setTimeout</code>) and you can use only ONE if statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastIntervalId,</span><br><span class=\"line\">  counter = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"function\">(<span class=\"params\">delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (counter === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    clearInterval(lastIntervalId);</span><br><span class=\"line\">    lastIntervalId = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World. '</span>, delay);</span><br><span class=\"line\">      greeting(delay + <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">    counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  counter += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">greeting(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"original-Article\"><a href=\"#original-Article\" class=\"headerlink\" title=\"original Article\"></a>original Article</h4><p><a href=\"https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162\" target=\"_blank\" rel=\"noopener\">JavaScript Timers: Everything you need to know</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Challenge-1\"><a href=\"#Challenge-1\" class=\"headerlink\" title=\"Challenge 1\"></a>Challenge 1</h4><p>print the following 2 messages after their corresponding delays.</p>\n<ul>\n<li>Print the message “<em>Hello after 4 seconds</em>” after 4 seconds</li>\n<li>Print the message “<em>Hello after 8 seconds</em>” after 8 seconds.</li>\n</ul>\n<p><strong>Constraints</strong>:<br>You can define only a single function in your solution, which includes inline functions. This means many <code>setTimeout</code> calls will have to use the exact same function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello after <span class=\"subst\">$&#123;time&#125;</span> seconds`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(func, <span class=\"number\">4000</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">setTimeout(func, <span class=\"number\">8000</span>, <span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure>\n<p>setTimeout clearTimeout;</p>\n<p>setInterval clearInterval</p>\n<p>setImmediate clearImmediate</p>\n<p>delay is not guarantee</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello after 0.5 seconds. MAYBE!'</span>), <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Block Things Synchronously</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-2\"><a href=\"#Challenge-2\" class=\"headerlink\" title=\"Challenge 2\"></a>Challenge 2</h4><p>Write a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> itv = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">  count += <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>);</span><br><span class=\"line\">    clearInterval(itv);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-3\"><a href=\"#Challenge-3\" class=\"headerlink\" title=\"Challenge 3\"></a>Challenge 3</h4><p>only use <code>const</code>, can’t use <code>let</code> or <code>var</code>.</p>\n<p>Write a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.</p>\n<p>print</p>\n<p>Hello World. 1<br>Hello World. 2<br>Hello World. 3<br>…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> recur = <span class=\"function\">(<span class=\"params\">delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World.'</span>, delay);</span><br><span class=\"line\">    recur(delay + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;, delay * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">recur(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-4\"><a href=\"#Challenge-4\" class=\"headerlink\" title=\"Challenge 4\"></a>Challenge 4</h4><p>Write a script to continuously print the message “<em>Hello World</em>” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.</p>\n<p>print</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World. 100  // At 100ms</span><br><span class=\"line\">Hello World. 100  // At 200ms</span><br><span class=\"line\">Hello World. 100  // At 300ms</span><br><span class=\"line\">Hello World. 100  // At 400ms</span><br><span class=\"line\">Hello World. 100  // At 500ms</span><br><span class=\"line\">Hello World. 200  // At 700ms</span><br><span class=\"line\">Hello World. 200  // At 900ms</span><br><span class=\"line\">Hello World. 200  // At 1100ms</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>Constraints:</strong> You can use only <code>setInterval</code> calls (not <code>setTimeout</code>) and you can use only ONE if statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastIntervalId,</span><br><span class=\"line\">  counter = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"function\">(<span class=\"params\">delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (counter === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    clearInterval(lastIntervalId);</span><br><span class=\"line\">    lastIntervalId = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World. '</span>, delay);</span><br><span class=\"line\">      greeting(delay + <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">    counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  counter += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">greeting(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"original-Article\"><a href=\"#original-Article\" class=\"headerlink\" title=\"original Article\"></a>original Article</h4><p><a href=\"https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162\" target=\"_blank\" rel=\"noopener\">JavaScript Timers: Everything you need to know</a></p>\n"},{"title":"ECMAScript2015 modules","abbrlink":"646f8dec","date":"2018-04-08T00:30:40.000Z","_content":"\nA module is Javascript code that automatically runs in **strict** mode with no way opt out.\n\nmodule and script are not the same.\n\n#### import and export\n\n##### 1. named export (several per module)\n\n```javascript\n//------ lib.js ------\nexport const sqrt = Math.sqrt;\nexport function square(x) {\n  return x * x;\n}\nexport function diag(x, y) {\n  return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\n\nimport { square, diag } from './lib.js';\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n\n// can not reassign imported bindings\nsuqare = 2; // throw an error\n\n// or\n\n//------ main.js ------\nimport * as lib from 'lib';\nconsole.log(lib.square(11)); // 121\nconsole.log(lib.diag(4, 3)); // 5\n```\n\n- syntax: import { identifiers } from './example.js' -> module specifier\n\n- the list of binding to imports is not a destructured object\n\n- the last one this is called _namespace_ import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.\n\n- Be sure to include /, ./ or ../ at the beginning of the string representing the file for the best compatibility across browsers and node.js.\n\n- lib.js is only execute once, no matter how many import statements have been declared. After the code to import the module executes, the instantiated module is kept in **memory** and reused whenever another import statement reference to it. e.g.\n\n```javascript\n// just execute lib.js once\nimport { diag } from './lib.js';\nimport { square } from './lib.js';\n```\n\n- import/export must be used outside condition statement or functions.\n\n```javascript\nif (flag) {\n    export flag; // syntax error\n}\n\nfunction tryImport() {\nimport { diag } from './lib.js'; // syntax error\n}\n```\n\n- ES6 import statement create _read-only_ bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.\n\n```javascript\nexport var name = 'Nico';\nexport function setName(x) {\n  name = x;\n}\n\nimport { name, setName } from './lib.js';\nconsole.log(name); // Nico\nsetName('Jack');\nconsole.log(name); // Jack\n\n// can not reassign imported bindings\nname = 'Nico'; // throw an error\n```\n\n- renaming export and import\n\n```javascript\nexport {sum as add};\nimport {add} form './example.js';\n\n// or\nimport { add as sum } from './example.js';\nconsole.log(typeof add); // udefined\n```\n\n##### 2. default export (one per module)\n\n```javascript\n//------ myFunc.js ------\nexport default function () { ··· } // no semicolon!\n\n//------ main1.js ------\nimport myFunc from 'myFunc';\nmyFunc();\n\n// or\nfunction sum () { ... }\nexport default sum;\n\n// or\nexport sum2() { ... }\nexport {sum as default}\n\n// Or a class:\n\n//------ MyClass.js ------\nexport default class { ··· } // no semicolon!\n\n//------ main2.js ------\nimport MyClass from 'MyClass';\nconst inst = new MyClass();\n```\n\n##### 3. combine\n\nyou can use named export and default together\n\nnote: the default must come before the non-defaults in import statement.\n\n```js\nexport var name = 'Nico';\nexport default function () { ··· }\n\nimport sum, { name } from './example.js';\n\n// or\nimport { default as sum, name } from './example.js';\n```\n\n##### 4. re-exporting\n\n```js\nimport {add} form './example.js';\nexport add;\n\n// or short\nexport { add } from './example.js';\n\n// export with different name\nexport { add as sum } from './example.js';\n\n// export everything\nexport * from './example.js';\n```\n\nnote: by exporting everything, you're including default as well as any named exports.\n\n##### 5. importing without bindings\n\nSome modules may not export anthing; instead they might only modify object in the gloabal scope. _Import without bindings are most likely to be used to create polyfills and shims_.\n\n```js\n// example.js\nArray.prototype.somethingFancy = function () { ...}\n\n// main.js\nimport './example.js'\nlet arr = [];\narr.somethingFancy();\n```\n\n#### loading modules\n\n##### 1. use <\bscript> as `defer`\n\n```html\n<!-- load a module JavaScript file -->\n<script type=\"module\" src=\"module.js\"></script>\n\n<!-- include a module inline -->\n<script type=\"module\">\n  import { sum } from './example.js';\n\n  let result = sum(1, 2);\n</script>\n```\n\n- 'module' is not a content type like 'text/javascript', and browsers ignore `<script>` elements when type is unrecognized, providing good backwards-compatibility.\n\n- in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.\n\n- module sequence; `<script type=\"module\">` always acts as if the `defer` attribute is applied.\n\n```html\n<!-- this will execute first -->\n<script type=\"module\" src=\"module1.js\"></script>\n\n<!-- this will execute second -->\n<script type=\"module\">\n  import { sum } from './example.js';\n\n  let result = sum(1, 2);\n</script>\n```\n\n- synchronies and sequential: **modules are parsed completely first to dientify all `import`, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.**\n\ni. download and parse `module1.js` , recursive download and parse import in `module1.js`;\n\nii. parse inline module\n\nonce loading complete\n\niiii. recursive execute `import` source in `module1.js`, then execute `module1.js`\n\niiiii. recursive execute `import` source in inline module, then execute inline module\n\n##### 2. use <\bscript> as `async`\n\n```html\n<!-- no guarantee which one of these will execute first -->\n<script type=\"module\" async src=\"module1.js\"></script>\n<script type=\"module\" async src=\"module2.js\"></script>\n```\n\nthe `async` causes the script file to be executed as soon as the file is completed downloaded and parsed. the order in document does not affect the order in which the scripts are executed. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.\n\n##### 3. use `Worker`\n\n```js\n// load script.js as a script\nlet worker = new Worker('script.js');\n\n// load module.js as a module\nlet worker = new Worker('module.js', { type: 'module' });\n```\n\n#### related reading material\n\n1. Nicholas C. Zakas, [Understanding ECMAScript 6](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n2. Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n\n3. nodejs document, [Modules](https://nodejs.org/api/modules.html)\n","source":"_posts/ecmascript2015-modules.md","raw":"---\ntitle: ECMAScript2015 modules\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - module\nabbrlink: 646f8dec\ndate: 2018-04-07 17:30:40\n---\n\nA module is Javascript code that automatically runs in **strict** mode with no way opt out.\n\nmodule and script are not the same.\n\n#### import and export\n\n##### 1. named export (several per module)\n\n```javascript\n//------ lib.js ------\nexport const sqrt = Math.sqrt;\nexport function square(x) {\n  return x * x;\n}\nexport function diag(x, y) {\n  return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\n\nimport { square, diag } from './lib.js';\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n\n// can not reassign imported bindings\nsuqare = 2; // throw an error\n\n// or\n\n//------ main.js ------\nimport * as lib from 'lib';\nconsole.log(lib.square(11)); // 121\nconsole.log(lib.diag(4, 3)); // 5\n```\n\n- syntax: import { identifiers } from './example.js' -> module specifier\n\n- the list of binding to imports is not a destructured object\n\n- the last one this is called _namespace_ import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.\n\n- Be sure to include /, ./ or ../ at the beginning of the string representing the file for the best compatibility across browsers and node.js.\n\n- lib.js is only execute once, no matter how many import statements have been declared. After the code to import the module executes, the instantiated module is kept in **memory** and reused whenever another import statement reference to it. e.g.\n\n```javascript\n// just execute lib.js once\nimport { diag } from './lib.js';\nimport { square } from './lib.js';\n```\n\n- import/export must be used outside condition statement or functions.\n\n```javascript\nif (flag) {\n    export flag; // syntax error\n}\n\nfunction tryImport() {\nimport { diag } from './lib.js'; // syntax error\n}\n```\n\n- ES6 import statement create _read-only_ bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.\n\n```javascript\nexport var name = 'Nico';\nexport function setName(x) {\n  name = x;\n}\n\nimport { name, setName } from './lib.js';\nconsole.log(name); // Nico\nsetName('Jack');\nconsole.log(name); // Jack\n\n// can not reassign imported bindings\nname = 'Nico'; // throw an error\n```\n\n- renaming export and import\n\n```javascript\nexport {sum as add};\nimport {add} form './example.js';\n\n// or\nimport { add as sum } from './example.js';\nconsole.log(typeof add); // udefined\n```\n\n##### 2. default export (one per module)\n\n```javascript\n//------ myFunc.js ------\nexport default function () { ··· } // no semicolon!\n\n//------ main1.js ------\nimport myFunc from 'myFunc';\nmyFunc();\n\n// or\nfunction sum () { ... }\nexport default sum;\n\n// or\nexport sum2() { ... }\nexport {sum as default}\n\n// Or a class:\n\n//------ MyClass.js ------\nexport default class { ··· } // no semicolon!\n\n//------ main2.js ------\nimport MyClass from 'MyClass';\nconst inst = new MyClass();\n```\n\n##### 3. combine\n\nyou can use named export and default together\n\nnote: the default must come before the non-defaults in import statement.\n\n```js\nexport var name = 'Nico';\nexport default function () { ··· }\n\nimport sum, { name } from './example.js';\n\n// or\nimport { default as sum, name } from './example.js';\n```\n\n##### 4. re-exporting\n\n```js\nimport {add} form './example.js';\nexport add;\n\n// or short\nexport { add } from './example.js';\n\n// export with different name\nexport { add as sum } from './example.js';\n\n// export everything\nexport * from './example.js';\n```\n\nnote: by exporting everything, you're including default as well as any named exports.\n\n##### 5. importing without bindings\n\nSome modules may not export anthing; instead they might only modify object in the gloabal scope. _Import without bindings are most likely to be used to create polyfills and shims_.\n\n```js\n// example.js\nArray.prototype.somethingFancy = function () { ...}\n\n// main.js\nimport './example.js'\nlet arr = [];\narr.somethingFancy();\n```\n\n#### loading modules\n\n##### 1. use <\bscript> as `defer`\n\n```html\n<!-- load a module JavaScript file -->\n<script type=\"module\" src=\"module.js\"></script>\n\n<!-- include a module inline -->\n<script type=\"module\">\n  import { sum } from './example.js';\n\n  let result = sum(1, 2);\n</script>\n```\n\n- 'module' is not a content type like 'text/javascript', and browsers ignore `<script>` elements when type is unrecognized, providing good backwards-compatibility.\n\n- in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.\n\n- module sequence; `<script type=\"module\">` always acts as if the `defer` attribute is applied.\n\n```html\n<!-- this will execute first -->\n<script type=\"module\" src=\"module1.js\"></script>\n\n<!-- this will execute second -->\n<script type=\"module\">\n  import { sum } from './example.js';\n\n  let result = sum(1, 2);\n</script>\n```\n\n- synchronies and sequential: **modules are parsed completely first to dientify all `import`, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.**\n\ni. download and parse `module1.js` , recursive download and parse import in `module1.js`;\n\nii. parse inline module\n\nonce loading complete\n\niiii. recursive execute `import` source in `module1.js`, then execute `module1.js`\n\niiiii. recursive execute `import` source in inline module, then execute inline module\n\n##### 2. use <\bscript> as `async`\n\n```html\n<!-- no guarantee which one of these will execute first -->\n<script type=\"module\" async src=\"module1.js\"></script>\n<script type=\"module\" async src=\"module2.js\"></script>\n```\n\nthe `async` causes the script file to be executed as soon as the file is completed downloaded and parsed. the order in document does not affect the order in which the scripts are executed. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.\n\n##### 3. use `Worker`\n\n```js\n// load script.js as a script\nlet worker = new Worker('script.js');\n\n// load module.js as a module\nlet worker = new Worker('module.js', { type: 'module' });\n```\n\n#### related reading material\n\n1. Nicholas C. Zakas, [Understanding ECMAScript 6](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n2. Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n\n3. nodejs document, [Modules](https://nodejs.org/api/modules.html)\n","slug":"ecmascript2015-modules","published":1,"updated":"2019-11-15T09:39:12.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmmg000cf5s6w2ndmmry","content":"<p>A module is Javascript code that automatically runs in <strong>strict</strong> mode with no way opt out.</p>\n<p>module and script are not the same.</p>\n<h4 id=\"import-and-export\"><a href=\"#import-and-export\" class=\"headerlink\" title=\"import and export\"></a>import and export</h4><h5 id=\"1-named-export-several-per-module\"><a href=\"#1-named-export-several-per-module\" class=\"headerlink\" title=\"1. named export (several per module)\"></a>1. named export (several per module)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ lib.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> sqrt = <span class=\"built_in\">Math</span>.sqrt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diag</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sqrt(square(x) + square(y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square, diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">suqare = <span class=\"number\">2</span>; <span class=\"comment\">// throw an error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lib <span class=\"keyword\">from</span> <span class=\"string\">'lib'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>syntax: import { identifiers } from ‘./example.js’ -&gt; module specifier</p>\n</li>\n<li><p>the list of binding to imports is not a destructured object</p>\n</li>\n<li><p>the last one this is called <em>namespace</em> import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.</p>\n</li>\n<li><p>Be sure to include /, ./ or ../ at the beginning of the string representing the file for the best compatibility across browsers and node.js.</p>\n</li>\n<li><p>lib.js is only execute once, no matter how many import statements have been declared. After the code to import the module executes, the instantiated module is kept in <strong>memory</strong> and reused whenever another import statement reference to it. e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// just execute lib.js once</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>import/export must be used outside condition statement or functions.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> flag; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryImport</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ES6 import statement create <em>read-only</em> bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  name = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, setName &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Nico</span></span><br><span class=\"line\">setName(<span class=\"string\">'Jack'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">name = <span class=\"string\">'Nico'</span>; <span class=\"comment\">// throw an error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>renaming export and import</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> add&#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> add); <span class=\"comment\">// udefined</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-default-export-one-per-module\"><a href=\"#2-default-export-one-per-module\" class=\"headerlink\" title=\"2. default export (one per module)\"></a>2. default export (one per module)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ myFunc.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main1.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myFunc <span class=\"keyword\">from</span> <span class=\"string\">'myFunc'</span>;</span><br><span class=\"line\">myFunc();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\"></span>) </span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> sum2() &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or a class:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ MyClass.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main2.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MyClass <span class=\"keyword\">from</span> <span class=\"string\">'MyClass'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> inst = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-combine\"><a href=\"#3-combine\" class=\"headerlink\" title=\"3. combine\"></a>3. combine</h5><p>you can use named export and default together</p>\n<p>note: the default must come before the non-defaults in import statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum, &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> sum, name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-re-exporting\"><a href=\"#4-re-exporting\" class=\"headerlink\" title=\"4. re-exporting\"></a>4. re-exporting</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or short</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export with different name</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export everything</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<p>note: by exporting everything, you’re including default as well as any named exports.</p>\n<h5 id=\"5-importing-without-bindings\"><a href=\"#5-importing-without-bindings\" class=\"headerlink\" title=\"5. importing without bindings\"></a>5. importing without bindings</h5><p>Some modules may not export anthing; instead they might only modify object in the gloabal scope. <em>Import without bindings are most likely to be used to create polyfills and shims</em>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.js</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.somethingFancy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./example.js'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">arr.somethingFancy();</span><br></pre></td></tr></table></figure>\n<h4 id=\"loading-modules\"><a href=\"#loading-modules\" class=\"headerlink\" title=\"loading modules\"></a>loading modules</h4><h5 id=\"1-use-lt-script-gt-as-defer\"><a href=\"#1-use-lt-script-gt-as-defer\" class=\"headerlink\" title=\"1. use &lt;\bscript&gt; as defer\"></a>1. use &lt;\bscript&gt; as <code>defer</code></h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- load a module JavaScript file --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- include a module inline --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>‘module’ is not a content type like ‘text/javascript’, and browsers ignore <code>&lt;script&gt;</code> elements when type is unrecognized, providing good backwards-compatibility.</p>\n</li>\n<li><p>in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.</p>\n</li>\n<li><p>module sequence; <code>&lt;script type=&quot;module&quot;&gt;</code> always acts as if the <code>defer</code> attribute is applied.</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute second --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>synchronies and sequential: <strong>modules are parsed completely first to dientify all <code>import</code>, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.</strong></li>\n</ul>\n<p>i. download and parse <code>module1.js</code> , recursive download and parse import in <code>module1.js</code>;</p>\n<p>ii. parse inline module</p>\n<p>once loading complete</p>\n<p>iiii. recursive execute <code>import</code> source in <code>module1.js</code>, then execute <code>module1.js</code></p>\n<p>iiiii. recursive execute <code>import</code> source in inline module, then execute inline module</p>\n<h5 id=\"2-use-lt-script-gt-as-async\"><a href=\"#2-use-lt-script-gt-as-async\" class=\"headerlink\" title=\"2. use &lt;\bscript&gt; as async\"></a>2. use &lt;\bscript&gt; as <code>async</code></h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- no guarantee which one of these will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>the <code>async</code> causes the script file to be executed as soon as the file is completed downloaded and parsed. the order in document does not affect the order in which the scripts are executed. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.</p>\n<h5 id=\"3-use-Worker\"><a href=\"#3-use-Worker\" class=\"headerlink\" title=\"3. use Worker\"></a>3. use <code>Worker</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load script.js as a script</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'script.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load module.js as a module</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'module.js'</span>, &#123; <span class=\"attr\">type</span>: <span class=\"string\">'module'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></p>\n</li>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>A module is Javascript code that automatically runs in <strong>strict</strong> mode with no way opt out.</p>\n<p>module and script are not the same.</p>\n<h4 id=\"import-and-export\"><a href=\"#import-and-export\" class=\"headerlink\" title=\"import and export\"></a>import and export</h4><h5 id=\"1-named-export-several-per-module\"><a href=\"#1-named-export-several-per-module\" class=\"headerlink\" title=\"1. named export (several per module)\"></a>1. named export (several per module)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ lib.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> sqrt = <span class=\"built_in\">Math</span>.sqrt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diag</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sqrt(square(x) + square(y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square, diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">suqare = <span class=\"number\">2</span>; <span class=\"comment\">// throw an error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lib <span class=\"keyword\">from</span> <span class=\"string\">'lib'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>syntax: import { identifiers } from ‘./example.js’ -&gt; module specifier</p>\n</li>\n<li><p>the list of binding to imports is not a destructured object</p>\n</li>\n<li><p>the last one this is called <em>namespace</em> import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.</p>\n</li>\n<li><p>Be sure to include /, ./ or ../ at the beginning of the string representing the file for the best compatibility across browsers and node.js.</p>\n</li>\n<li><p>lib.js is only execute once, no matter how many import statements have been declared. After the code to import the module executes, the instantiated module is kept in <strong>memory</strong> and reused whenever another import statement reference to it. e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// just execute lib.js once</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>import/export must be used outside condition statement or functions.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> flag; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryImport</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ES6 import statement create <em>read-only</em> bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  name = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, setName &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Nico</span></span><br><span class=\"line\">setName(<span class=\"string\">'Jack'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">name = <span class=\"string\">'Nico'</span>; <span class=\"comment\">// throw an error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>renaming export and import</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> add&#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> add); <span class=\"comment\">// udefined</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2-default-export-one-per-module\"><a href=\"#2-default-export-one-per-module\" class=\"headerlink\" title=\"2. default export (one per module)\"></a>2. default export (one per module)</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ myFunc.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main1.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myFunc <span class=\"keyword\">from</span> <span class=\"string\">'myFunc'</span>;</span><br><span class=\"line\">myFunc();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\"></span>) </span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> sum2() &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or a class:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ MyClass.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main2.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MyClass <span class=\"keyword\">from</span> <span class=\"string\">'MyClass'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> inst = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-combine\"><a href=\"#3-combine\" class=\"headerlink\" title=\"3. combine\"></a>3. combine</h5><p>you can use named export and default together</p>\n<p>note: the default must come before the non-defaults in import statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum, &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> sum, name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-re-exporting\"><a href=\"#4-re-exporting\" class=\"headerlink\" title=\"4. re-exporting\"></a>4. re-exporting</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or short</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export with different name</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export everything</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<p>note: by exporting everything, you’re including default as well as any named exports.</p>\n<h5 id=\"5-importing-without-bindings\"><a href=\"#5-importing-without-bindings\" class=\"headerlink\" title=\"5. importing without bindings\"></a>5. importing without bindings</h5><p>Some modules may not export anthing; instead they might only modify object in the gloabal scope. <em>Import without bindings are most likely to be used to create polyfills and shims</em>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.js</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.somethingFancy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./example.js'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">arr.somethingFancy();</span><br></pre></td></tr></table></figure>\n<h4 id=\"loading-modules\"><a href=\"#loading-modules\" class=\"headerlink\" title=\"loading modules\"></a>loading modules</h4><h5 id=\"1-use-lt-script-gt-as-defer\"><a href=\"#1-use-lt-script-gt-as-defer\" class=\"headerlink\" title=\"1. use &lt;\bscript&gt; as defer\"></a>1. use &lt;\bscript&gt; as <code>defer</code></h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- load a module JavaScript file --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- include a module inline --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>‘module’ is not a content type like ‘text/javascript’, and browsers ignore <code>&lt;script&gt;</code> elements when type is unrecognized, providing good backwards-compatibility.</p>\n</li>\n<li><p>in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.</p>\n</li>\n<li><p>module sequence; <code>&lt;script type=&quot;module&quot;&gt;</code> always acts as if the <code>defer</code> attribute is applied.</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute second --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>synchronies and sequential: <strong>modules are parsed completely first to dientify all <code>import</code>, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.</strong></li>\n</ul>\n<p>i. download and parse <code>module1.js</code> , recursive download and parse import in <code>module1.js</code>;</p>\n<p>ii. parse inline module</p>\n<p>once loading complete</p>\n<p>iiii. recursive execute <code>import</code> source in <code>module1.js</code>, then execute <code>module1.js</code></p>\n<p>iiiii. recursive execute <code>import</code> source in inline module, then execute inline module</p>\n<h5 id=\"2-use-lt-script-gt-as-async\"><a href=\"#2-use-lt-script-gt-as-async\" class=\"headerlink\" title=\"2. use &lt;\bscript&gt; as async\"></a>2. use &lt;\bscript&gt; as <code>async</code></h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- no guarantee which one of these will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>the <code>async</code> causes the script file to be executed as soon as the file is completed downloaded and parsed. the order in document does not affect the order in which the scripts are executed. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.</p>\n<h5 id=\"3-use-Worker\"><a href=\"#3-use-Worker\" class=\"headerlink\" title=\"3. use Worker\"></a>3. use <code>Worker</code></h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load script.js as a script</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'script.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load module.js as a module</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'module.js'</span>, &#123; <span class=\"attr\">type</span>: <span class=\"string\">'module'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></p>\n</li>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules</a></p>\n</li>\n</ol>\n"},{"title":"我读 Effective JavaScript","abbrlink":"6fb9a62a","date":"2020-04-02T06:44:32.000Z","_content":"\n![Effective JavaScript](https://user-gold-cdn.xitu.io/2020/4/2/171392fedd81055b?w=270&h=354&f=jpeg&s=20991)\n\n\n我是17年6月买的这本书，当时在 HW 工作刚三个月。为了确定一下，我还专门去博客看我17年的年中总结，生活的苦楚又历历在目。我记得那时候开发很紧，从国内派人来湾区，导致我们美研也开始按国内的工作时间来。早上九点半到，二十分钟站会，每个人说昨天做了什么，今天打算做什么，开发联调进度，有没有阻碍。然后一干干到晚上十一点才下班回家。实在不知道是怎么熬过来的。我估摸是业务代码写的扛不住了，就想准备准备，一方面提升提升，再一方面年底拿了签证好跑路，所以就买了几本 JavaScript 的书。结果人算不如天算，事不如人意，书也没看完。\n\n上周刚好休年假，心想也不能天天在家打游戏，还是得搞搞学习，所以这才抽出来这本书开始看。我是从后往前翻的，因为对最后一章并发比较感兴趣。花了三天一口气看完，相见恨晚，后悔要是能早点读读就好了。看的过程中记起很多经历过的面试题目，想起没回答上来的尴尬时刻，有点羞愧和惋惜。\n\n接下来说说这本书。首先在2020年这个时间点，我觉得这本书不太适合初学者看，更适合有过一两年经验的朋友去学习。先不提那些已经过时的知识点，初学者因为没有见太多所谓的好的代码和坏的代码，很难深刻认识到书里提到的 Best Practice 存在的意义，没有比较就没有进步。对于有一些经验的朋友，书中的一些例子可能会让你想起某段自己写的笨比代码，然后去琢磨作者的良苦用心。\n\n回到书的内容，因为这本书出版于12年，距离ES5正式发行才刚刚过去三年，前端领域还有大量项目是跑在非严格环境。所以作者花了不少篇幅来介绍一些特性在strict 和 non strict 环境的区别，以及一些对于现今开发者来说不再是问题的问题。比如逗号插入，现在已经有了比较完善的 Lint 工具来解决这类问题。还有类似 with，eval，caller，callee 等概念，随着 ES 的逐步规范和框架的引入，现在开发中基本不再触碰这类知识了。又如第五章中实现的 Dict，现在已经有成为标准的 Set， Map等对象可供直接调用了。\n\n另一方面，阅读这边书可以帮助我们快速梳理一遍知识点。比如书中提到的prototype inheritance，IIFE，closure 保存私有变量，call apply 的使用场景，arguements 的使用，defineProperty 的使用等等，都是日常开发以及面试常问的问题。所以在面试之前，重点看下第三、四、五章，是个很不错的复习思路。我想起当年去 ebay 面试，第一面印度小姐姐出的第一题是写一个pub-sub，第二题就是自己实现一个Iterator，可以对一个数组调用 next 方法，直到最后没有了打印完成。现在看到书上的 Item 24 就是原题，实在可惜。\n\n书的第六、七章 ，Library 和 API 设计，以及并发，我觉得非常值得阅读，里面提供的一些接口设计规范和代码示例，在日常工作中使用的还是比较多的。就在前不久，大家在讨论中间层如何设计权限接口的问题，这也是当下 BFF 中比较火热的一个话题吧。看完这一章，我有了些新的想法。比如说对于公共接口，应该做好 defensive programming (Item 59)，对于特殊值，边界值，应该抛错让接入方知道。还有比如说提到 options object (Item 55)，大家肯定不会陌生这样的代码:\n\n```js\n// positional arguments \nfunction getAuth(a,b,c,d,e) {\n    // do something\n}\n```\n\n更可怕的是，随着业务的增长，形参的长度还在增加，以至于每次调用都心惊胆战，这是传到第几个参数了。上面这是一个极端情况，还有一种情况，就是提供的接口什么都不传，返回全部信息。甭管你要不要，一把全倒给你：\n\n```js\nfunction getAuth() {\n    return {\n        city: [],\n        region: [],\n        role: [],\n        // more and more fields\n    }\n}\n```\n\n这是另一个极端，图一时之省事。下次业务增长了，我们只需要往 payload 里无脑加数据就好了。一个接口服务公司，也不管别人需不需某个字段。\n\n看过书以后，我想只需再多走一步就可以优化这个接口。当入参为空时，我们返回所有数据，满足当前简单的业务需求。当接入方多了以后，用户只传他们关心的字段，我们就返回子集。这样的接口粒度更小，便于拓展，可以真正的作为提供方去满足业务方的需求:\n\n```js\nfunction getAuth() {\n  // return all\n}\n\nfunction getAuth({ city }) {\n    return {\n        city: []\n    }\n}\n\nfunction getAuth({ notInTheDoc }) {\n   // throw ArgumentsError\n}\n```\n\n这是我看书过程中的一点粗浅的思考。关于接口安全和接口设计，我了解的不够系统和深入，也是今年希望补习的一个领域。\n\n现在看来，作者不愧是 TC39 成员，书中提到的 Iterator，Promise 等概念均在后来的 JS 正式版本中标准化了，我甚至还有点期望能出第二版。此外，明显感到看英文的速度下降，没有原来顺溜。接下来还要多看英文材料，这项技能不能丢。\n\n最后，昨天得知司徒正美猝然离世，大家聊起都唏嘘不已。这两年加班不少，收益无多，身体也不如从前。有些感慨，人生短短数十年，抓紧时间做些开心的事，读些无用的书，爱些可爱的人，足矣。\n\n2020 年 4 月 1 日\n","source":"_posts/effective-javascript.md","raw":"---\ntitle: 我读 Effective JavaScript\ncategories:\n  - life\ntags:\n  - books\n  - reading\n  - javascript\nabbrlink: 6fb9a62a\ndate: 2020-04-01 23:44:32\n---\n\n![Effective JavaScript](https://user-gold-cdn.xitu.io/2020/4/2/171392fedd81055b?w=270&h=354&f=jpeg&s=20991)\n\n\n我是17年6月买的这本书，当时在 HW 工作刚三个月。为了确定一下，我还专门去博客看我17年的年中总结，生活的苦楚又历历在目。我记得那时候开发很紧，从国内派人来湾区，导致我们美研也开始按国内的工作时间来。早上九点半到，二十分钟站会，每个人说昨天做了什么，今天打算做什么，开发联调进度，有没有阻碍。然后一干干到晚上十一点才下班回家。实在不知道是怎么熬过来的。我估摸是业务代码写的扛不住了，就想准备准备，一方面提升提升，再一方面年底拿了签证好跑路，所以就买了几本 JavaScript 的书。结果人算不如天算，事不如人意，书也没看完。\n\n上周刚好休年假，心想也不能天天在家打游戏，还是得搞搞学习，所以这才抽出来这本书开始看。我是从后往前翻的，因为对最后一章并发比较感兴趣。花了三天一口气看完，相见恨晚，后悔要是能早点读读就好了。看的过程中记起很多经历过的面试题目，想起没回答上来的尴尬时刻，有点羞愧和惋惜。\n\n接下来说说这本书。首先在2020年这个时间点，我觉得这本书不太适合初学者看，更适合有过一两年经验的朋友去学习。先不提那些已经过时的知识点，初学者因为没有见太多所谓的好的代码和坏的代码，很难深刻认识到书里提到的 Best Practice 存在的意义，没有比较就没有进步。对于有一些经验的朋友，书中的一些例子可能会让你想起某段自己写的笨比代码，然后去琢磨作者的良苦用心。\n\n回到书的内容，因为这本书出版于12年，距离ES5正式发行才刚刚过去三年，前端领域还有大量项目是跑在非严格环境。所以作者花了不少篇幅来介绍一些特性在strict 和 non strict 环境的区别，以及一些对于现今开发者来说不再是问题的问题。比如逗号插入，现在已经有了比较完善的 Lint 工具来解决这类问题。还有类似 with，eval，caller，callee 等概念，随着 ES 的逐步规范和框架的引入，现在开发中基本不再触碰这类知识了。又如第五章中实现的 Dict，现在已经有成为标准的 Set， Map等对象可供直接调用了。\n\n另一方面，阅读这边书可以帮助我们快速梳理一遍知识点。比如书中提到的prototype inheritance，IIFE，closure 保存私有变量，call apply 的使用场景，arguements 的使用，defineProperty 的使用等等，都是日常开发以及面试常问的问题。所以在面试之前，重点看下第三、四、五章，是个很不错的复习思路。我想起当年去 ebay 面试，第一面印度小姐姐出的第一题是写一个pub-sub，第二题就是自己实现一个Iterator，可以对一个数组调用 next 方法，直到最后没有了打印完成。现在看到书上的 Item 24 就是原题，实在可惜。\n\n书的第六、七章 ，Library 和 API 设计，以及并发，我觉得非常值得阅读，里面提供的一些接口设计规范和代码示例，在日常工作中使用的还是比较多的。就在前不久，大家在讨论中间层如何设计权限接口的问题，这也是当下 BFF 中比较火热的一个话题吧。看完这一章，我有了些新的想法。比如说对于公共接口，应该做好 defensive programming (Item 59)，对于特殊值，边界值，应该抛错让接入方知道。还有比如说提到 options object (Item 55)，大家肯定不会陌生这样的代码:\n\n```js\n// positional arguments \nfunction getAuth(a,b,c,d,e) {\n    // do something\n}\n```\n\n更可怕的是，随着业务的增长，形参的长度还在增加，以至于每次调用都心惊胆战，这是传到第几个参数了。上面这是一个极端情况，还有一种情况，就是提供的接口什么都不传，返回全部信息。甭管你要不要，一把全倒给你：\n\n```js\nfunction getAuth() {\n    return {\n        city: [],\n        region: [],\n        role: [],\n        // more and more fields\n    }\n}\n```\n\n这是另一个极端，图一时之省事。下次业务增长了，我们只需要往 payload 里无脑加数据就好了。一个接口服务公司，也不管别人需不需某个字段。\n\n看过书以后，我想只需再多走一步就可以优化这个接口。当入参为空时，我们返回所有数据，满足当前简单的业务需求。当接入方多了以后，用户只传他们关心的字段，我们就返回子集。这样的接口粒度更小，便于拓展，可以真正的作为提供方去满足业务方的需求:\n\n```js\nfunction getAuth() {\n  // return all\n}\n\nfunction getAuth({ city }) {\n    return {\n        city: []\n    }\n}\n\nfunction getAuth({ notInTheDoc }) {\n   // throw ArgumentsError\n}\n```\n\n这是我看书过程中的一点粗浅的思考。关于接口安全和接口设计，我了解的不够系统和深入，也是今年希望补习的一个领域。\n\n现在看来，作者不愧是 TC39 成员，书中提到的 Iterator，Promise 等概念均在后来的 JS 正式版本中标准化了，我甚至还有点期望能出第二版。此外，明显感到看英文的速度下降，没有原来顺溜。接下来还要多看英文材料，这项技能不能丢。\n\n最后，昨天得知司徒正美猝然离世，大家聊起都唏嘘不已。这两年加班不少，收益无多，身体也不如从前。有些感慨，人生短短数十年，抓紧时间做些开心的事，读些无用的书，爱些可爱的人，足矣。\n\n2020 年 4 月 1 日\n","slug":"effective-javascript","published":1,"updated":"2020-04-02T04:53:51.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmmh000df5s6295mp7l4","content":"<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/2/171392fedd81055b?w=270&amp;h=354&amp;f=jpeg&amp;s=20991\" alt=\"Effective JavaScript\"></p>\n<p>我是17年6月买的这本书，当时在 HW 工作刚三个月。为了确定一下，我还专门去博客看我17年的年中总结，生活的苦楚又历历在目。我记得那时候开发很紧，从国内派人来湾区，导致我们美研也开始按国内的工作时间来。早上九点半到，二十分钟站会，每个人说昨天做了什么，今天打算做什么，开发联调进度，有没有阻碍。然后一干干到晚上十一点才下班回家。实在不知道是怎么熬过来的。我估摸是业务代码写的扛不住了，就想准备准备，一方面提升提升，再一方面年底拿了签证好跑路，所以就买了几本 JavaScript 的书。结果人算不如天算，事不如人意，书也没看完。</p>\n<p>上周刚好休年假，心想也不能天天在家打游戏，还是得搞搞学习，所以这才抽出来这本书开始看。我是从后往前翻的，因为对最后一章并发比较感兴趣。花了三天一口气看完，相见恨晚，后悔要是能早点读读就好了。看的过程中记起很多经历过的面试题目，想起没回答上来的尴尬时刻，有点羞愧和惋惜。</p>\n<p>接下来说说这本书。首先在2020年这个时间点，我觉得这本书不太适合初学者看，更适合有过一两年经验的朋友去学习。先不提那些已经过时的知识点，初学者因为没有见太多所谓的好的代码和坏的代码，很难深刻认识到书里提到的 Best Practice 存在的意义，没有比较就没有进步。对于有一些经验的朋友，书中的一些例子可能会让你想起某段自己写的笨比代码，然后去琢磨作者的良苦用心。</p>\n<p>回到书的内容，因为这本书出版于12年，距离ES5正式发行才刚刚过去三年，前端领域还有大量项目是跑在非严格环境。所以作者花了不少篇幅来介绍一些特性在strict 和 non strict 环境的区别，以及一些对于现今开发者来说不再是问题的问题。比如逗号插入，现在已经有了比较完善的 Lint 工具来解决这类问题。还有类似 with，eval，caller，callee 等概念，随着 ES 的逐步规范和框架的引入，现在开发中基本不再触碰这类知识了。又如第五章中实现的 Dict，现在已经有成为标准的 Set， Map等对象可供直接调用了。</p>\n<p>另一方面，阅读这边书可以帮助我们快速梳理一遍知识点。比如书中提到的prototype inheritance，IIFE，closure 保存私有变量，call apply 的使用场景，arguements 的使用，defineProperty 的使用等等，都是日常开发以及面试常问的问题。所以在面试之前，重点看下第三、四、五章，是个很不错的复习思路。我想起当年去 ebay 面试，第一面印度小姐姐出的第一题是写一个pub-sub，第二题就是自己实现一个Iterator，可以对一个数组调用 next 方法，直到最后没有了打印完成。现在看到书上的 Item 24 就是原题，实在可惜。</p>\n<p>书的第六、七章 ，Library 和 API 设计，以及并发，我觉得非常值得阅读，里面提供的一些接口设计规范和代码示例，在日常工作中使用的还是比较多的。就在前不久，大家在讨论中间层如何设计权限接口的问题，这也是当下 BFF 中比较火热的一个话题吧。看完这一章，我有了些新的想法。比如说对于公共接口，应该做好 defensive programming (Item 59)，对于特殊值，边界值，应该抛错让接入方知道。还有比如说提到 options object (Item 55)，大家肯定不会陌生这样的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// positional arguments </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\">a,b,c,d,e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更可怕的是，随着业务的增长，形参的长度还在增加，以至于每次调用都心惊胆战，这是传到第几个参数了。上面这是一个极端情况，还有一种情况，就是提供的接口什么都不传，返回全部信息。甭管你要不要，一把全倒给你：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        city: [],</span><br><span class=\"line\">        region: [],</span><br><span class=\"line\">        role: [],</span><br><span class=\"line\">        <span class=\"comment\">// more and more fields</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是另一个极端，图一时之省事。下次业务增长了，我们只需要往 payload 里无脑加数据就好了。一个接口服务公司，也不管别人需不需某个字段。</p>\n<p>看过书以后，我想只需再多走一步就可以优化这个接口。当入参为空时，我们返回所有数据，满足当前简单的业务需求。当接入方多了以后，用户只传他们关心的字段，我们就返回子集。这样的接口粒度更小，便于拓展，可以真正的作为提供方去满足业务方的需求:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// return all</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\">&#123; city &#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        city: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\">&#123; notInTheDoc &#125;</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// throw ArgumentsError</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是我看书过程中的一点粗浅的思考。关于接口安全和接口设计，我了解的不够系统和深入，也是今年希望补习的一个领域。</p>\n<p>现在看来，作者不愧是 TC39 成员，书中提到的 Iterator，Promise 等概念均在后来的 JS 正式版本中标准化了，我甚至还有点期望能出第二版。此外，明显感到看英文的速度下降，没有原来顺溜。接下来还要多看英文材料，这项技能不能丢。</p>\n<p>最后，昨天得知司徒正美猝然离世，大家聊起都唏嘘不已。这两年加班不少，收益无多，身体也不如从前。有些感慨，人生短短数十年，抓紧时间做些开心的事，读些无用的书，爱些可爱的人，足矣。</p>\n<p>2020 年 4 月 1 日</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://user-gold-cdn.xitu.io/2020/4/2/171392fedd81055b?w=270&amp;h=354&amp;f=jpeg&amp;s=20991\" alt=\"Effective JavaScript\"></p>\n<p>我是17年6月买的这本书，当时在 HW 工作刚三个月。为了确定一下，我还专门去博客看我17年的年中总结，生活的苦楚又历历在目。我记得那时候开发很紧，从国内派人来湾区，导致我们美研也开始按国内的工作时间来。早上九点半到，二十分钟站会，每个人说昨天做了什么，今天打算做什么，开发联调进度，有没有阻碍。然后一干干到晚上十一点才下班回家。实在不知道是怎么熬过来的。我估摸是业务代码写的扛不住了，就想准备准备，一方面提升提升，再一方面年底拿了签证好跑路，所以就买了几本 JavaScript 的书。结果人算不如天算，事不如人意，书也没看完。</p>\n<p>上周刚好休年假，心想也不能天天在家打游戏，还是得搞搞学习，所以这才抽出来这本书开始看。我是从后往前翻的，因为对最后一章并发比较感兴趣。花了三天一口气看完，相见恨晚，后悔要是能早点读读就好了。看的过程中记起很多经历过的面试题目，想起没回答上来的尴尬时刻，有点羞愧和惋惜。</p>\n<p>接下来说说这本书。首先在2020年这个时间点，我觉得这本书不太适合初学者看，更适合有过一两年经验的朋友去学习。先不提那些已经过时的知识点，初学者因为没有见太多所谓的好的代码和坏的代码，很难深刻认识到书里提到的 Best Practice 存在的意义，没有比较就没有进步。对于有一些经验的朋友，书中的一些例子可能会让你想起某段自己写的笨比代码，然后去琢磨作者的良苦用心。</p>\n<p>回到书的内容，因为这本书出版于12年，距离ES5正式发行才刚刚过去三年，前端领域还有大量项目是跑在非严格环境。所以作者花了不少篇幅来介绍一些特性在strict 和 non strict 环境的区别，以及一些对于现今开发者来说不再是问题的问题。比如逗号插入，现在已经有了比较完善的 Lint 工具来解决这类问题。还有类似 with，eval，caller，callee 等概念，随着 ES 的逐步规范和框架的引入，现在开发中基本不再触碰这类知识了。又如第五章中实现的 Dict，现在已经有成为标准的 Set， Map等对象可供直接调用了。</p>\n<p>另一方面，阅读这边书可以帮助我们快速梳理一遍知识点。比如书中提到的prototype inheritance，IIFE，closure 保存私有变量，call apply 的使用场景，arguements 的使用，defineProperty 的使用等等，都是日常开发以及面试常问的问题。所以在面试之前，重点看下第三、四、五章，是个很不错的复习思路。我想起当年去 ebay 面试，第一面印度小姐姐出的第一题是写一个pub-sub，第二题就是自己实现一个Iterator，可以对一个数组调用 next 方法，直到最后没有了打印完成。现在看到书上的 Item 24 就是原题，实在可惜。</p>\n<p>书的第六、七章 ，Library 和 API 设计，以及并发，我觉得非常值得阅读，里面提供的一些接口设计规范和代码示例，在日常工作中使用的还是比较多的。就在前不久，大家在讨论中间层如何设计权限接口的问题，这也是当下 BFF 中比较火热的一个话题吧。看完这一章，我有了些新的想法。比如说对于公共接口，应该做好 defensive programming (Item 59)，对于特殊值，边界值，应该抛错让接入方知道。还有比如说提到 options object (Item 55)，大家肯定不会陌生这样的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// positional arguments </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\">a,b,c,d,e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>更可怕的是，随着业务的增长，形参的长度还在增加，以至于每次调用都心惊胆战，这是传到第几个参数了。上面这是一个极端情况，还有一种情况，就是提供的接口什么都不传，返回全部信息。甭管你要不要，一把全倒给你：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        city: [],</span><br><span class=\"line\">        region: [],</span><br><span class=\"line\">        role: [],</span><br><span class=\"line\">        <span class=\"comment\">// more and more fields</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是另一个极端，图一时之省事。下次业务增长了，我们只需要往 payload 里无脑加数据就好了。一个接口服务公司，也不管别人需不需某个字段。</p>\n<p>看过书以后，我想只需再多走一步就可以优化这个接口。当入参为空时，我们返回所有数据，满足当前简单的业务需求。当接入方多了以后，用户只传他们关心的字段，我们就返回子集。这样的接口粒度更小，便于拓展，可以真正的作为提供方去满足业务方的需求:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// return all</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\">&#123; city &#125;</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        city: []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAuth</span>(<span class=\"params\">&#123; notInTheDoc &#125;</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// throw ArgumentsError</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是我看书过程中的一点粗浅的思考。关于接口安全和接口设计，我了解的不够系统和深入，也是今年希望补习的一个领域。</p>\n<p>现在看来，作者不愧是 TC39 成员，书中提到的 Iterator，Promise 等概念均在后来的 JS 正式版本中标准化了，我甚至还有点期望能出第二版。此外，明显感到看英文的速度下降，没有原来顺溜。接下来还要多看英文材料，这项技能不能丢。</p>\n<p>最后，昨天得知司徒正美猝然离世，大家聊起都唏嘘不已。这两年加班不少，收益无多，身体也不如从前。有些感慨，人生短短数十年，抓紧时间做些开心的事，读些无用的书，爱些可爱的人，足矣。</p>\n<p>2020 年 4 月 1 日</p>\n"},{"title":"搭建 Flutter 环境","abbrlink":"ec9f837c","date":"2020-01-17T06:09:18.000Z","_content":"今年计划学习的新技术栈一个是 vue.js，等 3.0版本发布以后准备尝试一下。 另一个就是flutter。今天看了一下官方文档，按照文档在本机上把环境跑起来了。这里先记录一下搭建环境的步骤，也算是学习过程的一个记录。\n\n这篇文章基本按照 https://flutter.dev/docs/get-started/install/macos 页面的指引一步步操作下来就可以在 mac 和 iphone 上运行 flutter demo 了。我把关键的命令和操作记录下来，过滤掉一些解释性的和暂时无关的文字，方便下次自己回顾，也可以当做一份汉化文档，方便初学者快速搭建环境排除掉一些其他的干扰。\n\n### Flutter SDK ###\n\n首先下载最新的 Flutter SDK，大约 1g 左右。下载完成之后，cd 到开发文件夹，执行 unzip 操作。\n\n```bash\n$ cd ~/development\n$ unzip ~/Downloads/flutter_macos_v1.12.13+hotfix.5-stable.zip\n```\n\n如果不想使用固定版本的话，可以直接使用 git 操作，从 github 拉取最新的 flutter 源码。\n\n```bash\n git clone https://github.com/flutter/flutter.git\n```\n\n之后将 `flutter` 操作添加到 path。\n\n```bash\n$ export PATH=\"$PATH:`pwd`/flutter/bin\"\n```\n\n这只是临时添加到当前的 terminal 窗口，如果需要永久添加，可以阅读官方文档。这里我不想跑题，暂时不做展开，以后再讲。\n\n### Run flutter doctor ###\n\n进行完这三步之后，我们就可以跑一下命令行来看 flutter 是否安装完成。\n\n```bash\n$ flutter doctor\n```\n\n稍等片刻之后，会有一份 Doctor summary。在我的电脑上，因为没有安装 Android toolchain 和 Android Studio，所以这两项之前显示的是×。除此之外， Flutter，Xcode，VS Code， Connected Device 都是√，表明Flutter 已经配置好了。\n\n### iOS setup ###\n\n接下来我们就可以来针对 ios 配置一下开发环境。\n\n首先安装最新版的 Xcode，如果不是最新版可以通过 mac app store 升级。\n\n安装好之后，需要配置一下 Xcode 的命令行工具。执行如下操作\n\n```bash\n$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n$ sudo xcodebuild -runFirstLaunch\n```\n\n最后需要确保同意 Xcode 证书。首次打开Xcode 或者在命令行执行一条语句都可以。\n\n```bash\n$ sudo xcodebuild -license\n```\n\n接下来我们在来配置 iOS 模拟器。\n\n### iOS Simulator ###\n\n命令行输入\n\n```bash\n$ open -a Simulator\n```\n\n该命令会默认打开最新的 iOS 机器，如果想换其他型号的 iphone 或者其他设备，可以从 Hardware > Device 下来选择你想要的机型。\n\n### Create and run a flutter app ###\n\n接下来我们创建一个官方的 demo 项目，并且把它跑起来。先保证 ios 模拟请还在运行，然后分别执行以下三条命令行。\n\n```bash\n$ flutter create my_app\n$ cd my_app\n$ flutter run\n```\n\n这时候我们就可以看到官方的 demo 跑起来了。\n\n### Deploy to iOS devices\n\n如果我们想在自己的 iOS 手机上运行 demo，可以通过 Xcode 来部署。\n\n首先安装 CocoaPods。\n\n```bash\n$ sudo gem install cocoapods\n$ pod setup\n```\n\n然后 cd 到 demo 的文件夹，执行\n\n```bash\n$ open ios/Runner.xcworkspace\n```\n\n打开之后，在 Xcode 左侧边栏选择 Runner项目。接下来我们来配置 Development Team。在 Runner 的配置页面，首先关注 Signing & Capabilities > Team。下来选择 Team，如果没有，可以使用自己的 Apple ID 创建一个 Personal Team， 不花钱，免费。创建完之后，我们需要修改一下 Bundle Identifier，这里的这个 identifier 需要保证)唯一性。\n\n\n这里我遇到一个问题，The app ID \"com.example.myapp\" cannot be registered to your development team. Change your bundle identifier to a unique string to try again.  详情可以参见 https://github.com/flutter/flutter/issues/19498 。 \n\n![github-issue](https://user-gold-cdn.xitu.io/2020/1/16/16faea496ad567c6?w=2526&h=1156&f=png&s=203465)\n\n我解决的方法就是修改自动生成的 Bundle Identifier，按上图的例子，修改 example 或者 myapp 都可以解决问题。\n\n最后可以通过flutter run 或者 点击 Xcode 上方的 build and run 按钮部署 demo app。\n\n部署完之后，还需最后一步，在手机上添加信任 settings > general > profiles & device management ，找到 developer  app 下的自己开发账号的 app，点击 trust。\n\n到此为止我们就完成了 flutter 开发环境的搭建，可以在电脑和自己的上运行 flutter 应用了。\n\n我们下次再会。\n","source":"_posts/flutter-setup.md","raw":"---\ntitle: 搭建 Flutter 环境\ncategories:\n  - web\ntags:\n  - Flutter\n  - setup\nabbrlink: ec9f837c\ndate: 2020-01-16 22:09:18\n---\n今年计划学习的新技术栈一个是 vue.js，等 3.0版本发布以后准备尝试一下。 另一个就是flutter。今天看了一下官方文档，按照文档在本机上把环境跑起来了。这里先记录一下搭建环境的步骤，也算是学习过程的一个记录。\n\n这篇文章基本按照 https://flutter.dev/docs/get-started/install/macos 页面的指引一步步操作下来就可以在 mac 和 iphone 上运行 flutter demo 了。我把关键的命令和操作记录下来，过滤掉一些解释性的和暂时无关的文字，方便下次自己回顾，也可以当做一份汉化文档，方便初学者快速搭建环境排除掉一些其他的干扰。\n\n### Flutter SDK ###\n\n首先下载最新的 Flutter SDK，大约 1g 左右。下载完成之后，cd 到开发文件夹，执行 unzip 操作。\n\n```bash\n$ cd ~/development\n$ unzip ~/Downloads/flutter_macos_v1.12.13+hotfix.5-stable.zip\n```\n\n如果不想使用固定版本的话，可以直接使用 git 操作，从 github 拉取最新的 flutter 源码。\n\n```bash\n git clone https://github.com/flutter/flutter.git\n```\n\n之后将 `flutter` 操作添加到 path。\n\n```bash\n$ export PATH=\"$PATH:`pwd`/flutter/bin\"\n```\n\n这只是临时添加到当前的 terminal 窗口，如果需要永久添加，可以阅读官方文档。这里我不想跑题，暂时不做展开，以后再讲。\n\n### Run flutter doctor ###\n\n进行完这三步之后，我们就可以跑一下命令行来看 flutter 是否安装完成。\n\n```bash\n$ flutter doctor\n```\n\n稍等片刻之后，会有一份 Doctor summary。在我的电脑上，因为没有安装 Android toolchain 和 Android Studio，所以这两项之前显示的是×。除此之外， Flutter，Xcode，VS Code， Connected Device 都是√，表明Flutter 已经配置好了。\n\n### iOS setup ###\n\n接下来我们就可以来针对 ios 配置一下开发环境。\n\n首先安装最新版的 Xcode，如果不是最新版可以通过 mac app store 升级。\n\n安装好之后，需要配置一下 Xcode 的命令行工具。执行如下操作\n\n```bash\n$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer\n$ sudo xcodebuild -runFirstLaunch\n```\n\n最后需要确保同意 Xcode 证书。首次打开Xcode 或者在命令行执行一条语句都可以。\n\n```bash\n$ sudo xcodebuild -license\n```\n\n接下来我们在来配置 iOS 模拟器。\n\n### iOS Simulator ###\n\n命令行输入\n\n```bash\n$ open -a Simulator\n```\n\n该命令会默认打开最新的 iOS 机器，如果想换其他型号的 iphone 或者其他设备，可以从 Hardware > Device 下来选择你想要的机型。\n\n### Create and run a flutter app ###\n\n接下来我们创建一个官方的 demo 项目，并且把它跑起来。先保证 ios 模拟请还在运行，然后分别执行以下三条命令行。\n\n```bash\n$ flutter create my_app\n$ cd my_app\n$ flutter run\n```\n\n这时候我们就可以看到官方的 demo 跑起来了。\n\n### Deploy to iOS devices\n\n如果我们想在自己的 iOS 手机上运行 demo，可以通过 Xcode 来部署。\n\n首先安装 CocoaPods。\n\n```bash\n$ sudo gem install cocoapods\n$ pod setup\n```\n\n然后 cd 到 demo 的文件夹，执行\n\n```bash\n$ open ios/Runner.xcworkspace\n```\n\n打开之后，在 Xcode 左侧边栏选择 Runner项目。接下来我们来配置 Development Team。在 Runner 的配置页面，首先关注 Signing & Capabilities > Team。下来选择 Team，如果没有，可以使用自己的 Apple ID 创建一个 Personal Team， 不花钱，免费。创建完之后，我们需要修改一下 Bundle Identifier，这里的这个 identifier 需要保证)唯一性。\n\n\n这里我遇到一个问题，The app ID \"com.example.myapp\" cannot be registered to your development team. Change your bundle identifier to a unique string to try again.  详情可以参见 https://github.com/flutter/flutter/issues/19498 。 \n\n![github-issue](https://user-gold-cdn.xitu.io/2020/1/16/16faea496ad567c6?w=2526&h=1156&f=png&s=203465)\n\n我解决的方法就是修改自动生成的 Bundle Identifier，按上图的例子，修改 example 或者 myapp 都可以解决问题。\n\n最后可以通过flutter run 或者 点击 Xcode 上方的 build and run 按钮部署 demo app。\n\n部署完之后，还需最后一步，在手机上添加信任 settings > general > profiles & device management ，找到 developer  app 下的自己开发账号的 app，点击 trust。\n\n到此为止我们就完成了 flutter 开发环境的搭建，可以在电脑和自己的上运行 flutter 应用了。\n\n我们下次再会。\n","slug":"flutter-setup","published":1,"updated":"2020-04-01T16:23:53.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmmi000ef5s6pqbe5h1d","content":"<p>今年计划学习的新技术栈一个是 vue.js，等 3.0版本发布以后准备尝试一下。 另一个就是flutter。今天看了一下官方文档，按照文档在本机上把环境跑起来了。这里先记录一下搭建环境的步骤，也算是学习过程的一个记录。</p>\n<p>这篇文章基本按照 <a href=\"https://flutter.dev/docs/get-started/install/macos\" target=\"_blank\" rel=\"noopener\">https://flutter.dev/docs/get-started/install/macos</a> 页面的指引一步步操作下来就可以在 mac 和 iphone 上运行 flutter demo 了。我把关键的命令和操作记录下来，过滤掉一些解释性的和暂时无关的文字，方便下次自己回顾，也可以当做一份汉化文档，方便初学者快速搭建环境排除掉一些其他的干扰。</p>\n<h3 id=\"Flutter-SDK\"><a href=\"#Flutter-SDK\" class=\"headerlink\" title=\"Flutter SDK\"></a>Flutter SDK</h3><p>首先下载最新的 Flutter SDK，大约 1g 左右。下载完成之后，cd 到开发文件夹，执行 unzip 操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/development</span><br><span class=\"line\">$ unzip ~/Downloads/flutter_macos_v1.12.13+hotfix.5-stable.zip</span><br></pre></td></tr></table></figure>\n<p>如果不想使用固定版本的话，可以直接使用 git 操作，从 github 拉取最新的 flutter 源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure>\n<p>之后将 <code>flutter</code> 操作添加到 path。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> PATH=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:`pwd`/flutter/bin\"</span></span><br></pre></td></tr></table></figure>\n<p>这只是临时添加到当前的 terminal 窗口，如果需要永久添加，可以阅读官方文档。这里我不想跑题，暂时不做展开，以后再讲。</p>\n<h3 id=\"Run-flutter-doctor\"><a href=\"#Run-flutter-doctor\" class=\"headerlink\" title=\"Run flutter doctor\"></a>Run flutter doctor</h3><p>进行完这三步之后，我们就可以跑一下命令行来看 flutter 是否安装完成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flutter doctor</span><br></pre></td></tr></table></figure>\n<p>稍等片刻之后，会有一份 Doctor summary。在我的电脑上，因为没有安装 Android toolchain 和 Android Studio，所以这两项之前显示的是×。除此之外， Flutter，Xcode，VS Code， Connected Device 都是√，表明Flutter 已经配置好了。</p>\n<h3 id=\"iOS-setup\"><a href=\"#iOS-setup\" class=\"headerlink\" title=\"iOS setup\"></a>iOS setup</h3><p>接下来我们就可以来针对 ios 配置一下开发环境。</p>\n<p>首先安装最新版的 Xcode，如果不是最新版可以通过 mac app store 升级。</p>\n<p>安装好之后，需要配置一下 Xcode 的命令行工具。执行如下操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br><span class=\"line\">$ sudo xcodebuild -runFirstLaunch</span><br></pre></td></tr></table></figure>\n<p>最后需要确保同意 Xcode 证书。首次打开Xcode 或者在命令行执行一条语句都可以。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo xcodebuild -license</span><br></pre></td></tr></table></figure>\n<p>接下来我们在来配置 iOS 模拟器。</p>\n<h3 id=\"iOS-Simulator\"><a href=\"#iOS-Simulator\" class=\"headerlink\" title=\"iOS Simulator\"></a>iOS Simulator</h3><p>命令行输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open -a Simulator</span><br></pre></td></tr></table></figure>\n<p>该命令会默认打开最新的 iOS 机器，如果想换其他型号的 iphone 或者其他设备，可以从 Hardware &gt; Device 下来选择你想要的机型。</p>\n<h3 id=\"Create-and-run-a-flutter-app\"><a href=\"#Create-and-run-a-flutter-app\" class=\"headerlink\" title=\"Create and run a flutter app\"></a>Create and run a flutter app</h3><p>接下来我们创建一个官方的 demo 项目，并且把它跑起来。先保证 ios 模拟请还在运行，然后分别执行以下三条命令行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flutter create my_app</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my_app</span><br><span class=\"line\">$ flutter run</span><br></pre></td></tr></table></figure>\n<p>这时候我们就可以看到官方的 demo 跑起来了。</p>\n<h3 id=\"Deploy-to-iOS-devices\"><a href=\"#Deploy-to-iOS-devices\" class=\"headerlink\" title=\"Deploy to iOS devices\"></a>Deploy to iOS devices</h3><p>如果我们想在自己的 iOS 手机上运行 demo，可以通过 Xcode 来部署。</p>\n<p>首先安装 CocoaPods。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure>\n<p>然后 cd 到 demo 的文件夹，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open ios/Runner.xcworkspace</span><br></pre></td></tr></table></figure>\n<p>打开之后，在 Xcode 左侧边栏选择 Runner项目。接下来我们来配置 Development Team。在 Runner 的配置页面，首先关注 Signing &amp; Capabilities &gt; Team。下来选择 Team，如果没有，可以使用自己的 Apple ID 创建一个 Personal Team， 不花钱，免费。创建完之后，我们需要修改一下 Bundle Identifier，这里的这个 identifier 需要保证)唯一性。</p>\n<p>这里我遇到一个问题，The app ID “com.example.myapp” cannot be registered to your development team. Change your bundle identifier to a unique string to try again.  详情可以参见 <a href=\"https://github.com/flutter/flutter/issues/19498\" target=\"_blank\" rel=\"noopener\">https://github.com/flutter/flutter/issues/19498</a> 。 </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/16/16faea496ad567c6?w=2526&amp;h=1156&amp;f=png&amp;s=203465\" alt=\"github-issue\"></p>\n<p>我解决的方法就是修改自动生成的 Bundle Identifier，按上图的例子，修改 example 或者 myapp 都可以解决问题。</p>\n<p>最后可以通过flutter run 或者 点击 Xcode 上方的 build and run 按钮部署 demo app。</p>\n<p>部署完之后，还需最后一步，在手机上添加信任 settings &gt; general &gt; profiles &amp; device management ，找到 developer  app 下的自己开发账号的 app，点击 trust。</p>\n<p>到此为止我们就完成了 flutter 开发环境的搭建，可以在电脑和自己的上运行 flutter 应用了。</p>\n<p>我们下次再会。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今年计划学习的新技术栈一个是 vue.js，等 3.0版本发布以后准备尝试一下。 另一个就是flutter。今天看了一下官方文档，按照文档在本机上把环境跑起来了。这里先记录一下搭建环境的步骤，也算是学习过程的一个记录。</p>\n<p>这篇文章基本按照 <a href=\"https://flutter.dev/docs/get-started/install/macos\" target=\"_blank\" rel=\"noopener\">https://flutter.dev/docs/get-started/install/macos</a> 页面的指引一步步操作下来就可以在 mac 和 iphone 上运行 flutter demo 了。我把关键的命令和操作记录下来，过滤掉一些解释性的和暂时无关的文字，方便下次自己回顾，也可以当做一份汉化文档，方便初学者快速搭建环境排除掉一些其他的干扰。</p>\n<h3 id=\"Flutter-SDK\"><a href=\"#Flutter-SDK\" class=\"headerlink\" title=\"Flutter SDK\"></a>Flutter SDK</h3><p>首先下载最新的 Flutter SDK，大约 1g 左右。下载完成之后，cd 到开发文件夹，执行 unzip 操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ~/development</span><br><span class=\"line\">$ unzip ~/Downloads/flutter_macos_v1.12.13+hotfix.5-stable.zip</span><br></pre></td></tr></table></figure>\n<p>如果不想使用固定版本的话，可以直接使用 git 操作，从 github 拉取最新的 flutter 源码。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure>\n<p>之后将 <code>flutter</code> 操作添加到 path。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">export</span> PATH=<span class=\"string\">\"<span class=\"variable\">$PATH</span>:`pwd`/flutter/bin\"</span></span><br></pre></td></tr></table></figure>\n<p>这只是临时添加到当前的 terminal 窗口，如果需要永久添加，可以阅读官方文档。这里我不想跑题，暂时不做展开，以后再讲。</p>\n<h3 id=\"Run-flutter-doctor\"><a href=\"#Run-flutter-doctor\" class=\"headerlink\" title=\"Run flutter doctor\"></a>Run flutter doctor</h3><p>进行完这三步之后，我们就可以跑一下命令行来看 flutter 是否安装完成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flutter doctor</span><br></pre></td></tr></table></figure>\n<p>稍等片刻之后，会有一份 Doctor summary。在我的电脑上，因为没有安装 Android toolchain 和 Android Studio，所以这两项之前显示的是×。除此之外， Flutter，Xcode，VS Code， Connected Device 都是√，表明Flutter 已经配置好了。</p>\n<h3 id=\"iOS-setup\"><a href=\"#iOS-setup\" class=\"headerlink\" title=\"iOS setup\"></a>iOS setup</h3><p>接下来我们就可以来针对 ios 配置一下开发环境。</p>\n<p>首先安装最新版的 Xcode，如果不是最新版可以通过 mac app store 升级。</p>\n<p>安装好之后，需要配置一下 Xcode 的命令行工具。执行如下操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br><span class=\"line\">$ sudo xcodebuild -runFirstLaunch</span><br></pre></td></tr></table></figure>\n<p>最后需要确保同意 Xcode 证书。首次打开Xcode 或者在命令行执行一条语句都可以。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo xcodebuild -license</span><br></pre></td></tr></table></figure>\n<p>接下来我们在来配置 iOS 模拟器。</p>\n<h3 id=\"iOS-Simulator\"><a href=\"#iOS-Simulator\" class=\"headerlink\" title=\"iOS Simulator\"></a>iOS Simulator</h3><p>命令行输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open -a Simulator</span><br></pre></td></tr></table></figure>\n<p>该命令会默认打开最新的 iOS 机器，如果想换其他型号的 iphone 或者其他设备，可以从 Hardware &gt; Device 下来选择你想要的机型。</p>\n<h3 id=\"Create-and-run-a-flutter-app\"><a href=\"#Create-and-run-a-flutter-app\" class=\"headerlink\" title=\"Create and run a flutter app\"></a>Create and run a flutter app</h3><p>接下来我们创建一个官方的 demo 项目，并且把它跑起来。先保证 ios 模拟请还在运行，然后分别执行以下三条命令行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ flutter create my_app</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> my_app</span><br><span class=\"line\">$ flutter run</span><br></pre></td></tr></table></figure>\n<p>这时候我们就可以看到官方的 demo 跑起来了。</p>\n<h3 id=\"Deploy-to-iOS-devices\"><a href=\"#Deploy-to-iOS-devices\" class=\"headerlink\" title=\"Deploy to iOS devices\"></a>Deploy to iOS devices</h3><p>如果我们想在自己的 iOS 手机上运行 demo，可以通过 Xcode 来部署。</p>\n<p>首先安装 CocoaPods。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo gem install cocoapods</span><br><span class=\"line\">$ pod setup</span><br></pre></td></tr></table></figure>\n<p>然后 cd 到 demo 的文件夹，执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ open ios/Runner.xcworkspace</span><br></pre></td></tr></table></figure>\n<p>打开之后，在 Xcode 左侧边栏选择 Runner项目。接下来我们来配置 Development Team。在 Runner 的配置页面，首先关注 Signing &amp; Capabilities &gt; Team。下来选择 Team，如果没有，可以使用自己的 Apple ID 创建一个 Personal Team， 不花钱，免费。创建完之后，我们需要修改一下 Bundle Identifier，这里的这个 identifier 需要保证)唯一性。</p>\n<p>这里我遇到一个问题，The app ID “com.example.myapp” cannot be registered to your development team. Change your bundle identifier to a unique string to try again.  详情可以参见 <a href=\"https://github.com/flutter/flutter/issues/19498\" target=\"_blank\" rel=\"noopener\">https://github.com/flutter/flutter/issues/19498</a> 。 </p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2020/1/16/16faea496ad567c6?w=2526&amp;h=1156&amp;f=png&amp;s=203465\" alt=\"github-issue\"></p>\n<p>我解决的方法就是修改自动生成的 Bundle Identifier，按上图的例子，修改 example 或者 myapp 都可以解决问题。</p>\n<p>最后可以通过flutter run 或者 点击 Xcode 上方的 build and run 按钮部署 demo app。</p>\n<p>部署完之后，还需最后一步，在手机上添加信任 settings &gt; general &gt; profiles &amp; device management ，找到 developer  app 下的自己开发账号的 app，点击 trust。</p>\n<p>到此为止我们就完成了 flutter 开发环境的搭建，可以在电脑和自己的上运行 flutter 应用了。</p>\n<p>我们下次再会。</p>\n"},{"title":"华为面试","abbrlink":"f822c036","date":"2017-01-23T23:53:12.000Z","_content":"\n上周过的有点胆战心惊。\n\n周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。\n\n总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k 的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。\n\n其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。\n\n最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。\n","source":"_posts/interview-with-huawei.md","raw":"---\ntitle: 华为面试\ncategories:\n  - life\nabbrlink: f822c036\ndate: 2017-01-23 15:53:12\ntags:\n---\n\n上周过的有点胆战心惊。\n\n周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。\n\n总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k 的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。\n\n其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。\n\n最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。\n","slug":"interview-with-huawei","published":1,"updated":"2019-11-26T03:25:38.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmmj000ff5s600ocz47n","content":"<p>上周过的有点胆战心惊。</p>\n<p>周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。</p>\n<p>总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k 的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。</p>\n<p>其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。</p>\n<p>最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上周过的有点胆战心惊。</p>\n<p>周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。</p>\n<p>总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k 的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。</p>\n<p>其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。</p>\n<p>最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。</p>\n"},{"title":"JavaScript Events","abbrlink":"96058034","date":"2018-04-15T23:47:42.000Z","_content":"\n#### Register\n\n```js\nmyElement.onclick = functionA;\nmyElement.onclick = functionB;\n```\n\nsecond row will overwrite first row\n\n```js\nmyElement.addEventListener('click', functionA);\nmyElement.addEventListener('click', functionB);\n```\n\nboth would run\n\nwhich should use\n\n- inline event handlers `<button onclick=\"bgChange()\">Press me</button>` （don't use）\n- Event handler properties; element.onclick; better cross-browser compatibility (IE8)\n- DOM Level 2 Events; element.addEventListener('click', functionA); (IE9, can register multiple events，can be removed)\n\n#### event objects\n\ne/evt/event\n\nevent.target\n\n#### Preventing default behavior\n\ne.preventDefault();\n\n#### Event bubbling\n\nEvent bubbling and capture are two mechanisms that describe what happens when two handlers\nof the same event type are activated on one element.\n\nIn the capturing phase:\n\nThe browser checks to see if the element's outer-most ancestor (`<html>`) has an onclick event handler registered on it in the capturing phase, and runs it if so.\nThen it moves on to the next element inside `<html>` and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.\n\nIn the bubbling phase, the exact opposite occurs:\n\nThe browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.\nThen it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the `<html>` element.\n\nEvent handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.\n\n```js\nelement1.addEventListener('click', doSomething2, true); // fire at capture phase\nelement2.addEventListener('click', doSomething, false);\n```\n\n#### Event delegation\n\nif you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.\n\n```html\n<ul id=\"parent-list\">\n  <li id=\"post-1\">Item 1</li>\n  <li id=\"post-2\">Item 2</li>\n  <li id=\"post-3\">Item 3</li>\n  <li id=\"post-4\">Item 4</li>\n  <li id=\"post-5\">Item 5</li>\n  <li id=\"post-6\" class=\"endangered\">Item 6</li>\n</ul>\n```\n\n```js\n// Get the element, add a click listener...\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  // e.target is the clicked element!\n  // If it was a list item\n  if (e.target && e.target.nodeName == 'LI') {\n    // List item found!  Output the ID!\n    console.log(\n      'List item ',\n      e.target.id.replace('post-', ''),\n      ' was clicked!',\n    );\n  }\n});\n\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  if (e.target && e.target.matches('li.endangered')) {\n    // List item found!  Output the ID!\n    console.log('The ' + e.target.textContent + ' is endangered!');\n  }\n});\n```\n\n#### related reading\n\nmdn <https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture>\n\nevent order <https://www.quirksmode.org/js/events_order.html>\n\nevent delegate <https://davidwalsh.name/event-delegate>\n\nEvent delegation <https://javascript.info/event-delegation>\n","source":"_posts/javascript-events.md","raw":"---\ntitle: JavaScript Events\ncategories:\n  - web\ntags:\n  - window\n  - events\n  - capture/bubbling\n  - delegate\n  - javascript\nabbrlink: '96058034'\ndate: 2018-04-15 16:47:42\n---\n\n#### Register\n\n```js\nmyElement.onclick = functionA;\nmyElement.onclick = functionB;\n```\n\nsecond row will overwrite first row\n\n```js\nmyElement.addEventListener('click', functionA);\nmyElement.addEventListener('click', functionB);\n```\n\nboth would run\n\nwhich should use\n\n- inline event handlers `<button onclick=\"bgChange()\">Press me</button>` （don't use）\n- Event handler properties; element.onclick; better cross-browser compatibility (IE8)\n- DOM Level 2 Events; element.addEventListener('click', functionA); (IE9, can register multiple events，can be removed)\n\n#### event objects\n\ne/evt/event\n\nevent.target\n\n#### Preventing default behavior\n\ne.preventDefault();\n\n#### Event bubbling\n\nEvent bubbling and capture are two mechanisms that describe what happens when two handlers\nof the same event type are activated on one element.\n\nIn the capturing phase:\n\nThe browser checks to see if the element's outer-most ancestor (`<html>`) has an onclick event handler registered on it in the capturing phase, and runs it if so.\nThen it moves on to the next element inside `<html>` and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.\n\nIn the bubbling phase, the exact opposite occurs:\n\nThe browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.\nThen it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the `<html>` element.\n\nEvent handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.\n\n```js\nelement1.addEventListener('click', doSomething2, true); // fire at capture phase\nelement2.addEventListener('click', doSomething, false);\n```\n\n#### Event delegation\n\nif you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.\n\n```html\n<ul id=\"parent-list\">\n  <li id=\"post-1\">Item 1</li>\n  <li id=\"post-2\">Item 2</li>\n  <li id=\"post-3\">Item 3</li>\n  <li id=\"post-4\">Item 4</li>\n  <li id=\"post-5\">Item 5</li>\n  <li id=\"post-6\" class=\"endangered\">Item 6</li>\n</ul>\n```\n\n```js\n// Get the element, add a click listener...\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  // e.target is the clicked element!\n  // If it was a list item\n  if (e.target && e.target.nodeName == 'LI') {\n    // List item found!  Output the ID!\n    console.log(\n      'List item ',\n      e.target.id.replace('post-', ''),\n      ' was clicked!',\n    );\n  }\n});\n\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  if (e.target && e.target.matches('li.endangered')) {\n    // List item found!  Output the ID!\n    console.log('The ' + e.target.textContent + ' is endangered!');\n  }\n});\n```\n\n#### related reading\n\nmdn <https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture>\n\nevent order <https://www.quirksmode.org/js/events_order.html>\n\nevent delegate <https://davidwalsh.name/event-delegate>\n\nEvent delegation <https://javascript.info/event-delegation>\n","slug":"javascript-events","published":1,"updated":"2019-11-15T09:39:12.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmmk000gf5s6hg210h1v","content":"<h4 id=\"Register\"><a href=\"#Register\" class=\"headerlink\" title=\"Register\"></a>Register</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.onclick = functionA;</span><br><span class=\"line\">myElement.onclick = functionB;</span><br></pre></td></tr></table></figure>\n<p>second row will overwrite first row</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionA);</span><br><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionB);</span><br></pre></td></tr></table></figure>\n<p>both would run</p>\n<p>which should use</p>\n<ul>\n<li>inline event handlers <code>&lt;button onclick=&quot;bgChange()&quot;&gt;Press me&lt;/button&gt;</code> （don’t use）</li>\n<li>Event handler properties; element.onclick; better cross-browser compatibility (IE8)</li>\n<li>DOM Level 2 Events; element.addEventListener(‘click’, functionA); (IE9, can register multiple events，can be removed)</li>\n</ul>\n<h4 id=\"event-objects\"><a href=\"#event-objects\" class=\"headerlink\" title=\"event objects\"></a>event objects</h4><p>e/evt/event</p>\n<p>event.target</p>\n<h4 id=\"Preventing-default-behavior\"><a href=\"#Preventing-default-behavior\" class=\"headerlink\" title=\"Preventing default behavior\"></a>Preventing default behavior</h4><p>e.preventDefault();</p>\n<h4 id=\"Event-bubbling\"><a href=\"#Event-bubbling\" class=\"headerlink\" title=\"Event bubbling\"></a>Event bubbling</h4><p>Event bubbling and capture are two mechanisms that describe what happens when two handlers<br>of the same event type are activated on one element.</p>\n<p>In the capturing phase:</p>\n<p>The browser checks to see if the element’s outer-most ancestor (<code>&lt;html&gt;</code>) has an onclick event handler registered on it in the capturing phase, and runs it if so.<br>Then it moves on to the next element inside <code>&lt;html&gt;</code> and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.</p>\n<p>In the bubbling phase, the exact opposite occurs:</p>\n<p>The browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.<br>Then it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the <code>&lt;html&gt;</code> element.</p>\n<p>Event handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element1.addEventListener(<span class=\"string\">'click'</span>, doSomething2, <span class=\"literal\">true</span>); <span class=\"comment\">// fire at capture phase</span></span><br><span class=\"line\">element2.addEventListener(<span class=\"string\">'click'</span>, doSomething, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Event-delegation\"><a href=\"#Event-delegation\" class=\"headerlink\" title=\"Event delegation\"></a>Event delegation</h4><p>if you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-1\"</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-2\"</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-3\"</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-4\"</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-5\"</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-6\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"endangered\"</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the element, add a click listener...</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// e.target is the clicked element!</span></span><br><span class=\"line\">  <span class=\"comment\">// If it was a list item</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.nodeName == <span class=\"string\">'LI'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">      <span class=\"string\">'List item '</span>,</span><br><span class=\"line\">      e.target.id.replace(<span class=\"string\">'post-'</span>, <span class=\"string\">''</span>),</span><br><span class=\"line\">      <span class=\"string\">' was clicked!'</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.matches(<span class=\"string\">'li.endangered'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The '</span> + e.target.textContent + <span class=\"string\">' is endangered!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"related-reading\"><a href=\"#related-reading\" class=\"headerlink\" title=\"related reading\"></a>related reading</h4><p>mdn <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture</a></p>\n<p>event order <a href=\"https://www.quirksmode.org/js/events_order.html\" target=\"_blank\" rel=\"noopener\">https://www.quirksmode.org/js/events_order.html</a></p>\n<p>event delegate <a href=\"https://davidwalsh.name/event-delegate\" target=\"_blank\" rel=\"noopener\">https://davidwalsh.name/event-delegate</a></p>\n<p>Event delegation <a href=\"https://javascript.info/event-delegation\" target=\"_blank\" rel=\"noopener\">https://javascript.info/event-delegation</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Register\"><a href=\"#Register\" class=\"headerlink\" title=\"Register\"></a>Register</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.onclick = functionA;</span><br><span class=\"line\">myElement.onclick = functionB;</span><br></pre></td></tr></table></figure>\n<p>second row will overwrite first row</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionA);</span><br><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionB);</span><br></pre></td></tr></table></figure>\n<p>both would run</p>\n<p>which should use</p>\n<ul>\n<li>inline event handlers <code>&lt;button onclick=&quot;bgChange()&quot;&gt;Press me&lt;/button&gt;</code> （don’t use）</li>\n<li>Event handler properties; element.onclick; better cross-browser compatibility (IE8)</li>\n<li>DOM Level 2 Events; element.addEventListener(‘click’, functionA); (IE9, can register multiple events，can be removed)</li>\n</ul>\n<h4 id=\"event-objects\"><a href=\"#event-objects\" class=\"headerlink\" title=\"event objects\"></a>event objects</h4><p>e/evt/event</p>\n<p>event.target</p>\n<h4 id=\"Preventing-default-behavior\"><a href=\"#Preventing-default-behavior\" class=\"headerlink\" title=\"Preventing default behavior\"></a>Preventing default behavior</h4><p>e.preventDefault();</p>\n<h4 id=\"Event-bubbling\"><a href=\"#Event-bubbling\" class=\"headerlink\" title=\"Event bubbling\"></a>Event bubbling</h4><p>Event bubbling and capture are two mechanisms that describe what happens when two handlers<br>of the same event type are activated on one element.</p>\n<p>In the capturing phase:</p>\n<p>The browser checks to see if the element’s outer-most ancestor (<code>&lt;html&gt;</code>) has an onclick event handler registered on it in the capturing phase, and runs it if so.<br>Then it moves on to the next element inside <code>&lt;html&gt;</code> and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.</p>\n<p>In the bubbling phase, the exact opposite occurs:</p>\n<p>The browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.<br>Then it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the <code>&lt;html&gt;</code> element.</p>\n<p>Event handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element1.addEventListener(<span class=\"string\">'click'</span>, doSomething2, <span class=\"literal\">true</span>); <span class=\"comment\">// fire at capture phase</span></span><br><span class=\"line\">element2.addEventListener(<span class=\"string\">'click'</span>, doSomething, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Event-delegation\"><a href=\"#Event-delegation\" class=\"headerlink\" title=\"Event delegation\"></a>Event delegation</h4><p>if you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-1\"</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-2\"</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-3\"</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-4\"</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-5\"</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-6\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"endangered\"</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the element, add a click listener...</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// e.target is the clicked element!</span></span><br><span class=\"line\">  <span class=\"comment\">// If it was a list item</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.nodeName == <span class=\"string\">'LI'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">      <span class=\"string\">'List item '</span>,</span><br><span class=\"line\">      e.target.id.replace(<span class=\"string\">'post-'</span>, <span class=\"string\">''</span>),</span><br><span class=\"line\">      <span class=\"string\">' was clicked!'</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.matches(<span class=\"string\">'li.endangered'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The '</span> + e.target.textContent + <span class=\"string\">' is endangered!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"related-reading\"><a href=\"#related-reading\" class=\"headerlink\" title=\"related reading\"></a>related reading</h4><p>mdn <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture</a></p>\n<p>event order <a href=\"https://www.quirksmode.org/js/events_order.html\" target=\"_blank\" rel=\"noopener\">https://www.quirksmode.org/js/events_order.html</a></p>\n<p>event delegate <a href=\"https://davidwalsh.name/event-delegate\" target=\"_blank\" rel=\"noopener\">https://davidwalsh.name/event-delegate</a></p>\n<p>Event delegation <a href=\"https://javascript.info/event-delegation\" target=\"_blank\" rel=\"noopener\">https://javascript.info/event-delegation</a></p>\n"},{"title":"三月总结","abbrlink":"3cf64c81","date":"2018-04-02T16:24:38.000Z","_content":"\n时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。\n\n今天看 medium，发现关于成功有个观点写的特别好。It's not a  goal, it's a lifestyle. It's not something they do sometimes. It's something they do all the time -- because it's part of who they are.\n\n反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。\n\n之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。\n\n所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.\n\nAnyway, 首先思想得转变过来，再来谈如何训练自己的习惯。\n\n四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。\n\n第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。\n\n最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。\n\n就先这样。\n","source":"_posts/march-summary.md","raw":"---\ntitle: 三月总结\ncategories:\n  - life\nabbrlink: 3cf64c81\ndate: 2018-04-02 09:24:38\ntags:\n---\n\n时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。\n\n今天看 medium，发现关于成功有个观点写的特别好。It's not a  goal, it's a lifestyle. It's not something they do sometimes. It's something they do all the time -- because it's part of who they are.\n\n反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。\n\n之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。\n\n所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.\n\nAnyway, 首先思想得转变过来，再来谈如何训练自己的习惯。\n\n四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。\n\n第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。\n\n最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。\n\n就先这样。\n","slug":"march-summary","published":1,"updated":"2019-11-26T03:25:25.508Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmml000hf5s64jnq0jw1","content":"<p>时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。</p>\n<p>今天看 medium，发现关于成功有个观点写的特别好。It’s not a  goal, it’s a lifestyle. It’s not something they do sometimes. It’s something they do all the time – because it’s part of who they are.</p>\n<p>反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。</p>\n<p>之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。</p>\n<p>所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.</p>\n<p>Anyway, 首先思想得转变过来，再来谈如何训练自己的习惯。</p>\n<p>四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。</p>\n<p>第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。</p>\n<p>最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。</p>\n<p>就先这样。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。</p>\n<p>今天看 medium，发现关于成功有个观点写的特别好。It’s not a  goal, it’s a lifestyle. It’s not something they do sometimes. It’s something they do all the time – because it’s part of who they are.</p>\n<p>反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。</p>\n<p>之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。</p>\n<p>所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.</p>\n<p>Anyway, 首先思想得转变过来，再来谈如何训练自己的习惯。</p>\n<p>四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。</p>\n<p>第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。</p>\n<p>最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。</p>\n<p>就先这样。</p>\n"},{"title":"JavaScript LeetCode Day 1","abbrlink":"f2317bbd","date":"2020-04-07T02:49:38.000Z","_content":"\n从今天开始，打算刷一下 LeetCode，复习一下算法和数据结构的基础知识。最近写业务较多，感觉需要换换脑子。再者毕竟今年行情不好，有备无患。\n\n节奏是打算每天刷3道 medium 难度，基本按照提交的通过率从高往低的来，或者是非常经典的题目。这样一开始刷的应该是相对来说比较容易的，可以循序渐进。计划是每个标签刷10道，这样下来一个月可以刷8个标签，可以把常见的数据结构都过一遍。\n\n这里记录的是刷的过程中的一些心得，和大概的思路。具体的代码我也每日更新到我的 [GitHub](https://github.com/zhengminhui/leetcode-javascript) 仓库。\n\n#### 15. 3Sum\n\n先 sort array, logn；然后从左边 i 开始，可以拿到 diff = 0 - num[i], 数组剩下的，就是2sum，任意两个数加和为diff。使用双指针 j, k 一头一尾开始遍历。有一个corner case 是 [0,0,0,0]， 去重是关键，方法是判断，nums[i] 不等于前一个数 nums[i-1]。\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function (nums) {\n  const res = [];\n  const len = nums.length;\n  const target = 0;\n  nums = nums.sort((a, b) => a - b);\n\n  for (let i = 0; i < len - 2; i++) {\n    if (i === 0 || (i > 0 && nums[i] !== nums[i - 1])) {\n      let j = i + 1;\n      let k = len - 1;\n\n      while (j < k) {\n        const sum = nums[i] + nums[j] + nums[k];\n        if (sum === target) {\n          res.push([nums[i], nums[j], nums[k]]);\n          // 判断毗邻两数字是否想等，相等的话继续滑动, 避免添加重复的答案\n          while (j < k && nums[j] === nums[j + 1]) {\n            j += 1;\n          }\n          while (j < k && nums[k] === nums[k - 1]) {\n            k -= 1;\n          }\n          j += 1;\n          k -= 1;\n        }\n        if (sum < target) {\n          while (j < k && nums[j] === nums[j + 1]) {\n            j += 1;\n          }\n          j += 1;\n        } else if (sum > target) {\n          while (j < k && nums[k] === nums[k - 1]) {\n            k -= 1;\n          }\n          k -= 1;\n        }\n      }\n    }\n  }\n  return res;\n};\n\nthreeSum([1, -1, -1, 0]);\nthreeSum([0, 0, 0, 0]);\n// threeSum([-1, 0, 1, 2, -1, -4])\n\n```\n\n\n\n#### 1329. Sort the Matrix Diagonally\n\n一开始题目理解错了，想的方法是先vertical对每个子数组排序，再横排。仔细看了例子，原来是只排对角线的。解题思路是把对角线存在新数组里，排序之后塞回去。关键点是对角线上，i-j 值恒定。i、j是遍历2维数组时的index。在通过 forEach 遍历 map，最后放回mat。 space O(mn) time O(mnlogd) d is the length of diagnoal with D = min(m,n)\n\n```js\n/**\n * @param {number[][]} mat\n * @return {number[][]}\n */\nvar diagonalSort = function (mat) {\n  const map = new Map();\n  const m = mat.length;\n  const n = mat[0].length;\n  // 准备 map\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      const curr = mat[i][j];\n      // 在对角线上，i-j 的差值恒定,\n      if (map.has(i - j)) {\n        const arr = map.get(i - j);\n        arr.push(curr);\n        map.set(i - j, arr);\n      } else {\n        map.set(i - j, [curr]);\n      }\n    }\n  }\n  // sort map\n  map.forEach((arr) => arr.sort((a, b) => a - b));\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      mat[i][j] = map.get(i - j).shift();\n    }\n  }\n  return mat;\n};\n\n```\n\n\n\n#### 1395. Count Number of Teams\n\n刷完3sum之后碰到这题，感觉是类似的。3sum是要求三者之和等于0（变种可以是任何值），这里的判断条件是3个值满足升序或降序。后来发现不行。解题思路是dp，生成两个数组，记录每个index处，后面还有多少个比它大，比他小的数量。再次遍历时，加和。\n\n```js\n/**\n * @param {number[]} rating\n * @return {number}\n */\nvar numTeams = function (rating) {\n  if (rating.length < 3) return 0;\n\n  let res = 0;\n  const len = rating.length;\n  const greaterThan = new Array(len).fill(0);\n  const lessThan = new Array(len).fill(0);\n\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (rating[i] < rating[j]) {\n        greaterThan[i] += 1;\n      } else {\n        lessThan[i] += 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < len - 2; i++) {\n    for (let j = i + 1; j < len; j++) {\n      // 判断是升序，则看 j 后面还有多少个比 j 更大的\n      if (rating[i] < rating[j]) {\n        res += greaterThan[j];\n      } else if (rating[i] > rating[j]) {\n        // 判断是降序，则看后面有多少比 j 更小的\n        res += lessThan[j];\n      }\n    }\n  }\n  return res;\n};\n\n// numTeams([2,5,3,4,1])\nnumTeams([4, 7, 9, 5, 10, 8, 2, 1, 6]);\n\n```\n","source":"_posts/javaScript-leetCode-day-1.md","raw":"---\ntitle: JavaScript LeetCode Day 1\ncategories:\n  - algorithm\ntags:\n  - javascript\n  - leetcode\n  - algorithm\nabbrlink: f2317bbd\ndate: 2020-04-06 19:49:38\n---\n\n从今天开始，打算刷一下 LeetCode，复习一下算法和数据结构的基础知识。最近写业务较多，感觉需要换换脑子。再者毕竟今年行情不好，有备无患。\n\n节奏是打算每天刷3道 medium 难度，基本按照提交的通过率从高往低的来，或者是非常经典的题目。这样一开始刷的应该是相对来说比较容易的，可以循序渐进。计划是每个标签刷10道，这样下来一个月可以刷8个标签，可以把常见的数据结构都过一遍。\n\n这里记录的是刷的过程中的一些心得，和大概的思路。具体的代码我也每日更新到我的 [GitHub](https://github.com/zhengminhui/leetcode-javascript) 仓库。\n\n#### 15. 3Sum\n\n先 sort array, logn；然后从左边 i 开始，可以拿到 diff = 0 - num[i], 数组剩下的，就是2sum，任意两个数加和为diff。使用双指针 j, k 一头一尾开始遍历。有一个corner case 是 [0,0,0,0]， 去重是关键，方法是判断，nums[i] 不等于前一个数 nums[i-1]。\n\n```js\n/**\n * @param {number[]} nums\n * @return {number[][]}\n */\nvar threeSum = function (nums) {\n  const res = [];\n  const len = nums.length;\n  const target = 0;\n  nums = nums.sort((a, b) => a - b);\n\n  for (let i = 0; i < len - 2; i++) {\n    if (i === 0 || (i > 0 && nums[i] !== nums[i - 1])) {\n      let j = i + 1;\n      let k = len - 1;\n\n      while (j < k) {\n        const sum = nums[i] + nums[j] + nums[k];\n        if (sum === target) {\n          res.push([nums[i], nums[j], nums[k]]);\n          // 判断毗邻两数字是否想等，相等的话继续滑动, 避免添加重复的答案\n          while (j < k && nums[j] === nums[j + 1]) {\n            j += 1;\n          }\n          while (j < k && nums[k] === nums[k - 1]) {\n            k -= 1;\n          }\n          j += 1;\n          k -= 1;\n        }\n        if (sum < target) {\n          while (j < k && nums[j] === nums[j + 1]) {\n            j += 1;\n          }\n          j += 1;\n        } else if (sum > target) {\n          while (j < k && nums[k] === nums[k - 1]) {\n            k -= 1;\n          }\n          k -= 1;\n        }\n      }\n    }\n  }\n  return res;\n};\n\nthreeSum([1, -1, -1, 0]);\nthreeSum([0, 0, 0, 0]);\n// threeSum([-1, 0, 1, 2, -1, -4])\n\n```\n\n\n\n#### 1329. Sort the Matrix Diagonally\n\n一开始题目理解错了，想的方法是先vertical对每个子数组排序，再横排。仔细看了例子，原来是只排对角线的。解题思路是把对角线存在新数组里，排序之后塞回去。关键点是对角线上，i-j 值恒定。i、j是遍历2维数组时的index。在通过 forEach 遍历 map，最后放回mat。 space O(mn) time O(mnlogd) d is the length of diagnoal with D = min(m,n)\n\n```js\n/**\n * @param {number[][]} mat\n * @return {number[][]}\n */\nvar diagonalSort = function (mat) {\n  const map = new Map();\n  const m = mat.length;\n  const n = mat[0].length;\n  // 准备 map\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      const curr = mat[i][j];\n      // 在对角线上，i-j 的差值恒定,\n      if (map.has(i - j)) {\n        const arr = map.get(i - j);\n        arr.push(curr);\n        map.set(i - j, arr);\n      } else {\n        map.set(i - j, [curr]);\n      }\n    }\n  }\n  // sort map\n  map.forEach((arr) => arr.sort((a, b) => a - b));\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      mat[i][j] = map.get(i - j).shift();\n    }\n  }\n  return mat;\n};\n\n```\n\n\n\n#### 1395. Count Number of Teams\n\n刷完3sum之后碰到这题，感觉是类似的。3sum是要求三者之和等于0（变种可以是任何值），这里的判断条件是3个值满足升序或降序。后来发现不行。解题思路是dp，生成两个数组，记录每个index处，后面还有多少个比它大，比他小的数量。再次遍历时，加和。\n\n```js\n/**\n * @param {number[]} rating\n * @return {number}\n */\nvar numTeams = function (rating) {\n  if (rating.length < 3) return 0;\n\n  let res = 0;\n  const len = rating.length;\n  const greaterThan = new Array(len).fill(0);\n  const lessThan = new Array(len).fill(0);\n\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (rating[i] < rating[j]) {\n        greaterThan[i] += 1;\n      } else {\n        lessThan[i] += 1;\n      }\n    }\n  }\n\n  for (let i = 0; i < len - 2; i++) {\n    for (let j = i + 1; j < len; j++) {\n      // 判断是升序，则看 j 后面还有多少个比 j 更大的\n      if (rating[i] < rating[j]) {\n        res += greaterThan[j];\n      } else if (rating[i] > rating[j]) {\n        // 判断是降序，则看后面有多少比 j 更小的\n        res += lessThan[j];\n      }\n    }\n  }\n  return res;\n};\n\n// numTeams([2,5,3,4,1])\nnumTeams([4, 7, 9, 5, 10, 8, 2, 1, 6]);\n\n```\n","slug":"javaScript-leetCode-day-1","published":1,"updated":"2020-04-07T03:06:20.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmmm000if5s6rqae5cky","content":"<p>从今天开始，打算刷一下 LeetCode，复习一下算法和数据结构的基础知识。最近写业务较多，感觉需要换换脑子。再者毕竟今年行情不好，有备无患。</p>\n<p>节奏是打算每天刷3道 medium 难度，基本按照提交的通过率从高往低的来，或者是非常经典的题目。这样一开始刷的应该是相对来说比较容易的，可以循序渐进。计划是每个标签刷10道，这样下来一个月可以刷8个标签，可以把常见的数据结构都过一遍。</p>\n<p>这里记录的是刷的过程中的一些心得，和大概的思路。具体的代码我也每日更新到我的 <a href=\"https://github.com/zhengminhui/leetcode-javascript\" target=\"_blank\" rel=\"noopener\">GitHub</a> 仓库。</p>\n<h4 id=\"15-3Sum\"><a href=\"#15-3Sum\" class=\"headerlink\" title=\"15. 3Sum\"></a>15. 3Sum</h4><p>先 sort array, logn；然后从左边 i 开始，可以拿到 diff = 0 - num[i], 数组剩下的，就是2sum，任意两个数加和为diff。使用双指针 j, k 一头一尾开始遍历。有一个corner case 是 [0,0,0,0]， 去重是关键，方法是判断，nums[i] 不等于前一个数 nums[i-1]。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[][]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> threeSum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> target = <span class=\"number\">0</span>;</span><br><span class=\"line\">  nums = nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === <span class=\"number\">0</span> || (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] !== nums[i - <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> k = len - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (j &lt; k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> sum = nums[i] + nums[j] + nums[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum === target) &#123;</span><br><span class=\"line\">          res.push([nums[i], nums[j], nums[k]]);</span><br><span class=\"line\">          <span class=\"comment\">// 判断毗邻两数字是否想等，相等的话继续滑动, 避免添加重复的答案</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[j] === nums[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            j += <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[k] === nums[k - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            k -= <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          j += <span class=\"number\">1</span>;</span><br><span class=\"line\">          k -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &lt; target) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[j] === nums[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            j += <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          j += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &gt; target) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[k] === nums[k - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            k -= <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          k -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">threeSum([<span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>]);</span><br><span class=\"line\">threeSum([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">// threeSum([-1, 0, 1, 2, -1, -4])</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1329-Sort-the-Matrix-Diagonally\"><a href=\"#1329-Sort-the-Matrix-Diagonally\" class=\"headerlink\" title=\"1329. Sort the Matrix Diagonally\"></a>1329. Sort the Matrix Diagonally</h4><p>一开始题目理解错了，想的方法是先vertical对每个子数组排序，再横排。仔细看了例子，原来是只排对角线的。解题思路是把对角线存在新数组里，排序之后塞回去。关键点是对角线上，i-j 值恒定。i、j是遍历2维数组时的index。在通过 forEach 遍历 map，最后放回mat。 space O(mn) time O(mnlogd) d is the length of diagnoal with D = min(m,n)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[][]&#125; mat</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[][]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> diagonalSort = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mat</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = mat.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = mat[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">  <span class=\"comment\">// 准备 map</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> curr = mat[i][j];</span><br><span class=\"line\">      <span class=\"comment\">// 在对角线上，i-j 的差值恒定,</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (map.has(i - j)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> arr = map.get(i - j);</span><br><span class=\"line\">        arr.push(curr);</span><br><span class=\"line\">        map.set(i - j, arr);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        map.set(i - j, [curr]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// sort map</span></span><br><span class=\"line\">  map.forEach(<span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> arr.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      mat[i][j] = map.get(i - j).shift();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mat;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1395-Count-Number-of-Teams\"><a href=\"#1395-Count-Number-of-Teams\" class=\"headerlink\" title=\"1395. Count Number of Teams\"></a>1395. Count Number of Teams</h4><p>刷完3sum之后碰到这题，感觉是类似的。3sum是要求三者之和等于0（变种可以是任何值），这里的判断条件是3个值满足升序或降序。后来发现不行。解题思路是dp，生成两个数组，记录每个index处，后面还有多少个比它大，比他小的数量。再次遍历时，加和。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; rating</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numTeams = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">rating</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (rating.length &lt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = rating.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> greaterThan = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> lessThan = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rating[i] &lt; rating[j]) &#123;</span><br><span class=\"line\">        greaterThan[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        lessThan[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断是升序，则看 j 后面还有多少个比 j 更大的</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rating[i] &lt; rating[j]) &#123;</span><br><span class=\"line\">        res += greaterThan[j];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rating[i] &gt; rating[j]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是降序，则看后面有多少比 j 更小的</span></span><br><span class=\"line\">        res += lessThan[j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// numTeams([2,5,3,4,1])</span></span><br><span class=\"line\">numTeams([<span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>]);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>从今天开始，打算刷一下 LeetCode，复习一下算法和数据结构的基础知识。最近写业务较多，感觉需要换换脑子。再者毕竟今年行情不好，有备无患。</p>\n<p>节奏是打算每天刷3道 medium 难度，基本按照提交的通过率从高往低的来，或者是非常经典的题目。这样一开始刷的应该是相对来说比较容易的，可以循序渐进。计划是每个标签刷10道，这样下来一个月可以刷8个标签，可以把常见的数据结构都过一遍。</p>\n<p>这里记录的是刷的过程中的一些心得，和大概的思路。具体的代码我也每日更新到我的 <a href=\"https://github.com/zhengminhui/leetcode-javascript\" target=\"_blank\" rel=\"noopener\">GitHub</a> 仓库。</p>\n<h4 id=\"15-3Sum\"><a href=\"#15-3Sum\" class=\"headerlink\" title=\"15. 3Sum\"></a>15. 3Sum</h4><p>先 sort array, logn；然后从左边 i 开始，可以拿到 diff = 0 - num[i], 数组剩下的，就是2sum，任意两个数加和为diff。使用双指针 j, k 一头一尾开始遍历。有一个corner case 是 [0,0,0,0]， 去重是关键，方法是判断，nums[i] 不等于前一个数 nums[i-1]。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; nums</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[][]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> threeSum = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">nums</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = nums.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> target = <span class=\"number\">0</span>;</span><br><span class=\"line\">  nums = nums.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i === <span class=\"number\">0</span> || (i &gt; <span class=\"number\">0</span> &amp;&amp; nums[i] !== nums[i - <span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> k = len - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (j &lt; k) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> sum = nums[i] + nums[j] + nums[k];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum === target) &#123;</span><br><span class=\"line\">          res.push([nums[i], nums[j], nums[k]]);</span><br><span class=\"line\">          <span class=\"comment\">// 判断毗邻两数字是否想等，相等的话继续滑动, 避免添加重复的答案</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[j] === nums[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            j += <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[k] === nums[k - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            k -= <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          j += <span class=\"number\">1</span>;</span><br><span class=\"line\">          k -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &lt; target) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[j] === nums[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            j += <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          j += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &gt; target) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">while</span> (j &lt; k &amp;&amp; nums[k] === nums[k - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            k -= <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          k -= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">threeSum([<span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>]);</span><br><span class=\"line\">threeSum([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"comment\">// threeSum([-1, 0, 1, 2, -1, -4])</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"1329-Sort-the-Matrix-Diagonally\"><a href=\"#1329-Sort-the-Matrix-Diagonally\" class=\"headerlink\" title=\"1329. Sort the Matrix Diagonally\"></a>1329. Sort the Matrix Diagonally</h4><p>一开始题目理解错了，想的方法是先vertical对每个子数组排序，再横排。仔细看了例子，原来是只排对角线的。解题思路是把对角线存在新数组里，排序之后塞回去。关键点是对角线上，i-j 值恒定。i、j是遍历2维数组时的index。在通过 forEach 遍历 map，最后放回mat。 space O(mn) time O(mnlogd) d is the length of diagnoal with D = min(m,n)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[][]&#125; mat</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number[][]&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> diagonalSort = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mat</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> m = mat.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> n = mat[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">  <span class=\"comment\">// 准备 map</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> curr = mat[i][j];</span><br><span class=\"line\">      <span class=\"comment\">// 在对角线上，i-j 的差值恒定,</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (map.has(i - j)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> arr = map.get(i - j);</span><br><span class=\"line\">        arr.push(curr);</span><br><span class=\"line\">        map.set(i - j, arr);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        map.set(i - j, [curr]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// sort map</span></span><br><span class=\"line\">  map.forEach(<span class=\"function\">(<span class=\"params\">arr</span>) =&gt;</span> arr.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">      mat[i][j] = map.get(i - j).shift();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mat;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1395-Count-Number-of-Teams\"><a href=\"#1395-Count-Number-of-Teams\" class=\"headerlink\" title=\"1395. Count Number of Teams\"></a>1395. Count Number of Teams</h4><p>刷完3sum之后碰到这题，感觉是类似的。3sum是要求三者之和等于0（变种可以是任何值），这里的判断条件是3个值满足升序或降序。后来发现不行。解题思路是dp，生成两个数组，记录每个index处，后面还有多少个比它大，比他小的数量。再次遍历时，加和。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;number[]&#125; rating</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;number&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> numTeams = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">rating</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (rating.length &lt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = rating.length;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> greaterThan = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> lessThan = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(len).fill(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rating[i] &lt; rating[j]) &#123;</span><br><span class=\"line\">        greaterThan[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        lessThan[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 判断是升序，则看 j 后面还有多少个比 j 更大的</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rating[i] &lt; rating[j]) &#123;</span><br><span class=\"line\">        res += greaterThan[j];</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rating[i] &gt; rating[j]) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是降序，则看后面有多少比 j 更小的</span></span><br><span class=\"line\">        res += lessThan[j];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// numTeams([2,5,3,4,1])</span></span><br><span class=\"line\">numTeams([<span class=\"number\">4</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>]);</span><br></pre></td></tr></table></figure>\n"},{"title":"新工作","abbrlink":"fe5ddefd","date":"2017-02-05T23:49:30.000Z","_content":"\n终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。\n\n新的工作还是要居安思危。从明天开始，得好好刷刷题。\n","source":"_posts/new-job.md","raw":"---\ntitle: 新工作\ncategories:\n  - life\nabbrlink: fe5ddefd\ndate: 2017-02-05 15:49:30\ntags:\n---\n\n终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。\n\n新的工作还是要居安思危。从明天开始，得好好刷刷题。\n","slug":"new-job","published":1,"updated":"2019-11-26T03:24:11.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmmn000jf5s6mcy6xg9f","content":"<p>终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。</p>\n<p>新的工作还是要居安思危。从明天开始，得好好刷刷题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。</p>\n<p>新的工作还是要居安思危。从明天开始，得好好刷刷题。</p>\n"},{"title":"Node.js modules","abbrlink":"c505c167","date":"2019-02-19T01:11:02.000Z","_content":"\n#### `module.exports` and `exports`\n\n`exports` is a reference to the module.exports that is shorter to type.\n\nThe `exports` variable is available within a module's file-level scope, and is assigned the value of `module.exports` before the module is evaluated.\n\nIt allows a shortcut, so that `module.exports.f = ...` can be written more succinctly as `exports.f = ...`. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to `module.exports`:\n\n```js\n// a.js\nfunction foo() {\n  console.log('foo');\n}\n\nfunction bar() {\n  console.log('bar');\n}\n\nexports.foo = foo;\nexports.bar = bar;\n\n// or\nmodule.exports = {\n  foo: foo,\n  bar: bar,\n};\n\n// This won't work! It assigned a new reference to exports variable\nexports = {\n  foo: foo,\n  bar: bar,\n};\n```\n\n#### Import\n\nWhen loaded via `import` these modules will provide a single `default` export representing the value of module.exports at the time they finished evaluating.\n\n```js\n// foo.js\nmodule.exports = { one: 1 };\n\n// bar.mjs\nimport foo from './foo.js';\nfoo.one === 1; // true\n```\n\n#### Caching\n\nModules are cached after the first time they are loaded. This means (among other things) that every call to `require('foo')` will get exactly the same object returned, if it would resolve to the same file.\n\nProvided `require.cache` is not modified, multiple calls to `require('foo')` will not cause the module code to be executed multiple times.\n\nTo have a module execute code multiple times, export a function, and call that function.\n\n##### Caveats\n\nModules are cached based on their resolved filename.\n\nCaching is case-sensitive. For example, `require('./foo')` and `require('./FOO')` return two different objects, irrespective of whether or not `./foo` and `./FOO` are the same file.\n\n#### Cycles\n\n##### why support\n\n> Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.\n>\n> -- <cite>Axel Rauschmayer</cite>\n\nI think this example from nodejs document can clearly explain cyclic dependencies. <https://nodejs.org/api/modules.html#modules_cycles>\n\n```js\n// a.js\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n\n// b.js\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n\n// main.js\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done = %j, b.done = %j', a.done, b.done);\n```\n\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`. At that point, `b.js` tries to load `a.js`. In order to prevent an **infinite loop**, an **unfinished copy** of the `a.js` exports object is returned to the `b.js` module. `b.js` then finishes loading, and its exports object is provided to the `a.js` module.\n\nThe output is\n\n```bash\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\n```\n\n#### related reading material\n\n1. nodejs document, [Modules](https://nodejs.org/api/modules.html)\n\n2. Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n","source":"_posts/node-modules.md","raw":"---\ntitle: Node.js modules\ncategories:\n  - web\ntags:\n  - nodejs\n  - modules\n  - exports\n  - javascript\nabbrlink: c505c167\ndate: 2019-02-18 17:11:02\n---\n\n#### `module.exports` and `exports`\n\n`exports` is a reference to the module.exports that is shorter to type.\n\nThe `exports` variable is available within a module's file-level scope, and is assigned the value of `module.exports` before the module is evaluated.\n\nIt allows a shortcut, so that `module.exports.f = ...` can be written more succinctly as `exports.f = ...`. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to `module.exports`:\n\n```js\n// a.js\nfunction foo() {\n  console.log('foo');\n}\n\nfunction bar() {\n  console.log('bar');\n}\n\nexports.foo = foo;\nexports.bar = bar;\n\n// or\nmodule.exports = {\n  foo: foo,\n  bar: bar,\n};\n\n// This won't work! It assigned a new reference to exports variable\nexports = {\n  foo: foo,\n  bar: bar,\n};\n```\n\n#### Import\n\nWhen loaded via `import` these modules will provide a single `default` export representing the value of module.exports at the time they finished evaluating.\n\n```js\n// foo.js\nmodule.exports = { one: 1 };\n\n// bar.mjs\nimport foo from './foo.js';\nfoo.one === 1; // true\n```\n\n#### Caching\n\nModules are cached after the first time they are loaded. This means (among other things) that every call to `require('foo')` will get exactly the same object returned, if it would resolve to the same file.\n\nProvided `require.cache` is not modified, multiple calls to `require('foo')` will not cause the module code to be executed multiple times.\n\nTo have a module execute code multiple times, export a function, and call that function.\n\n##### Caveats\n\nModules are cached based on their resolved filename.\n\nCaching is case-sensitive. For example, `require('./foo')` and `require('./FOO')` return two different objects, irrespective of whether or not `./foo` and `./FOO` are the same file.\n\n#### Cycles\n\n##### why support\n\n> Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.\n>\n> -- <cite>Axel Rauschmayer</cite>\n\nI think this example from nodejs document can clearly explain cyclic dependencies. <https://nodejs.org/api/modules.html#modules_cycles>\n\n```js\n// a.js\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n\n// b.js\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n\n// main.js\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done = %j, b.done = %j', a.done, b.done);\n```\n\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`. At that point, `b.js` tries to load `a.js`. In order to prevent an **infinite loop**, an **unfinished copy** of the `a.js` exports object is returned to the `b.js` module. `b.js` then finishes loading, and its exports object is provided to the `a.js` module.\n\nThe output is\n\n```bash\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\n```\n\n#### related reading material\n\n1. nodejs document, [Modules](https://nodejs.org/api/modules.html)\n\n2. Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n","slug":"node-modules","published":1,"updated":"2019-11-15T09:39:12.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmmn000kf5s66iiy021o","content":"<h4 id=\"module-exports-and-exports\"><a href=\"#module-exports-and-exports\" class=\"headerlink\" title=\"module.exports and exports\"></a><code>module.exports</code> and <code>exports</code></h4><p><code>exports</code> is a reference to the module.exports that is shorter to type.</p>\n<p>The <code>exports</code> variable is available within a module’s file-level scope, and is assigned the value of <code>module.exports</code> before the module is evaluated.</p>\n<p>It allows a shortcut, so that <code>module.exports.f = ...</code> can be written more succinctly as <code>exports.f = ...</code>. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to <code>module.exports</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.foo = foo;</span><br><span class=\"line\">exports.bar = bar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  foo: foo,</span><br><span class=\"line\">  bar: bar,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This won't work! It assigned a new reference to exports variable</span></span><br><span class=\"line\">exports = &#123;</span><br><span class=\"line\">  foo: foo,</span><br><span class=\"line\">  bar: bar,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"Import\"></a>Import</h4><p>When loaded via <code>import</code> these modules will provide a single <code>default</code> export representing the value of module.exports at the time they finished evaluating.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; <span class=\"attr\">one</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bar.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo.js'</span>;</span><br><span class=\"line\">foo.one === <span class=\"number\">1</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h4><p>Modules are cached after the first time they are loaded. This means (among other things) that every call to <code>require(&#39;foo&#39;)</code> will get exactly the same object returned, if it would resolve to the same file.</p>\n<p>Provided <code>require.cache</code> is not modified, multiple calls to <code>require(&#39;foo&#39;)</code> will not cause the module code to be executed multiple times.</p>\n<p>To have a module execute code multiple times, export a function, and call that function.</p>\n<h5 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats\"></a>Caveats</h5><p>Modules are cached based on their resolved filename.</p>\n<p>Caching is case-sensitive. For example, <code>require(&#39;./foo&#39;)</code> and <code>require(&#39;./FOO&#39;)</code> return two different objects, irrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>\n<h4 id=\"Cycles\"><a href=\"#Cycles\" class=\"headerlink\" title=\"Cycles\"></a>Cycles</h4><h5 id=\"why-support\"><a href=\"#why-support\" class=\"headerlink\" title=\"why support\"></a>why support</h5><blockquote>\n<p>Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.</p>\n<p>– <cite>Axel Rauschmayer</cite></p>\n</blockquote>\n<p>I think this example from nodejs document can clearly explain cyclic dependencies. <a href=\"https://nodejs.org/api/modules.html#modules_cycles\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/api/modules.html#modules_cycles</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in a, b.done = %j'</span>, b.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in b, a.done = %j'</span>, a.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main starting'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in main, a.done = %j, b.done = %j'</span>, a.done, b.done);</span><br></pre></td></tr></table></figure>\n<p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an <strong>infinite loop</strong>, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its exports object is provided to the <code>a.js</code> module.</p>\n<p>The output is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">main starting</span><br><span class=\"line\">a starting</span><br><span class=\"line\">b starting</span><br><span class=\"line\"><span class=\"keyword\">in</span> b, a.done = <span class=\"literal\">false</span></span><br><span class=\"line\">b <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> a, b.done = <span class=\"literal\">true</span></span><br><span class=\"line\">a <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> main, a.done = <span class=\"literal\">true</span>, b.done = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"module-exports-and-exports\"><a href=\"#module-exports-and-exports\" class=\"headerlink\" title=\"module.exports and exports\"></a><code>module.exports</code> and <code>exports</code></h4><p><code>exports</code> is a reference to the module.exports that is shorter to type.</p>\n<p>The <code>exports</code> variable is available within a module’s file-level scope, and is assigned the value of <code>module.exports</code> before the module is evaluated.</p>\n<p>It allows a shortcut, so that <code>module.exports.f = ...</code> can be written more succinctly as <code>exports.f = ...</code>. However, be aware that like any variable, if a new value is assigned to exports, it is no longer bound to <code>module.exports</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'foo'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'bar'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">exports.foo = foo;</span><br><span class=\"line\">exports.bar = bar;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  foo: foo,</span><br><span class=\"line\">  bar: bar,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// This won't work! It assigned a new reference to exports variable</span></span><br><span class=\"line\">exports = &#123;</span><br><span class=\"line\">  foo: foo,</span><br><span class=\"line\">  bar: bar,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Import\"><a href=\"#Import\" class=\"headerlink\" title=\"Import\"></a>Import</h4><p>When loaded via <code>import</code> these modules will provide a single <code>default</code> export representing the value of module.exports at the time they finished evaluating.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// foo.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123; <span class=\"attr\">one</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bar.mjs</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> foo <span class=\"keyword\">from</span> <span class=\"string\">'./foo.js'</span>;</span><br><span class=\"line\">foo.one === <span class=\"number\">1</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h4><p>Modules are cached after the first time they are loaded. This means (among other things) that every call to <code>require(&#39;foo&#39;)</code> will get exactly the same object returned, if it would resolve to the same file.</p>\n<p>Provided <code>require.cache</code> is not modified, multiple calls to <code>require(&#39;foo&#39;)</code> will not cause the module code to be executed multiple times.</p>\n<p>To have a module execute code multiple times, export a function, and call that function.</p>\n<h5 id=\"Caveats\"><a href=\"#Caveats\" class=\"headerlink\" title=\"Caveats\"></a>Caveats</h5><p>Modules are cached based on their resolved filename.</p>\n<p>Caching is case-sensitive. For example, <code>require(&#39;./foo&#39;)</code> and <code>require(&#39;./FOO&#39;)</code> return two different objects, irrespective of whether or not <code>./foo</code> and <code>./FOO</code> are the same file.</p>\n<h4 id=\"Cycles\"><a href=\"#Cycles\" class=\"headerlink\" title=\"Cycles\"></a>Cycles</h4><h5 id=\"why-support\"><a href=\"#why-support\" class=\"headerlink\" title=\"why support\"></a>why support</h5><blockquote>\n<p>Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.</p>\n<p>– <cite>Axel Rauschmayer</cite></p>\n</blockquote>\n<p>I think this example from nodejs document can clearly explain cyclic dependencies. <a href=\"https://nodejs.org/api/modules.html#modules_cycles\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/api/modules.html#modules_cycles</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in a, b.done = %j'</span>, b.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in b, a.done = %j'</span>, a.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main starting'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in main, a.done = %j, b.done = %j'</span>, a.done, b.done);</span><br></pre></td></tr></table></figure>\n<p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an <strong>infinite loop</strong>, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its exports object is provided to the <code>a.js</code> module.</p>\n<p>The output is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">main starting</span><br><span class=\"line\">a starting</span><br><span class=\"line\">b starting</span><br><span class=\"line\"><span class=\"keyword\">in</span> b, a.done = <span class=\"literal\">false</span></span><br><span class=\"line\">b <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> a, b.done = <span class=\"literal\">true</span></span><br><span class=\"line\">a <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> main, a.done = <span class=\"literal\">true</span>, b.done = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></p>\n</li>\n</ol>\n"},{"title":"通过 confine 研究 tooltip 的实现过程 -- eCharts 源码解读","abbrlink":"9176cb10","date":"2019-11-06T07:09:13.000Z","_content":"\n实现业务需求时发现 tooltip 中呈现的内容比较多，当出现在边界时会出现一部分在可视范围以外。所幸 echarts 提供了一个 confine 配置给 tooltip，当为 true 时，可以强制使 tooltip 出现在 view 视图中。\n\n接下来来看看源码中是怎样实现 confine 功能的。\n\n首先可以看到，confine 是在 `src/component/tooltip/TooltipModel.js` 中定义，默认值是 `false`\n\n```js\n// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\nexport default echarts.extendComponentModel({\n  type: 'tooltip',\n\n  dependencies: ['axisPointer'],\n\n  defaultOption: {\n    // ...\n    // 'trigger' only works on coordinate system.\n    // 'item' | 'axis' | 'none'\n    trigger: 'item',\n    // 'click' | 'mousemove' | 'none'\n    triggerOn: 'mousemove|click',\n    // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n    confine: false,\n\n    // ...\n  },\n});\n```\n\n接下来，可以看到在同级目录下的 `TooltipView.js` 文件，这里负责定义了 TooltipView 相关的显示、隐藏、更新位置等的方法。在该文件中搜索 confine，发现相关代码主要是两处，一处是 `confineTooltipPosion` function，这里很好理解，通过计算当前 x、y 值，和当前的可视范围的宽高 viewWidth, viewHeight 比较，得到 confine 之后新的 x、y 值。 另一处则是调用`confineTooltipPosion`的 `_updatePosition` 方法.\n\n在这里，一共定义了三种 showTooltip 方法，对应不同的对象。分别是 \\_showAxisTooltip, \\_showComponentItemTooltip 和 \\_showSeriesItemTooltip . 我们只关注 series 中 item 的 tooltip， 至于 AxisTooltip 和 ComponentItemTooltip，在原理上基本一致。\n\n梳理一番之后发现，在该类中，方法的调用链是 `confineTooltipPosion` -> `_updatePosition` -> `_showTooltipContent` -> `_showSeriesItemTooltip` -> `_tryShow` -> `_initGlobalListener` -> `render`. 执行顺序是从右至左。\n\n理清了思路，接下来我们来看代码是如何实现 confine 的过程。\n\n弄清了执行顺序后，就很好理解 tooltip 的渲染过程了。在生命周期 render 函数中，调用了 `_initGlobalListener`，在该方法中， 可以获取到一个共享的全局监听器 `globalListener`. 这个监听器具体实现和属性可参见`src/component/axisPointer/globalListener.js`。 这里我们先关注暴露出来的 `register`方法，他接受三个 arguments: `function register(key, api, handler)`; 所以这里就很好理解了，在初始化阶段，判断 tooltip 的触发条件（triggerOn:'click' | 'mousemove' | 'none' ）， 如果不是`none`， 则 globalListener 给`itemTooltip` 注册了回调 handler。当 `currTrigger`是 `click`或`mousemove` 时，调用 `_tryShow` 显示 tooltip，当 leave 时调用 `_hide`。\n\n```js\n// _initGlobalListener\nvar tooltipModel = this._tooltipModel;\nvar triggerOn = tooltipModel.get('triggerOn');\n\nglobalListener.register(\n  'itemTooltip',\n  this._api,\n  bind(function(currTrigger, e, dispatchAction) {\n    // If 'none', it is not controlled by mouse totally.\n    if (triggerOn !== 'none') {\n      if (triggerOn.indexOf(currTrigger) >= 0) {\n        this._tryShow(e, dispatchAction);\n      } else if (currTrigger === 'leave') {\n        this._hide(dispatchAction);\n      }\n    }\n  }, this),\n);\n```\n\ntryShow 调用后, 我们可以看到这个方法实现非常直观，根据条件来判断显示 series、component 还是 axis 的 tooltip。我们重点关注\\_showSeriesItemTooltip.\n\n走到\\_showSeriesItemTooltip，这个函数声明并计算了一系列的变量，都是为了 function \\_showTooltipContent 的参数做准备。我们可以看到\n\n```js\nthis._showOrMove(tooltipModel, function() {\n  this._showTooltipContent(\n    tooltipModel,\n    defaultHtml,\n    params,\n    asyncTicket,\n    e.offsetX,\n    e.offsetY,\n    e.position,\n    e.target,\n    markers,\n  );\n});\n```\n\n结合 echarts tooltip 的文档和 tooltipModel 来看，我们可以传入一个配置参数 showDelay，如果 delay 大于 0 则 setTimeout，若干秒后执行回调函数，在这里则是显示 toolTip（ \\_showTooltipContent）；否则立即执行 callback。不过官方文档并不建议设置 delay。 所以我们可以认为\\_showOrMove 是个定时器，到了时间后显示 tooltip。\\_showOrMove 实现如下。\n\n```js\n//_showOrMove\n// showDelay is used in this case: tooltip.enterable is set\n// as true. User intent to move mouse into tooltip and click\n// something. `showDelay` makes it easyer to enter the content\n// but tooltip do not move immediately.\nvar delay = tooltipModel.get('showDelay');\ncb = zrUtil.bind(cb, this);\nclearTimeout(this._showTimout);\ndelay > 0 ? (this._showTimout = setTimeout(cb, delay)) : cb();\n```\n\n回到\\_showTooltipContent， 在这个方法里我们知道了 echarts 如何兼容 formatter，传入 string 和 function 时不同的处理方法。通过 typeof 判断后，如果是 string， 则通过 `formatUtil.formatTpl` 直接 replace, return 一个 tpl<string>; 如果 typeof 是 function， 则通过 `.innerHTML` 插入一段新的 string.\n\n关键代码如下, 实现逻辑在这里就不过多关注了。\n\n```js\n// is string formatTpl\n/**\n * Template formatter\n * @param {string} tpl\n * @param {Array.<Object>|Object} paramsList\n * @param {boolean} [encode=false]\n * @return {string}\n */\nexport function formatTpl(tpl, paramsList, encode) {\n  if (!zrUtil.isArray(paramsList)) {\n    paramsList = [paramsList];\n  }\n  var seriesLen = paramsList.length;\n  if (!seriesLen) {\n    return '';\n  }\n\n  var $vars = paramsList[0].$vars || [];\n  for (var i = 0; i < $vars.length; i++) {\n    var alias = TPL_VAR_ALIAS[i];\n    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));\n  }\n  for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n    for (var k = 0; k < $vars.length; k++) {\n      var val = paramsList[seriesIdx][$vars[k]];\n      tpl = tpl.replace(\n        wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n        encode ? encodeHTML(val) : val,\n      );\n    }\n  }\n\n  return tpl;\n}\n```\n\n```js\n// is function, setContent\nsetContent: function (content) {\n  this.el.innerHTML = content == null ? '' : content;\n},\n```\n\n这里插一个题外话， HTML5 规范中表示 `<script>` tag 中的内容在使用 `innerHTML` 插入时是不应该被执行的\n\n```js\nname = \"<script>alert('I am John in an annoying alert!')</script>\";\n el.innerHTML = name; // harmless in this case\n```\n\n但是当不使用 `<script>` tag 并使用 innerHTML 插入 string 时，则会有 croos-site scripting attact 风险\n\n```js\nconst name = \"<img src='x' onerror='alert(1)'>\";\nel.innerHTML = name; // shows the alert\n```\n\n基于这个原因，推荐使用 `Node.textContent` 而不是使用 `innerHTML`\n\n好了，终于生成了 content，和需要的坐标、参数等，这个时候调用了 \\_updatePosition. 在\\_updatePosition 中我们看到 echats 是如何去做当 position 字段传入 string, array 和 function 时的处理方法的。如果对这里感兴趣可以关注一下。 在这个方法的最后，我们看到了对 confine 的判断，如果为 true，则再次调用 confineTooltipPosition, 返回新的 x，y 坐标。然后将 content 移动到新的坐标位置。\n\n```js\nvar viewWidth = this._api.getWidth();\nvar viewHeight = this._api.getHeight();\n\n// ...\n\nif (tooltipModel.get('confine')) {\n  var pos = confineTooltipPosition(x, y, content, viewWidth, viewHeight);\n  x = pos[0];\n  y = pos[1];\n}\n\ncontent.moveTo(x, y);\n```\n\n这里看到 echarts 获取可视范围的高宽，是通过封装在内的 \\_api 内的方法获得。这里涉及到更底层的关于 echarts 调用 zrender 生成 root 绘图容器的过程，基本原理是先获取绘图区域实例，根据该实例再获取高宽。具体过程在此不作赘述。留个记录，有机会再来解析那一部分。具体代码可以参考 `zrender/src/Painter.js`.\n\n回到 `confineTooltipPosition` 方法， 根据前面方法的定义，这里的 x，y 是 e.offsetX 和 e.offsetY. 表示事件发生时鼠标 pointer 到 target node 的 padding 的距离。 而 width 和 height 分别是 clientWidth 和 clientHeight 加上 borderWidth. 通过位置的大小比较，可以保证新的 content 处于可视区域内。第一个 x 判断是否右边溢出，第二个 x 判断是否左边溢出。\n\n```js\nfunction confineTooltipPosition(x, y, content, viewWidth, viewHeight) {\n  var size = content.getOuterSize();\n  var width = size.width;\n  var height = size.height;\n\n  x = Math.min(x + width, viewWidth) - width;\n  y = Math.min(y + height, viewHeight) - height;\n  x = Math.max(x, 0);\n  y = Math.max(y, 0);\n\n  return [x, y];\n}\n\ngetOuterSize: function () {\n    var width = this.el.clientWidth;\n    var height = this.el.clientHeight;\n\n    // Consider browser compatibility.\n    // IE8 does not support getComputedStyle.\n    if (document.defaultView && document.defaultView.getComputedStyle) {\n        var stl = document.defaultView.getComputedStyle(this.el);\n        if (stl) {\n            width += parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);\n            height += parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);\n        }\n    }\n\n    return {width: width, height: height};\n}\n```\n\n然后把 content 移动到新生成的坐标上，至此就完成了 confine 的功能。\n\n最后说一个看代码的心得，平常在实现一些公共 sdk 时，经常需要暴露一些 api，有的时候看到直接定义的是一个 array，然后调用方使用 `array[index]` 去获取某个方法。这样的坏处一个是数组的顺序无法保证，增、删之后 index 可能会变，给调用方造成影响。另外一个是，通过 index 获取时，对调用的方法名感知不到，不能确保使用的方法是否正确。 echarts 中的这个实现比较优雅，apiList 和真正暴露使用的 api 对象解耦。通过遍历 apiList， 产生一个包含 apiList 元素为 key 的对象，调用这个对象时，使用函数名，更直观，更友好，值得学习。\n\n```js\nimport * as zrUtil from 'zrender/src/core/util';\n\nvar echartsAPIList = [\n  'getDom',\n  'getZr',\n  'getWidth',\n  'getHeight',\n  'getDevicePixelRatio',\n  'dispatchAction',\n  'isDisposed',\n  'on',\n  'off',\n  'getDataURL',\n  'getConnectedDataURL',\n  'getModel',\n  'getOption',\n  'getViewOfComponentModel',\n  'getViewOfSeriesModel',\n];\n// And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js\n\nfunction ExtensionAPI(chartInstance) {\n  zrUtil.each(\n    echartsAPIList,\n    function(name) {\n      this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n    },\n    this,\n  );\n}\n\nexport default ExtensionAPI;\n```\n","source":"_posts/tooltip-in-echars.md","raw":"---\ntitle: 通过 confine 研究 tooltip 的实现过程 -- eCharts 源码解读\ncategories:\n  - web\ntags:\n  - echarts\n  - zrender\n  - tooltip\n  - confine\nabbrlink: 9176cb10\ndate: 2019-11-05 23:09:13\n---\n\n实现业务需求时发现 tooltip 中呈现的内容比较多，当出现在边界时会出现一部分在可视范围以外。所幸 echarts 提供了一个 confine 配置给 tooltip，当为 true 时，可以强制使 tooltip 出现在 view 视图中。\n\n接下来来看看源码中是怎样实现 confine 功能的。\n\n首先可以看到，confine 是在 `src/component/tooltip/TooltipModel.js` 中定义，默认值是 `false`\n\n```js\n// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\nexport default echarts.extendComponentModel({\n  type: 'tooltip',\n\n  dependencies: ['axisPointer'],\n\n  defaultOption: {\n    // ...\n    // 'trigger' only works on coordinate system.\n    // 'item' | 'axis' | 'none'\n    trigger: 'item',\n    // 'click' | 'mousemove' | 'none'\n    triggerOn: 'mousemove|click',\n    // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。\n    confine: false,\n\n    // ...\n  },\n});\n```\n\n接下来，可以看到在同级目录下的 `TooltipView.js` 文件，这里负责定义了 TooltipView 相关的显示、隐藏、更新位置等的方法。在该文件中搜索 confine，发现相关代码主要是两处，一处是 `confineTooltipPosion` function，这里很好理解，通过计算当前 x、y 值，和当前的可视范围的宽高 viewWidth, viewHeight 比较，得到 confine 之后新的 x、y 值。 另一处则是调用`confineTooltipPosion`的 `_updatePosition` 方法.\n\n在这里，一共定义了三种 showTooltip 方法，对应不同的对象。分别是 \\_showAxisTooltip, \\_showComponentItemTooltip 和 \\_showSeriesItemTooltip . 我们只关注 series 中 item 的 tooltip， 至于 AxisTooltip 和 ComponentItemTooltip，在原理上基本一致。\n\n梳理一番之后发现，在该类中，方法的调用链是 `confineTooltipPosion` -> `_updatePosition` -> `_showTooltipContent` -> `_showSeriesItemTooltip` -> `_tryShow` -> `_initGlobalListener` -> `render`. 执行顺序是从右至左。\n\n理清了思路，接下来我们来看代码是如何实现 confine 的过程。\n\n弄清了执行顺序后，就很好理解 tooltip 的渲染过程了。在生命周期 render 函数中，调用了 `_initGlobalListener`，在该方法中， 可以获取到一个共享的全局监听器 `globalListener`. 这个监听器具体实现和属性可参见`src/component/axisPointer/globalListener.js`。 这里我们先关注暴露出来的 `register`方法，他接受三个 arguments: `function register(key, api, handler)`; 所以这里就很好理解了，在初始化阶段，判断 tooltip 的触发条件（triggerOn:'click' | 'mousemove' | 'none' ）， 如果不是`none`， 则 globalListener 给`itemTooltip` 注册了回调 handler。当 `currTrigger`是 `click`或`mousemove` 时，调用 `_tryShow` 显示 tooltip，当 leave 时调用 `_hide`。\n\n```js\n// _initGlobalListener\nvar tooltipModel = this._tooltipModel;\nvar triggerOn = tooltipModel.get('triggerOn');\n\nglobalListener.register(\n  'itemTooltip',\n  this._api,\n  bind(function(currTrigger, e, dispatchAction) {\n    // If 'none', it is not controlled by mouse totally.\n    if (triggerOn !== 'none') {\n      if (triggerOn.indexOf(currTrigger) >= 0) {\n        this._tryShow(e, dispatchAction);\n      } else if (currTrigger === 'leave') {\n        this._hide(dispatchAction);\n      }\n    }\n  }, this),\n);\n```\n\ntryShow 调用后, 我们可以看到这个方法实现非常直观，根据条件来判断显示 series、component 还是 axis 的 tooltip。我们重点关注\\_showSeriesItemTooltip.\n\n走到\\_showSeriesItemTooltip，这个函数声明并计算了一系列的变量，都是为了 function \\_showTooltipContent 的参数做准备。我们可以看到\n\n```js\nthis._showOrMove(tooltipModel, function() {\n  this._showTooltipContent(\n    tooltipModel,\n    defaultHtml,\n    params,\n    asyncTicket,\n    e.offsetX,\n    e.offsetY,\n    e.position,\n    e.target,\n    markers,\n  );\n});\n```\n\n结合 echarts tooltip 的文档和 tooltipModel 来看，我们可以传入一个配置参数 showDelay，如果 delay 大于 0 则 setTimeout，若干秒后执行回调函数，在这里则是显示 toolTip（ \\_showTooltipContent）；否则立即执行 callback。不过官方文档并不建议设置 delay。 所以我们可以认为\\_showOrMove 是个定时器，到了时间后显示 tooltip。\\_showOrMove 实现如下。\n\n```js\n//_showOrMove\n// showDelay is used in this case: tooltip.enterable is set\n// as true. User intent to move mouse into tooltip and click\n// something. `showDelay` makes it easyer to enter the content\n// but tooltip do not move immediately.\nvar delay = tooltipModel.get('showDelay');\ncb = zrUtil.bind(cb, this);\nclearTimeout(this._showTimout);\ndelay > 0 ? (this._showTimout = setTimeout(cb, delay)) : cb();\n```\n\n回到\\_showTooltipContent， 在这个方法里我们知道了 echarts 如何兼容 formatter，传入 string 和 function 时不同的处理方法。通过 typeof 判断后，如果是 string， 则通过 `formatUtil.formatTpl` 直接 replace, return 一个 tpl<string>; 如果 typeof 是 function， 则通过 `.innerHTML` 插入一段新的 string.\n\n关键代码如下, 实现逻辑在这里就不过多关注了。\n\n```js\n// is string formatTpl\n/**\n * Template formatter\n * @param {string} tpl\n * @param {Array.<Object>|Object} paramsList\n * @param {boolean} [encode=false]\n * @return {string}\n */\nexport function formatTpl(tpl, paramsList, encode) {\n  if (!zrUtil.isArray(paramsList)) {\n    paramsList = [paramsList];\n  }\n  var seriesLen = paramsList.length;\n  if (!seriesLen) {\n    return '';\n  }\n\n  var $vars = paramsList[0].$vars || [];\n  for (var i = 0; i < $vars.length; i++) {\n    var alias = TPL_VAR_ALIAS[i];\n    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));\n  }\n  for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n    for (var k = 0; k < $vars.length; k++) {\n      var val = paramsList[seriesIdx][$vars[k]];\n      tpl = tpl.replace(\n        wrapVar(TPL_VAR_ALIAS[k], seriesIdx),\n        encode ? encodeHTML(val) : val,\n      );\n    }\n  }\n\n  return tpl;\n}\n```\n\n```js\n// is function, setContent\nsetContent: function (content) {\n  this.el.innerHTML = content == null ? '' : content;\n},\n```\n\n这里插一个题外话， HTML5 规范中表示 `<script>` tag 中的内容在使用 `innerHTML` 插入时是不应该被执行的\n\n```js\nname = \"<script>alert('I am John in an annoying alert!')</script>\";\n el.innerHTML = name; // harmless in this case\n```\n\n但是当不使用 `<script>` tag 并使用 innerHTML 插入 string 时，则会有 croos-site scripting attact 风险\n\n```js\nconst name = \"<img src='x' onerror='alert(1)'>\";\nel.innerHTML = name; // shows the alert\n```\n\n基于这个原因，推荐使用 `Node.textContent` 而不是使用 `innerHTML`\n\n好了，终于生成了 content，和需要的坐标、参数等，这个时候调用了 \\_updatePosition. 在\\_updatePosition 中我们看到 echats 是如何去做当 position 字段传入 string, array 和 function 时的处理方法的。如果对这里感兴趣可以关注一下。 在这个方法的最后，我们看到了对 confine 的判断，如果为 true，则再次调用 confineTooltipPosition, 返回新的 x，y 坐标。然后将 content 移动到新的坐标位置。\n\n```js\nvar viewWidth = this._api.getWidth();\nvar viewHeight = this._api.getHeight();\n\n// ...\n\nif (tooltipModel.get('confine')) {\n  var pos = confineTooltipPosition(x, y, content, viewWidth, viewHeight);\n  x = pos[0];\n  y = pos[1];\n}\n\ncontent.moveTo(x, y);\n```\n\n这里看到 echarts 获取可视范围的高宽，是通过封装在内的 \\_api 内的方法获得。这里涉及到更底层的关于 echarts 调用 zrender 生成 root 绘图容器的过程，基本原理是先获取绘图区域实例，根据该实例再获取高宽。具体过程在此不作赘述。留个记录，有机会再来解析那一部分。具体代码可以参考 `zrender/src/Painter.js`.\n\n回到 `confineTooltipPosition` 方法， 根据前面方法的定义，这里的 x，y 是 e.offsetX 和 e.offsetY. 表示事件发生时鼠标 pointer 到 target node 的 padding 的距离。 而 width 和 height 分别是 clientWidth 和 clientHeight 加上 borderWidth. 通过位置的大小比较，可以保证新的 content 处于可视区域内。第一个 x 判断是否右边溢出，第二个 x 判断是否左边溢出。\n\n```js\nfunction confineTooltipPosition(x, y, content, viewWidth, viewHeight) {\n  var size = content.getOuterSize();\n  var width = size.width;\n  var height = size.height;\n\n  x = Math.min(x + width, viewWidth) - width;\n  y = Math.min(y + height, viewHeight) - height;\n  x = Math.max(x, 0);\n  y = Math.max(y, 0);\n\n  return [x, y];\n}\n\ngetOuterSize: function () {\n    var width = this.el.clientWidth;\n    var height = this.el.clientHeight;\n\n    // Consider browser compatibility.\n    // IE8 does not support getComputedStyle.\n    if (document.defaultView && document.defaultView.getComputedStyle) {\n        var stl = document.defaultView.getComputedStyle(this.el);\n        if (stl) {\n            width += parseInt(stl.borderLeftWidth, 10) + parseInt(stl.borderRightWidth, 10);\n            height += parseInt(stl.borderTopWidth, 10) + parseInt(stl.borderBottomWidth, 10);\n        }\n    }\n\n    return {width: width, height: height};\n}\n```\n\n然后把 content 移动到新生成的坐标上，至此就完成了 confine 的功能。\n\n最后说一个看代码的心得，平常在实现一些公共 sdk 时，经常需要暴露一些 api，有的时候看到直接定义的是一个 array，然后调用方使用 `array[index]` 去获取某个方法。这样的坏处一个是数组的顺序无法保证，增、删之后 index 可能会变，给调用方造成影响。另外一个是，通过 index 获取时，对调用的方法名感知不到，不能确保使用的方法是否正确。 echarts 中的这个实现比较优雅，apiList 和真正暴露使用的 api 对象解耦。通过遍历 apiList， 产生一个包含 apiList 元素为 key 的对象，调用这个对象时，使用函数名，更直观，更友好，值得学习。\n\n```js\nimport * as zrUtil from 'zrender/src/core/util';\n\nvar echartsAPIList = [\n  'getDom',\n  'getZr',\n  'getWidth',\n  'getHeight',\n  'getDevicePixelRatio',\n  'dispatchAction',\n  'isDisposed',\n  'on',\n  'off',\n  'getDataURL',\n  'getConnectedDataURL',\n  'getModel',\n  'getOption',\n  'getViewOfComponentModel',\n  'getViewOfSeriesModel',\n];\n// And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js\n\nfunction ExtensionAPI(chartInstance) {\n  zrUtil.each(\n    echartsAPIList,\n    function(name) {\n      this[name] = zrUtil.bind(chartInstance[name], chartInstance);\n    },\n    this,\n  );\n}\n\nexport default ExtensionAPI;\n```\n","slug":"tooltip-in-echars","published":1,"updated":"2019-11-15T09:39:12.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmmo000lf5s6riyr6t98","content":"<p>实现业务需求时发现 tooltip 中呈现的内容比较多，当出现在边界时会出现一部分在可视范围以外。所幸 echarts 提供了一个 confine 配置给 tooltip，当为 true 时，可以强制使 tooltip 出现在 view 视图中。</p>\n<p>接下来来看看源码中是怎样实现 confine 功能的。</p>\n<p>首先可以看到，confine 是在 <code>src/component/tooltip/TooltipModel.js</code> 中定义，默认值是 <code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> echarts.extendComponentModel(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'tooltip'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  dependencies: [<span class=\"string\">'axisPointer'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">  defaultOption: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 'trigger' only works on coordinate system.</span></span><br><span class=\"line\">    <span class=\"comment\">// 'item' | 'axis' | 'none'</span></span><br><span class=\"line\">    trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 'click' | 'mousemove' | 'none'</span></span><br><span class=\"line\">    triggerOn: <span class=\"string\">'mousemove|click'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。</span></span><br><span class=\"line\">    confine: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>接下来，可以看到在同级目录下的 <code>TooltipView.js</code> 文件，这里负责定义了 TooltipView 相关的显示、隐藏、更新位置等的方法。在该文件中搜索 confine，发现相关代码主要是两处，一处是 <code>confineTooltipPosion</code> function，这里很好理解，通过计算当前 x、y 值，和当前的可视范围的宽高 viewWidth, viewHeight 比较，得到 confine 之后新的 x、y 值。 另一处则是调用<code>confineTooltipPosion</code>的 <code>_updatePosition</code> 方法.</p>\n<p>在这里，一共定义了三种 showTooltip 方法，对应不同的对象。分别是 _showAxisTooltip, _showComponentItemTooltip 和 _showSeriesItemTooltip . 我们只关注 series 中 item 的 tooltip， 至于 AxisTooltip 和 ComponentItemTooltip，在原理上基本一致。</p>\n<p>梳理一番之后发现，在该类中，方法的调用链是 <code>confineTooltipPosion</code> -&gt; <code>_updatePosition</code> -&gt; <code>_showTooltipContent</code> -&gt; <code>_showSeriesItemTooltip</code> -&gt; <code>_tryShow</code> -&gt; <code>_initGlobalListener</code> -&gt; <code>render</code>. 执行顺序是从右至左。</p>\n<p>理清了思路，接下来我们来看代码是如何实现 confine 的过程。</p>\n<p>弄清了执行顺序后，就很好理解 tooltip 的渲染过程了。在生命周期 render 函数中，调用了 <code>_initGlobalListener</code>，在该方法中， 可以获取到一个共享的全局监听器 <code>globalListener</code>. 这个监听器具体实现和属性可参见<code>src/component/axisPointer/globalListener.js</code>。 这里我们先关注暴露出来的 <code>register</code>方法，他接受三个 arguments: <code>function register(key, api, handler)</code>; 所以这里就很好理解了，在初始化阶段，判断 tooltip 的触发条件（triggerOn:’click’ | ‘mousemove’ | ‘none’ ）， 如果不是<code>none</code>， 则 globalListener 给<code>itemTooltip</code> 注册了回调 handler。当 <code>currTrigger</code>是 <code>click</code>或<code>mousemove</code> 时，调用 <code>_tryShow</code> 显示 tooltip，当 leave 时调用 <code>_hide</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _initGlobalListener</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tooltipModel = <span class=\"keyword\">this</span>._tooltipModel;</span><br><span class=\"line\"><span class=\"keyword\">var</span> triggerOn = tooltipModel.get(<span class=\"string\">'triggerOn'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">globalListener.register(</span><br><span class=\"line\">  <span class=\"string\">'itemTooltip'</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._api,</span><br><span class=\"line\">  bind(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currTrigger, e, dispatchAction</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// If 'none', it is not controlled by mouse totally.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (triggerOn !== <span class=\"string\">'none'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (triggerOn.indexOf(currTrigger) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._tryShow(e, dispatchAction);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currTrigger === <span class=\"string\">'leave'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._hide(dispatchAction);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"keyword\">this</span>),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>tryShow 调用后, 我们可以看到这个方法实现非常直观，根据条件来判断显示 series、component 还是 axis 的 tooltip。我们重点关注_showSeriesItemTooltip.</p>\n<p>走到_showSeriesItemTooltip，这个函数声明并计算了一系列的变量，都是为了 function _showTooltipContent 的参数做准备。我们可以看到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._showOrMove(tooltipModel, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._showTooltipContent(</span><br><span class=\"line\">    tooltipModel,</span><br><span class=\"line\">    defaultHtml,</span><br><span class=\"line\">    params,</span><br><span class=\"line\">    asyncTicket,</span><br><span class=\"line\">    e.offsetX,</span><br><span class=\"line\">    e.offsetY,</span><br><span class=\"line\">    e.position,</span><br><span class=\"line\">    e.target,</span><br><span class=\"line\">    markers,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结合 echarts tooltip 的文档和 tooltipModel 来看，我们可以传入一个配置参数 showDelay，如果 delay 大于 0 则 setTimeout，若干秒后执行回调函数，在这里则是显示 toolTip（ _showTooltipContent）；否则立即执行 callback。不过官方文档并不建议设置 delay。 所以我们可以认为_showOrMove 是个定时器，到了时间后显示 tooltip。_showOrMove 实现如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//_showOrMove</span></span><br><span class=\"line\"><span class=\"comment\">// showDelay is used in this case: tooltip.enterable is set</span></span><br><span class=\"line\"><span class=\"comment\">// as true. User intent to move mouse into tooltip and click</span></span><br><span class=\"line\"><span class=\"comment\">// something. `showDelay` makes it easyer to enter the content</span></span><br><span class=\"line\"><span class=\"comment\">// but tooltip do not move immediately.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> delay = tooltipModel.get(<span class=\"string\">'showDelay'</span>);</span><br><span class=\"line\">cb = zrUtil.bind(cb, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">clearTimeout(<span class=\"keyword\">this</span>._showTimout);</span><br><span class=\"line\">delay &gt; <span class=\"number\">0</span> ? (<span class=\"keyword\">this</span>._showTimout = setTimeout(cb, delay)) : cb();</span><br></pre></td></tr></table></figure>\n<p>回到_showTooltipContent， 在这个方法里我们知道了 echarts 如何兼容 formatter，传入 string 和 function 时不同的处理方法。通过 typeof 判断后，如果是 string， 则通过 <code>formatUtil.formatTpl</code> 直接 replace, return 一个 tpl<string>; 如果 typeof 是 function， 则通过 <code>.innerHTML</code> 插入一段新的 string.</string></p>\n<p>关键代码如下, 实现逻辑在这里就不过多关注了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// is string formatTpl</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Template formatter</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; tpl</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Array.&lt;Object&gt;|Object&#125; paramsList</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;boolean&#125; [encode=false]</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatTpl</span>(<span class=\"params\">tpl, paramsList, encode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!zrUtil.isArray(paramsList)) &#123;</span><br><span class=\"line\">    paramsList = [paramsList];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> seriesLen = paramsList.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!seriesLen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $vars = paramsList[<span class=\"number\">0</span>].$vars || [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; $vars.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> alias = TPL_VAR_ALIAS[i];</span><br><span class=\"line\">    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, <span class=\"number\">0</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> seriesIdx = <span class=\"number\">0</span>; seriesIdx &lt; seriesLen; seriesIdx++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; $vars.length; k++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> val = paramsList[seriesIdx][$vars[k]];</span><br><span class=\"line\">      tpl = tpl.replace(</span><br><span class=\"line\">        wrapVar(TPL_VAR_ALIAS[k], seriesIdx),</span><br><span class=\"line\">        encode ? encodeHTML(val) : val,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tpl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// is function, setContent</span></span><br><span class=\"line\">setContent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.el.innerHTML = content == <span class=\"literal\">null</span> ? <span class=\"string\">''</span> : content;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这里插一个题外话， HTML5 规范中表示 <code>&lt;script&gt;</code> tag 中的内容在使用 <code>innerHTML</code> 插入时是不应该被执行的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">\"&lt;script&gt;alert('I am John in an annoying alert!')&lt;/script&gt;\"</span>;</span><br><span class=\"line\"> el.innerHTML = name; <span class=\"comment\">// harmless in this case</span></span><br></pre></td></tr></table></figure>\n<p>但是当不使用 <code>&lt;script&gt;</code> tag 并使用 innerHTML 插入 string 时，则会有 croos-site scripting attact 风险</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">\"&lt;img src='x' onerror='alert(1)'&gt;\"</span>;</span><br><span class=\"line\">el.innerHTML = name; <span class=\"comment\">// shows the alert</span></span><br></pre></td></tr></table></figure>\n<p>基于这个原因，推荐使用 <code>Node.textContent</code> 而不是使用 <code>innerHTML</code></p>\n<p>好了，终于生成了 content，和需要的坐标、参数等，这个时候调用了 _updatePosition. 在_updatePosition 中我们看到 echats 是如何去做当 position 字段传入 string, array 和 function 时的处理方法的。如果对这里感兴趣可以关注一下。 在这个方法的最后，我们看到了对 confine 的判断，如果为 true，则再次调用 confineTooltipPosition, 返回新的 x，y 坐标。然后将 content 移动到新的坐标位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> viewWidth = <span class=\"keyword\">this</span>._api.getWidth();</span><br><span class=\"line\"><span class=\"keyword\">var</span> viewHeight = <span class=\"keyword\">this</span>._api.getHeight();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tooltipModel.get(<span class=\"string\">'confine'</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pos = confineTooltipPosition(x, y, content, viewWidth, viewHeight);</span><br><span class=\"line\">  x = pos[<span class=\"number\">0</span>];</span><br><span class=\"line\">  y = pos[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">content.moveTo(x, y);</span><br></pre></td></tr></table></figure>\n<p>这里看到 echarts 获取可视范围的高宽，是通过封装在内的 _api 内的方法获得。这里涉及到更底层的关于 echarts 调用 zrender 生成 root 绘图容器的过程，基本原理是先获取绘图区域实例，根据该实例再获取高宽。具体过程在此不作赘述。留个记录，有机会再来解析那一部分。具体代码可以参考 <code>zrender/src/Painter.js</code>.</p>\n<p>回到 <code>confineTooltipPosition</code> 方法， 根据前面方法的定义，这里的 x，y 是 e.offsetX 和 e.offsetY. 表示事件发生时鼠标 pointer 到 target node 的 padding 的距离。 而 width 和 height 分别是 clientWidth 和 clientHeight 加上 borderWidth. 通过位置的大小比较，可以保证新的 content 处于可视区域内。第一个 x 判断是否右边溢出，第二个 x 判断是否左边溢出。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">confineTooltipPosition</span>(<span class=\"params\">x, y, content, viewWidth, viewHeight</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> size = content.getOuterSize();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> width = size.width;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> height = size.height;</span><br><span class=\"line\"></span><br><span class=\"line\">  x = <span class=\"built_in\">Math</span>.min(x + width, viewWidth) - width;</span><br><span class=\"line\">  y = <span class=\"built_in\">Math</span>.min(y + height, viewHeight) - height;</span><br><span class=\"line\">  x = <span class=\"built_in\">Math</span>.max(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">  y = <span class=\"built_in\">Math</span>.max(y, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getOuterSize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"keyword\">this</span>.el.clientWidth;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> height = <span class=\"keyword\">this</span>.el.clientHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Consider browser compatibility.</span></span><br><span class=\"line\">    <span class=\"comment\">// IE8 does not support getComputedStyle.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.defaultView &amp;&amp; <span class=\"built_in\">document</span>.defaultView.getComputedStyle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stl = <span class=\"built_in\">document</span>.defaultView.getComputedStyle(<span class=\"keyword\">this</span>.el);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stl) &#123;</span><br><span class=\"line\">            width += <span class=\"built_in\">parseInt</span>(stl.borderLeftWidth, <span class=\"number\">10</span>) + <span class=\"built_in\">parseInt</span>(stl.borderRightWidth, <span class=\"number\">10</span>);</span><br><span class=\"line\">            height += <span class=\"built_in\">parseInt</span>(stl.borderTopWidth, <span class=\"number\">10</span>) + <span class=\"built_in\">parseInt</span>(stl.borderBottomWidth, <span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">width</span>: width, <span class=\"attr\">height</span>: height&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后把 content 移动到新生成的坐标上，至此就完成了 confine 的功能。</p>\n<p>最后说一个看代码的心得，平常在实现一些公共 sdk 时，经常需要暴露一些 api，有的时候看到直接定义的是一个 array，然后调用方使用 <code>array[index]</code> 去获取某个方法。这样的坏处一个是数组的顺序无法保证，增、删之后 index 可能会变，给调用方造成影响。另外一个是，通过 index 获取时，对调用的方法名感知不到，不能确保使用的方法是否正确。 echarts 中的这个实现比较优雅，apiList 和真正暴露使用的 api 对象解耦。通过遍历 apiList， 产生一个包含 apiList 元素为 key 的对象，调用这个对象时，使用函数名，更直观，更友好，值得学习。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> zrUtil <span class=\"keyword\">from</span> <span class=\"string\">'zrender/src/core/util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> echartsAPIList = [</span><br><span class=\"line\">  <span class=\"string\">'getDom'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getZr'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getWidth'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getHeight'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getDevicePixelRatio'</span>,</span><br><span class=\"line\">  <span class=\"string\">'dispatchAction'</span>,</span><br><span class=\"line\">  <span class=\"string\">'isDisposed'</span>,</span><br><span class=\"line\">  <span class=\"string\">'on'</span>,</span><br><span class=\"line\">  <span class=\"string\">'off'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getDataURL'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getConnectedDataURL'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getModel'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getOption'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getViewOfComponentModel'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getViewOfSeriesModel'</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExtensionAPI</span>(<span class=\"params\">chartInstance</span>) </span>&#123;</span><br><span class=\"line\">  zrUtil.each(</span><br><span class=\"line\">    echartsAPIList,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>[name] = zrUtil.bind(chartInstance[name], chartInstance);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ExtensionAPI;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>实现业务需求时发现 tooltip 中呈现的内容比较多，当出现在边界时会出现一部分在可视范围以外。所幸 echarts 提供了一个 confine 配置给 tooltip，当为 true 时，可以强制使 tooltip 出现在 view 视图中。</p>\n<p>接下来来看看源码中是怎样实现 confine 功能的。</p>\n<p>首先可以看到，confine 是在 <code>src/component/tooltip/TooltipModel.js</code> 中定义，默认值是 <code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> echarts.extendComponentModel(&#123;</span><br><span class=\"line\">  type: <span class=\"string\">'tooltip'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  dependencies: [<span class=\"string\">'axisPointer'</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">  defaultOption: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 'trigger' only works on coordinate system.</span></span><br><span class=\"line\">    <span class=\"comment\">// 'item' | 'axis' | 'none'</span></span><br><span class=\"line\">    trigger: <span class=\"string\">'item'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 'click' | 'mousemove' | 'none'</span></span><br><span class=\"line\">    triggerOn: <span class=\"string\">'mousemove|click'</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。</span></span><br><span class=\"line\">    confine: <span class=\"literal\">false</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>接下来，可以看到在同级目录下的 <code>TooltipView.js</code> 文件，这里负责定义了 TooltipView 相关的显示、隐藏、更新位置等的方法。在该文件中搜索 confine，发现相关代码主要是两处，一处是 <code>confineTooltipPosion</code> function，这里很好理解，通过计算当前 x、y 值，和当前的可视范围的宽高 viewWidth, viewHeight 比较，得到 confine 之后新的 x、y 值。 另一处则是调用<code>confineTooltipPosion</code>的 <code>_updatePosition</code> 方法.</p>\n<p>在这里，一共定义了三种 showTooltip 方法，对应不同的对象。分别是 _showAxisTooltip, _showComponentItemTooltip 和 _showSeriesItemTooltip . 我们只关注 series 中 item 的 tooltip， 至于 AxisTooltip 和 ComponentItemTooltip，在原理上基本一致。</p>\n<p>梳理一番之后发现，在该类中，方法的调用链是 <code>confineTooltipPosion</code> -&gt; <code>_updatePosition</code> -&gt; <code>_showTooltipContent</code> -&gt; <code>_showSeriesItemTooltip</code> -&gt; <code>_tryShow</code> -&gt; <code>_initGlobalListener</code> -&gt; <code>render</code>. 执行顺序是从右至左。</p>\n<p>理清了思路，接下来我们来看代码是如何实现 confine 的过程。</p>\n<p>弄清了执行顺序后，就很好理解 tooltip 的渲染过程了。在生命周期 render 函数中，调用了 <code>_initGlobalListener</code>，在该方法中， 可以获取到一个共享的全局监听器 <code>globalListener</code>. 这个监听器具体实现和属性可参见<code>src/component/axisPointer/globalListener.js</code>。 这里我们先关注暴露出来的 <code>register</code>方法，他接受三个 arguments: <code>function register(key, api, handler)</code>; 所以这里就很好理解了，在初始化阶段，判断 tooltip 的触发条件（triggerOn:’click’ | ‘mousemove’ | ‘none’ ）， 如果不是<code>none</code>， 则 globalListener 给<code>itemTooltip</code> 注册了回调 handler。当 <code>currTrigger</code>是 <code>click</code>或<code>mousemove</code> 时，调用 <code>_tryShow</code> 显示 tooltip，当 leave 时调用 <code>_hide</code>。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _initGlobalListener</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> tooltipModel = <span class=\"keyword\">this</span>._tooltipModel;</span><br><span class=\"line\"><span class=\"keyword\">var</span> triggerOn = tooltipModel.get(<span class=\"string\">'triggerOn'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">globalListener.register(</span><br><span class=\"line\">  <span class=\"string\">'itemTooltip'</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._api,</span><br><span class=\"line\">  bind(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currTrigger, e, dispatchAction</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// If 'none', it is not controlled by mouse totally.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (triggerOn !== <span class=\"string\">'none'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (triggerOn.indexOf(currTrigger) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._tryShow(e, dispatchAction);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currTrigger === <span class=\"string\">'leave'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._hide(dispatchAction);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"keyword\">this</span>),</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>tryShow 调用后, 我们可以看到这个方法实现非常直观，根据条件来判断显示 series、component 还是 axis 的 tooltip。我们重点关注_showSeriesItemTooltip.</p>\n<p>走到_showSeriesItemTooltip，这个函数声明并计算了一系列的变量，都是为了 function _showTooltipContent 的参数做准备。我们可以看到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._showOrMove(tooltipModel, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>._showTooltipContent(</span><br><span class=\"line\">    tooltipModel,</span><br><span class=\"line\">    defaultHtml,</span><br><span class=\"line\">    params,</span><br><span class=\"line\">    asyncTicket,</span><br><span class=\"line\">    e.offsetX,</span><br><span class=\"line\">    e.offsetY,</span><br><span class=\"line\">    e.position,</span><br><span class=\"line\">    e.target,</span><br><span class=\"line\">    markers,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>结合 echarts tooltip 的文档和 tooltipModel 来看，我们可以传入一个配置参数 showDelay，如果 delay 大于 0 则 setTimeout，若干秒后执行回调函数，在这里则是显示 toolTip（ _showTooltipContent）；否则立即执行 callback。不过官方文档并不建议设置 delay。 所以我们可以认为_showOrMove 是个定时器，到了时间后显示 tooltip。_showOrMove 实现如下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//_showOrMove</span></span><br><span class=\"line\"><span class=\"comment\">// showDelay is used in this case: tooltip.enterable is set</span></span><br><span class=\"line\"><span class=\"comment\">// as true. User intent to move mouse into tooltip and click</span></span><br><span class=\"line\"><span class=\"comment\">// something. `showDelay` makes it easyer to enter the content</span></span><br><span class=\"line\"><span class=\"comment\">// but tooltip do not move immediately.</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> delay = tooltipModel.get(<span class=\"string\">'showDelay'</span>);</span><br><span class=\"line\">cb = zrUtil.bind(cb, <span class=\"keyword\">this</span>);</span><br><span class=\"line\">clearTimeout(<span class=\"keyword\">this</span>._showTimout);</span><br><span class=\"line\">delay &gt; <span class=\"number\">0</span> ? (<span class=\"keyword\">this</span>._showTimout = setTimeout(cb, delay)) : cb();</span><br></pre></td></tr></table></figure>\n<p>回到_showTooltipContent， 在这个方法里我们知道了 echarts 如何兼容 formatter，传入 string 和 function 时不同的处理方法。通过 typeof 判断后，如果是 string， 则通过 <code>formatUtil.formatTpl</code> 直接 replace, return 一个 tpl<string>; 如果 typeof 是 function， 则通过 <code>.innerHTML</code> 插入一段新的 string.</string></p>\n<p>关键代码如下, 实现逻辑在这里就不过多关注了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// is string formatTpl</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Template formatter</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;string&#125; tpl</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Array.&lt;Object&gt;|Object&#125; paramsList</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;boolean&#125; [encode=false]</span></span><br><span class=\"line\"><span class=\"comment\"> * @return &#123;string&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatTpl</span>(<span class=\"params\">tpl, paramsList, encode</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!zrUtil.isArray(paramsList)) &#123;</span><br><span class=\"line\">    paramsList = [paramsList];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> seriesLen = paramsList.length;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!seriesLen) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> $vars = paramsList[<span class=\"number\">0</span>].$vars || [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; $vars.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> alias = TPL_VAR_ALIAS[i];</span><br><span class=\"line\">    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, <span class=\"number\">0</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> seriesIdx = <span class=\"number\">0</span>; seriesIdx &lt; seriesLen; seriesIdx++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = <span class=\"number\">0</span>; k &lt; $vars.length; k++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> val = paramsList[seriesIdx][$vars[k]];</span><br><span class=\"line\">      tpl = tpl.replace(</span><br><span class=\"line\">        wrapVar(TPL_VAR_ALIAS[k], seriesIdx),</span><br><span class=\"line\">        encode ? encodeHTML(val) : val,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tpl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// is function, setContent</span></span><br><span class=\"line\">setContent: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">content</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.el.innerHTML = content == <span class=\"literal\">null</span> ? <span class=\"string\">''</span> : content;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>这里插一个题外话， HTML5 规范中表示 <code>&lt;script&gt;</code> tag 中的内容在使用 <code>innerHTML</code> 插入时是不应该被执行的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">\"&lt;script&gt;alert('I am John in an annoying alert!')&lt;/script&gt;\"</span>;</span><br><span class=\"line\"> el.innerHTML = name; <span class=\"comment\">// harmless in this case</span></span><br></pre></td></tr></table></figure>\n<p>但是当不使用 <code>&lt;script&gt;</code> tag 并使用 innerHTML 插入 string 时，则会有 croos-site scripting attact 风险</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">\"&lt;img src='x' onerror='alert(1)'&gt;\"</span>;</span><br><span class=\"line\">el.innerHTML = name; <span class=\"comment\">// shows the alert</span></span><br></pre></td></tr></table></figure>\n<p>基于这个原因，推荐使用 <code>Node.textContent</code> 而不是使用 <code>innerHTML</code></p>\n<p>好了，终于生成了 content，和需要的坐标、参数等，这个时候调用了 _updatePosition. 在_updatePosition 中我们看到 echats 是如何去做当 position 字段传入 string, array 和 function 时的处理方法的。如果对这里感兴趣可以关注一下。 在这个方法的最后，我们看到了对 confine 的判断，如果为 true，则再次调用 confineTooltipPosition, 返回新的 x，y 坐标。然后将 content 移动到新的坐标位置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> viewWidth = <span class=\"keyword\">this</span>._api.getWidth();</span><br><span class=\"line\"><span class=\"keyword\">var</span> viewHeight = <span class=\"keyword\">this</span>._api.getHeight();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tooltipModel.get(<span class=\"string\">'confine'</span>)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> pos = confineTooltipPosition(x, y, content, viewWidth, viewHeight);</span><br><span class=\"line\">  x = pos[<span class=\"number\">0</span>];</span><br><span class=\"line\">  y = pos[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">content.moveTo(x, y);</span><br></pre></td></tr></table></figure>\n<p>这里看到 echarts 获取可视范围的高宽，是通过封装在内的 _api 内的方法获得。这里涉及到更底层的关于 echarts 调用 zrender 生成 root 绘图容器的过程，基本原理是先获取绘图区域实例，根据该实例再获取高宽。具体过程在此不作赘述。留个记录，有机会再来解析那一部分。具体代码可以参考 <code>zrender/src/Painter.js</code>.</p>\n<p>回到 <code>confineTooltipPosition</code> 方法， 根据前面方法的定义，这里的 x，y 是 e.offsetX 和 e.offsetY. 表示事件发生时鼠标 pointer 到 target node 的 padding 的距离。 而 width 和 height 分别是 clientWidth 和 clientHeight 加上 borderWidth. 通过位置的大小比较，可以保证新的 content 处于可视区域内。第一个 x 判断是否右边溢出，第二个 x 判断是否左边溢出。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">confineTooltipPosition</span>(<span class=\"params\">x, y, content, viewWidth, viewHeight</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> size = content.getOuterSize();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> width = size.width;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> height = size.height;</span><br><span class=\"line\"></span><br><span class=\"line\">  x = <span class=\"built_in\">Math</span>.min(x + width, viewWidth) - width;</span><br><span class=\"line\">  y = <span class=\"built_in\">Math</span>.min(y + height, viewHeight) - height;</span><br><span class=\"line\">  x = <span class=\"built_in\">Math</span>.max(x, <span class=\"number\">0</span>);</span><br><span class=\"line\">  y = <span class=\"built_in\">Math</span>.max(y, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getOuterSize: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"keyword\">this</span>.el.clientWidth;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> height = <span class=\"keyword\">this</span>.el.clientHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Consider browser compatibility.</span></span><br><span class=\"line\">    <span class=\"comment\">// IE8 does not support getComputedStyle.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">document</span>.defaultView &amp;&amp; <span class=\"built_in\">document</span>.defaultView.getComputedStyle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> stl = <span class=\"built_in\">document</span>.defaultView.getComputedStyle(<span class=\"keyword\">this</span>.el);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stl) &#123;</span><br><span class=\"line\">            width += <span class=\"built_in\">parseInt</span>(stl.borderLeftWidth, <span class=\"number\">10</span>) + <span class=\"built_in\">parseInt</span>(stl.borderRightWidth, <span class=\"number\">10</span>);</span><br><span class=\"line\">            height += <span class=\"built_in\">parseInt</span>(stl.borderTopWidth, <span class=\"number\">10</span>) + <span class=\"built_in\">parseInt</span>(stl.borderBottomWidth, <span class=\"number\">10</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">width</span>: width, <span class=\"attr\">height</span>: height&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后把 content 移动到新生成的坐标上，至此就完成了 confine 的功能。</p>\n<p>最后说一个看代码的心得，平常在实现一些公共 sdk 时，经常需要暴露一些 api，有的时候看到直接定义的是一个 array，然后调用方使用 <code>array[index]</code> 去获取某个方法。这样的坏处一个是数组的顺序无法保证，增、删之后 index 可能会变，给调用方造成影响。另外一个是，通过 index 获取时，对调用的方法名感知不到，不能确保使用的方法是否正确。 echarts 中的这个实现比较优雅，apiList 和真正暴露使用的 api 对象解耦。通过遍历 apiList， 产生一个包含 apiList 元素为 key 的对象，调用这个对象时，使用函数名，更直观，更友好，值得学习。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> zrUtil <span class=\"keyword\">from</span> <span class=\"string\">'zrender/src/core/util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> echartsAPIList = [</span><br><span class=\"line\">  <span class=\"string\">'getDom'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getZr'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getWidth'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getHeight'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getDevicePixelRatio'</span>,</span><br><span class=\"line\">  <span class=\"string\">'dispatchAction'</span>,</span><br><span class=\"line\">  <span class=\"string\">'isDisposed'</span>,</span><br><span class=\"line\">  <span class=\"string\">'on'</span>,</span><br><span class=\"line\">  <span class=\"string\">'off'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getDataURL'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getConnectedDataURL'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getModel'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getOption'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getViewOfComponentModel'</span>,</span><br><span class=\"line\">  <span class=\"string\">'getViewOfSeriesModel'</span>,</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"comment\">// And `getCoordinateSystems` and `getComponentByElement` will be injected in echarts.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ExtensionAPI</span>(<span class=\"params\">chartInstance</span>) </span>&#123;</span><br><span class=\"line\">  zrUtil.each(</span><br><span class=\"line\">    echartsAPIList,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>[name] = zrUtil.bind(chartInstance[name], chartInstance);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">this</span>,</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ExtensionAPI;</span><br></pre></td></tr></table></figure>\n"},{"title":"Promise vs Observables","abbrlink":"24019ac5","date":"2019-01-27T09:37:04.000Z","_content":"\n## Difference\n\n* Single value vs multiple values\n* Eager vs lazy\n* Not cancellable vs cancellable\n* Multicast vs either unicast or multicast\n* Always asynchronous vs possibly asynchronous\n\n## Single value vs multiple values\n\n```js\n// promise\nconst numberPromise = new Promise((resolve) => {\n    resolve(5);\n    resolve(10);\n});\n\n// prints only 5\nnumberPromise.then(value => console.log(value));\n\n// observable\nconst numberObservable = new Observable((observer) => {\n    observer.next(5);\n    observer.next(10);\n});\n\n// prints 5 and 10\nnumberObservable.subscribe(value => console.log(value));\n```\n\nWrapping `setInterval` in Observable: \n\n```js\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n});\n\nsecondsObservable.subscribe(value => console.log(value));\n// logs:\n// 0\n// 1\n// 2\n// and so on, every second\n```\n\n## Eager vs lazy\n\nFor `Promise`, the `executor` function is executed immediately by the Promise implementation, passing `resolve` and `reject` functions.\n\nFor `Observable`, functions passed to `Observable` constructor gets called only when someone actually subscribe to an Observable.\n\n```js\n// promise print immediately\nconst promise = new Promise(() => {\n    console.log('I was called!');\n});\n\nconst observable = new Observable(() => {\n    console.log('I was called!');\n});\n// nothing happens here\n\nobservable.subscribe();\n// just now \"I was called!\" gets printed\n\n\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n});\n```\n\nThanks to laziness, `setInterval` is not called at this point and even `i` variable is not initiated.\n\n## Not cancellable vs cancellable\n\nES6 promise do not support `cancel` method. Some Promise libraries like Bluebird support `cancel` method.\n\n```js\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    const token = setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n  \n    return () => clearInterval(token);\n});\n\nconst subscription = \n    secondsObservable.subscribe(value => console.log(value));\n\nsubscription.unsubscribe();\n```\n\n`subscribe` doesn’t return Observable! This means you cannot chain several subscribe calls like you would chain `then` calls in Promises. `subscribe` returns a Subscription for given Observable. This Subscription has only one method  -- `unsubscribe`  -- which you can call, when you decide you don’t want to listen to certain Observable anymore.\n\n## Multicast vs either unicast or multicast\n\nPromises (because of their eager nature) are always “multicast”. Function passed to Promise constructor is called only when Promise is created and never again (unless you create brand new Promise with that function of course). \n\n```js\n\nconst waitOneSecondPromise = new Promise((resolve) => {\n    console.log('I was called!');\n    setTimeout(() => resolve(), 1000);\n});\n\nwaitOneSecondPromise.then(doSomething);\n\n// 500ms passes\n\nwaitOneSecondPromise.then(doSomethingElse);\n// the console will print only once, and doSomethingElse will be called after only half second.\n\n```\n\nThat person would naturally expect doSomethingElse to be called exactly one second from the moment it was passed to then, but in that case it would be called after half a second.\n\n```js\nconst waitOneSecondObservable = new Observable((observer) => {\n    console.log('I was called');\n  \n    setTimeout(() => observer.next(), 1000);\n});\n\nwaitOneSecondObservable.subscribe(doSomething);\n\n// 500 ms\n\nwaitOneSecondObservable.subscribe(doSomethingElse)\n```\n\nHere every call to `subscribe` will start it’s own clock. Both doSomething and doSomethingElse functions will be called one second from the moment they were passed to `subscribe`. If you look in the console, you will see `\"I was called!\"` printed to console twice, which shows that function passed to `Observable` constructor was indeed called twice and two instances of `setTimeout` timer were created.\n\n\nBy using `share` operator, you can make the `Observable` perform only once and then share between subscribers.\n\n```js\nconst sharedWaitOneSecondObservable =\n    waitOneSecondObservable.share();\n\nsharedWaitOneSecondObservable.subscribe(doSomething);\n\n// 500 ms passes\n\nsharedWaitOneSecondObservable.subscribe(doSomethingElse);\n```\n\nIf Observable shares a result between many subscribers, we say it is “multicast”, since it casts single value to multiple entities.\n\n## Always asynchronous vs possibly asynchronous\n\nPromise is asynchronous even we call `resolve` synchronously.\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(5);\n});\n\npromise.then(value => console.log(value + '!'));\n\nconsole.log('And now we are here.');\n```\n\nFirst `\"And now we are here.\"` is logged and just then `\"5!\"`\n\nObservable may emit values synchronously.\n\n```js\nconst observable = new Observable((observer) => {\n    observer.next(5);\n});\n\nobservable.subscribe(value => console.log(value + '!'));\n\nconsole.log('And now we are here.');\n```\n\n`\"5!\"` appears first and just then we see `\"And now we are here.\"`.\n\n## Reference\n\n1. [promises-vs-observables](https://medium.com/@mpodlasin/promises-vs-observables-4c123c51fe13)\n","source":"_posts/promise-vs-observables.md","raw":"---\ntitle: Promise vs Observables\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - promise\n  - Observables\n  - subscription\n  - subscribe\nabbrlink: 24019ac5\ndate: 2019-01-27 01:37:04\n---\n\n## Difference\n\n* Single value vs multiple values\n* Eager vs lazy\n* Not cancellable vs cancellable\n* Multicast vs either unicast or multicast\n* Always asynchronous vs possibly asynchronous\n\n## Single value vs multiple values\n\n```js\n// promise\nconst numberPromise = new Promise((resolve) => {\n    resolve(5);\n    resolve(10);\n});\n\n// prints only 5\nnumberPromise.then(value => console.log(value));\n\n// observable\nconst numberObservable = new Observable((observer) => {\n    observer.next(5);\n    observer.next(10);\n});\n\n// prints 5 and 10\nnumberObservable.subscribe(value => console.log(value));\n```\n\nWrapping `setInterval` in Observable: \n\n```js\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n});\n\nsecondsObservable.subscribe(value => console.log(value));\n// logs:\n// 0\n// 1\n// 2\n// and so on, every second\n```\n\n## Eager vs lazy\n\nFor `Promise`, the `executor` function is executed immediately by the Promise implementation, passing `resolve` and `reject` functions.\n\nFor `Observable`, functions passed to `Observable` constructor gets called only when someone actually subscribe to an Observable.\n\n```js\n// promise print immediately\nconst promise = new Promise(() => {\n    console.log('I was called!');\n});\n\nconst observable = new Observable(() => {\n    console.log('I was called!');\n});\n// nothing happens here\n\nobservable.subscribe();\n// just now \"I was called!\" gets printed\n\n\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n});\n```\n\nThanks to laziness, `setInterval` is not called at this point and even `i` variable is not initiated.\n\n## Not cancellable vs cancellable\n\nES6 promise do not support `cancel` method. Some Promise libraries like Bluebird support `cancel` method.\n\n```js\nconst secondsObservable = new Observable((observer) => {\n    let i = 0;\n    const token = setInterval(() => {\n        observer.next(i++);\n    }, 1000);\n  \n    return () => clearInterval(token);\n});\n\nconst subscription = \n    secondsObservable.subscribe(value => console.log(value));\n\nsubscription.unsubscribe();\n```\n\n`subscribe` doesn’t return Observable! This means you cannot chain several subscribe calls like you would chain `then` calls in Promises. `subscribe` returns a Subscription for given Observable. This Subscription has only one method  -- `unsubscribe`  -- which you can call, when you decide you don’t want to listen to certain Observable anymore.\n\n## Multicast vs either unicast or multicast\n\nPromises (because of their eager nature) are always “multicast”. Function passed to Promise constructor is called only when Promise is created and never again (unless you create brand new Promise with that function of course). \n\n```js\n\nconst waitOneSecondPromise = new Promise((resolve) => {\n    console.log('I was called!');\n    setTimeout(() => resolve(), 1000);\n});\n\nwaitOneSecondPromise.then(doSomething);\n\n// 500ms passes\n\nwaitOneSecondPromise.then(doSomethingElse);\n// the console will print only once, and doSomethingElse will be called after only half second.\n\n```\n\nThat person would naturally expect doSomethingElse to be called exactly one second from the moment it was passed to then, but in that case it would be called after half a second.\n\n```js\nconst waitOneSecondObservable = new Observable((observer) => {\n    console.log('I was called');\n  \n    setTimeout(() => observer.next(), 1000);\n});\n\nwaitOneSecondObservable.subscribe(doSomething);\n\n// 500 ms\n\nwaitOneSecondObservable.subscribe(doSomethingElse)\n```\n\nHere every call to `subscribe` will start it’s own clock. Both doSomething and doSomethingElse functions will be called one second from the moment they were passed to `subscribe`. If you look in the console, you will see `\"I was called!\"` printed to console twice, which shows that function passed to `Observable` constructor was indeed called twice and two instances of `setTimeout` timer were created.\n\n\nBy using `share` operator, you can make the `Observable` perform only once and then share between subscribers.\n\n```js\nconst sharedWaitOneSecondObservable =\n    waitOneSecondObservable.share();\n\nsharedWaitOneSecondObservable.subscribe(doSomething);\n\n// 500 ms passes\n\nsharedWaitOneSecondObservable.subscribe(doSomethingElse);\n```\n\nIf Observable shares a result between many subscribers, we say it is “multicast”, since it casts single value to multiple entities.\n\n## Always asynchronous vs possibly asynchronous\n\nPromise is asynchronous even we call `resolve` synchronously.\n\n```js\nconst promise = new Promise((resolve) => {\n    resolve(5);\n});\n\npromise.then(value => console.log(value + '!'));\n\nconsole.log('And now we are here.');\n```\n\nFirst `\"And now we are here.\"` is logged and just then `\"5!\"`\n\nObservable may emit values synchronously.\n\n```js\nconst observable = new Observable((observer) => {\n    observer.next(5);\n});\n\nobservable.subscribe(value => console.log(value + '!'));\n\nconsole.log('And now we are here.');\n```\n\n`\"5!\"` appears first and just then we see `\"And now we are here.\"`.\n\n## Reference\n\n1. [promises-vs-observables](https://medium.com/@mpodlasin/promises-vs-observables-4c123c51fe13)\n","slug":"promise-vs-observables","published":1,"updated":"2019-11-15T09:39:12.472Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8pirmmp000mf5s6hr8x3lj0","content":"<h2 id=\"Difference\"><a href=\"#Difference\" class=\"headerlink\" title=\"Difference\"></a>Difference</h2><ul>\n<li>Single value vs multiple values</li>\n<li>Eager vs lazy</li>\n<li>Not cancellable vs cancellable</li>\n<li>Multicast vs either unicast or multicast</li>\n<li>Always asynchronous vs possibly asynchronous</li>\n</ul>\n<h2 id=\"Single-value-vs-multiple-values\"><a href=\"#Single-value-vs-multiple-values\" class=\"headerlink\" title=\"Single value vs multiple values\"></a>Single value vs multiple values</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numberPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">5</span>);</span><br><span class=\"line\">    resolve(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints only 5</span></span><br><span class=\"line\">numberPromise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// observable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numberObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.next(<span class=\"number\">5</span>);</span><br><span class=\"line\">    observer.next(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints 5 and 10</span></span><br><span class=\"line\">numberObservable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br></pre></td></tr></table></figure>\n<p>Wrapping <code>setInterval</code> in Observable: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">secondsObservable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"><span class=\"comment\">// logs:</span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// and so on, every second</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Eager-vs-lazy\"><a href=\"#Eager-vs-lazy\" class=\"headerlink\" title=\"Eager vs lazy\"></a>Eager vs lazy</h2><p>For <code>Promise</code>, the <code>executor</code> function is executed immediately by the Promise implementation, passing <code>resolve</code> and <code>reject</code> functions.</p>\n<p>For <code>Observable</code>, functions passed to <code>Observable</code> constructor gets called only when someone actually subscribe to an Observable.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise print immediately</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// nothing happens here</span></span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe();</span><br><span class=\"line\"><span class=\"comment\">// just now \"I was called!\" gets printed</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Thanks to laziness, <code>setInterval</code> is not called at this point and even <code>i</code> variable is not initiated.</p>\n<h2 id=\"Not-cancellable-vs-cancellable\"><a href=\"#Not-cancellable-vs-cancellable\" class=\"headerlink\" title=\"Not cancellable vs cancellable\"></a>Not cancellable vs cancellable</h2><p>ES6 promise do not support <code>cancel</code> method. Some Promise libraries like Bluebird support <code>cancel</code> method.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> clearInterval(token);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> subscription = </span><br><span class=\"line\">    secondsObservable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"></span><br><span class=\"line\">subscription.unsubscribe();</span><br></pre></td></tr></table></figure>\n<p><code>subscribe</code> doesn’t return Observable! This means you cannot chain several subscribe calls like you would chain <code>then</code> calls in Promises. <code>subscribe</code> returns a Subscription for given Observable. This Subscription has only one method  – <code>unsubscribe</code>  – which you can call, when you decide you don’t want to listen to certain Observable anymore.</p>\n<h2 id=\"Multicast-vs-either-unicast-or-multicast\"><a href=\"#Multicast-vs-either-unicast-or-multicast\" class=\"headerlink\" title=\"Multicast vs either unicast or multicast\"></a>Multicast vs either unicast or multicast</h2><p>Promises (because of their eager nature) are always “multicast”. Function passed to Promise constructor is called only when Promise is created and never again (unless you create brand new Promise with that function of course). </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> waitOneSecondPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called!'</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.then(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500ms passes</span></span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.then(doSomethingElse);</span><br><span class=\"line\"><span class=\"comment\">// the console will print only once, and doSomethingElse will be called after only half second.</span></span><br></pre></td></tr></table></figure>\n<p>That person would naturally expect doSomethingElse to be called exactly one second from the moment it was passed to then, but in that case it would be called after half a second.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> waitOneSecondObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called'</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> observer.next(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.subscribe(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500 ms</span></span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.subscribe(doSomethingElse)</span><br></pre></td></tr></table></figure>\n<p>Here every call to <code>subscribe</code> will start it’s own clock. Both doSomething and doSomethingElse functions will be called one second from the moment they were passed to <code>subscribe</code>. If you look in the console, you will see <code>&quot;I was called!&quot;</code> printed to console twice, which shows that function passed to <code>Observable</code> constructor was indeed called twice and two instances of <code>setTimeout</code> timer were created.</p>\n<p>By using <code>share</code> operator, you can make the <code>Observable</code> perform only once and then share between subscribers.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sharedWaitOneSecondObservable =</span><br><span class=\"line\">    waitOneSecondObservable.share();</span><br><span class=\"line\"></span><br><span class=\"line\">sharedWaitOneSecondObservable.subscribe(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500 ms passes</span></span><br><span class=\"line\"></span><br><span class=\"line\">sharedWaitOneSecondObservable.subscribe(doSomethingElse);</span><br></pre></td></tr></table></figure>\n<p>If Observable shares a result between many subscribers, we say it is “multicast”, since it casts single value to multiple entities.</p>\n<h2 id=\"Always-asynchronous-vs-possibly-asynchronous\"><a href=\"#Always-asynchronous-vs-possibly-asynchronous\" class=\"headerlink\" title=\"Always asynchronous vs possibly asynchronous\"></a>Always asynchronous vs possibly asynchronous</h2><p>Promise is asynchronous even we call <code>resolve</code> synchronously.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value + <span class=\"string\">'!'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'And now we are here.'</span>);</span><br></pre></td></tr></table></figure>\n<p>First <code>&quot;And now we are here.&quot;</code> is logged and just then <code>&quot;5!&quot;</code></p>\n<p>Observable may emit values synchronously.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.next(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value + <span class=\"string\">'!'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'And now we are here.'</span>);</span><br></pre></td></tr></table></figure>\n<p><code>&quot;5!&quot;</code> appears first and just then we see <code>&quot;And now we are here.&quot;</code>.</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://medium.com/@mpodlasin/promises-vs-observables-4c123c51fe13\" target=\"_blank\" rel=\"noopener\">promises-vs-observables</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Difference\"><a href=\"#Difference\" class=\"headerlink\" title=\"Difference\"></a>Difference</h2><ul>\n<li>Single value vs multiple values</li>\n<li>Eager vs lazy</li>\n<li>Not cancellable vs cancellable</li>\n<li>Multicast vs either unicast or multicast</li>\n<li>Always asynchronous vs possibly asynchronous</li>\n</ul>\n<h2 id=\"Single-value-vs-multiple-values\"><a href=\"#Single-value-vs-multiple-values\" class=\"headerlink\" title=\"Single value vs multiple values\"></a>Single value vs multiple values</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numberPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">5</span>);</span><br><span class=\"line\">    resolve(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints only 5</span></span><br><span class=\"line\">numberPromise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// observable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> numberObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.next(<span class=\"number\">5</span>);</span><br><span class=\"line\">    observer.next(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// prints 5 and 10</span></span><br><span class=\"line\">numberObservable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br></pre></td></tr></table></figure>\n<p>Wrapping <code>setInterval</code> in Observable: </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">secondsObservable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"><span class=\"comment\">// logs:</span></span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// and so on, every second</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Eager-vs-lazy\"><a href=\"#Eager-vs-lazy\" class=\"headerlink\" title=\"Eager vs lazy\"></a>Eager vs lazy</h2><p>For <code>Promise</code>, the <code>executor</code> function is executed immediately by the Promise implementation, passing <code>resolve</code> and <code>reject</code> functions.</p>\n<p>For <code>Observable</code>, functions passed to <code>Observable</code> constructor gets called only when someone actually subscribe to an Observable.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// promise print immediately</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> Observable(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called!'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// nothing happens here</span></span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe();</span><br><span class=\"line\"><span class=\"comment\">// just now \"I was called!\" gets printed</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Thanks to laziness, <code>setInterval</code> is not called at this point and even <code>i</code> variable is not initiated.</p>\n<h2 id=\"Not-cancellable-vs-cancellable\"><a href=\"#Not-cancellable-vs-cancellable\" class=\"headerlink\" title=\"Not cancellable vs cancellable\"></a>Not cancellable vs cancellable</h2><p>ES6 promise do not support <code>cancel</code> method. Some Promise libraries like Bluebird support <code>cancel</code> method.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> secondsObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> token = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        observer.next(i++);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> clearInterval(token);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> subscription = </span><br><span class=\"line\">    secondsObservable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value));</span><br><span class=\"line\"></span><br><span class=\"line\">subscription.unsubscribe();</span><br></pre></td></tr></table></figure>\n<p><code>subscribe</code> doesn’t return Observable! This means you cannot chain several subscribe calls like you would chain <code>then</code> calls in Promises. <code>subscribe</code> returns a Subscription for given Observable. This Subscription has only one method  – <code>unsubscribe</code>  – which you can call, when you decide you don’t want to listen to certain Observable anymore.</p>\n<h2 id=\"Multicast-vs-either-unicast-or-multicast\"><a href=\"#Multicast-vs-either-unicast-or-multicast\" class=\"headerlink\" title=\"Multicast vs either unicast or multicast\"></a>Multicast vs either unicast or multicast</h2><p>Promises (because of their eager nature) are always “multicast”. Function passed to Promise constructor is called only when Promise is created and never again (unless you create brand new Promise with that function of course). </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> waitOneSecondPromise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called!'</span>);</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> resolve(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.then(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500ms passes</span></span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondPromise.then(doSomethingElse);</span><br><span class=\"line\"><span class=\"comment\">// the console will print only once, and doSomethingElse will be called after only half second.</span></span><br></pre></td></tr></table></figure>\n<p>That person would naturally expect doSomethingElse to be called exactly one second from the moment it was passed to then, but in that case it would be called after half a second.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> waitOneSecondObservable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called'</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> observer.next(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.subscribe(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500 ms</span></span><br><span class=\"line\"></span><br><span class=\"line\">waitOneSecondObservable.subscribe(doSomethingElse)</span><br></pre></td></tr></table></figure>\n<p>Here every call to <code>subscribe</code> will start it’s own clock. Both doSomething and doSomethingElse functions will be called one second from the moment they were passed to <code>subscribe</code>. If you look in the console, you will see <code>&quot;I was called!&quot;</code> printed to console twice, which shows that function passed to <code>Observable</code> constructor was indeed called twice and two instances of <code>setTimeout</code> timer were created.</p>\n<p>By using <code>share</code> operator, you can make the <code>Observable</code> perform only once and then share between subscribers.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> sharedWaitOneSecondObservable =</span><br><span class=\"line\">    waitOneSecondObservable.share();</span><br><span class=\"line\"></span><br><span class=\"line\">sharedWaitOneSecondObservable.subscribe(doSomething);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 500 ms passes</span></span><br><span class=\"line\"></span><br><span class=\"line\">sharedWaitOneSecondObservable.subscribe(doSomethingElse);</span><br></pre></td></tr></table></figure>\n<p>If Observable shares a result between many subscribers, we say it is “multicast”, since it casts single value to multiple entities.</p>\n<h2 id=\"Always-asynchronous-vs-possibly-asynchronous\"><a href=\"#Always-asynchronous-vs-possibly-asynchronous\" class=\"headerlink\" title=\"Always asynchronous vs possibly asynchronous\"></a>Always asynchronous vs possibly asynchronous</h2><p>Promise is asynchronous even we call <code>resolve</code> synchronously.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value + <span class=\"string\">'!'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'And now we are here.'</span>);</span><br></pre></td></tr></table></figure>\n<p>First <code>&quot;And now we are here.&quot;</code> is logged and just then <code>&quot;5!&quot;</code></p>\n<p>Observable may emit values synchronously.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> observable = <span class=\"keyword\">new</span> Observable(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    observer.next(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">observable.subscribe(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> <span class=\"built_in\">console</span>.log(value + <span class=\"string\">'!'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'And now we are here.'</span>);</span><br></pre></td></tr></table></figure>\n<p><code>&quot;5!&quot;</code> appears first and just then we see <code>&quot;And now we are here.&quot;</code>.</p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ol>\n<li><a href=\"https://medium.com/@mpodlasin/promises-vs-observables-4c123c51fe13\" target=\"_blank\" rel=\"noopener\">promises-vs-observables</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck8pirmlu0001f5s6pk8esrq7","category_id":"ck8pirmmw000nf5s6dnhdhf5j","_id":"ck8pirmob002rf5s6p0ksi9sk"},{"post_id":"ck8pirmm20003f5s6vgr40a0w","category_id":"ck8pirmmw000nf5s6dnhdhf5j","_id":"ck8pirmob002tf5s64lz0zulh"},{"post_id":"ck8pirmm40005f5s6e30rklvl","category_id":"ck8pirmn8000rf5s6j7x06saw","_id":"ck8pirmob002vf5s6txp03fd2"},{"post_id":"ck8pirmm60006f5s6z6afyhoc","category_id":"ck8pirmnc000tf5s68ck59i82","_id":"ck8pirmob002xf5s6ueryddfn"},{"post_id":"ck8pirmm70007f5s6b70pvdab","category_id":"ck8pirmnc000tf5s68ck59i82","_id":"ck8pirmoc002zf5s6dopi1a5n"},{"post_id":"ck8pirmm80008f5s69kzr9rbi","category_id":"ck8pirmnc000tf5s68ck59i82","_id":"ck8pirmoc0031f5s6m5ki4wu7"},{"post_id":"ck8pirmm80009f5s6zw17bqhv","category_id":"ck8pirmmw000nf5s6dnhdhf5j","_id":"ck8pirmoc0033f5s6hbqqia8m"},{"post_id":"ck8pirmm9000af5s64w3p1wlb","category_id":"ck8pirmnc000tf5s68ck59i82","_id":"ck8pirmoc0035f5s6rtsaxpss"},{"post_id":"ck8pirmmb000bf5s65u1e98xk","category_id":"ck8pirmn8000rf5s6j7x06saw","_id":"ck8pirmoc0037f5s6ms0f23z6"},{"post_id":"ck8pirmmg000cf5s6w2ndmmry","category_id":"ck8pirmnc000tf5s68ck59i82","_id":"ck8pirmoc0039f5s6lfw59brl"},{"post_id":"ck8pirmmh000df5s6295mp7l4","category_id":"ck8pirmmw000nf5s6dnhdhf5j","_id":"ck8pirmod003bf5s6ov00j50p"},{"post_id":"ck8pirmmi000ef5s6pqbe5h1d","category_id":"ck8pirmnc000tf5s68ck59i82","_id":"ck8pirmoe003df5s65jyqqtse"},{"post_id":"ck8pirmmj000ff5s600ocz47n","category_id":"ck8pirmmw000nf5s6dnhdhf5j","_id":"ck8pirmoe003ff5s68r5hd5qa"},{"post_id":"ck8pirmmk000gf5s6hg210h1v","category_id":"ck8pirmnc000tf5s68ck59i82","_id":"ck8pirmoe003hf5s6j97058ux"},{"post_id":"ck8pirmml000hf5s64jnq0jw1","category_id":"ck8pirmmw000nf5s6dnhdhf5j","_id":"ck8pirmoe003jf5s66irv26h2"},{"post_id":"ck8pirmmm000if5s6rqae5cky","category_id":"ck8pirmnn001gf5s6rx6naxdi","_id":"ck8pirmoe003lf5s69n1p03s3"},{"post_id":"ck8pirmmn000jf5s6mcy6xg9f","category_id":"ck8pirmmw000nf5s6dnhdhf5j","_id":"ck8pirmoe003nf5s62u4bmlxc"},{"post_id":"ck8pirmmn000kf5s66iiy021o","category_id":"ck8pirmnc000tf5s68ck59i82","_id":"ck8pirmoe003pf5s6dkwglc1k"},{"post_id":"ck8pirmmo000lf5s6riyr6t98","category_id":"ck8pirmnc000tf5s68ck59i82","_id":"ck8pirmof003rf5s6yi24u0ag"},{"post_id":"ck8pirmmp000mf5s6hr8x3lj0","category_id":"ck8pirmnc000tf5s68ck59i82","_id":"ck8pirmof003tf5s6e2gig32i"}],"PostTag":[{"post_id":"ck8pirmm20003f5s6vgr40a0w","tag_id":"ck8pirmn6000of5s6r01kpcju","_id":"ck8pirmob002qf5s69yp30bq5"},{"post_id":"ck8pirmm40005f5s6e30rklvl","tag_id":"ck8pirmn7000qf5s6qm4lfhcy","_id":"ck8pirmob002sf5s6wdiem33h"},{"post_id":"ck8pirmm40005f5s6e30rklvl","tag_id":"ck8pirmn9000sf5s6ugqv3bjv","_id":"ck8pirmob002uf5s6ijg9fqra"},{"post_id":"ck8pirmm40005f5s6e30rklvl","tag_id":"ck8pirmnd000uf5s6mkhuxb8o","_id":"ck8pirmob002wf5s6mttcwpkl"},{"post_id":"ck8pirmm60006f5s6z6afyhoc","tag_id":"ck8pirmng000wf5s6g51z83vo","_id":"ck8pirmoc002yf5s68ku96y40"},{"post_id":"ck8pirmm60006f5s6z6afyhoc","tag_id":"ck8pirmnh000yf5s6ndkkklmm","_id":"ck8pirmoc0030f5s64qq4v2om"},{"post_id":"ck8pirmm60006f5s6z6afyhoc","tag_id":"ck8pirmni0010f5s6lahiglcl","_id":"ck8pirmoc0032f5s6ykukz4hg"},{"post_id":"ck8pirmm60006f5s6z6afyhoc","tag_id":"ck8pirmnj0012f5s65b4fl2xa","_id":"ck8pirmoc0034f5s6h79c3361"},{"post_id":"ck8pirmm70007f5s6b70pvdab","tag_id":"ck8pirmnj0014f5s6uzs2asrd","_id":"ck8pirmoc0036f5s6sm32slif"},{"post_id":"ck8pirmm70007f5s6b70pvdab","tag_id":"ck8pirmnk0016f5s6l2lc9rx4","_id":"ck8pirmoc0038f5s67kltmtw3"},{"post_id":"ck8pirmm70007f5s6b70pvdab","tag_id":"ck8pirmnk0018f5s6v6p3y4k5","_id":"ck8pirmod003af5s6hp369jho"},{"post_id":"ck8pirmm70007f5s6b70pvdab","tag_id":"ck8pirmnl001bf5s6lxjjpiak","_id":"ck8pirmoe003cf5s66sebc47d"},{"post_id":"ck8pirmm80008f5s69kzr9rbi","tag_id":"ck8pirmnj0014f5s6uzs2asrd","_id":"ck8pirmoe003ef5s695obr1fx"},{"post_id":"ck8pirmm80008f5s69kzr9rbi","tag_id":"ck8pirmnk0016f5s6l2lc9rx4","_id":"ck8pirmoe003gf5s6cp5frhh3"},{"post_id":"ck8pirmm80008f5s69kzr9rbi","tag_id":"ck8pirmnn001hf5s6gmcwg901","_id":"ck8pirmoe003if5s64gwns0i9"},{"post_id":"ck8pirmm80008f5s69kzr9rbi","tag_id":"ck8pirmno001jf5s6tayzmzub","_id":"ck8pirmoe003kf5s6m2s1f1w1"},{"post_id":"ck8pirmm80008f5s69kzr9rbi","tag_id":"ck8pirmnp001lf5s67mf08f9x","_id":"ck8pirmoe003mf5s6nnl10m08"},{"post_id":"ck8pirmm80008f5s69kzr9rbi","tag_id":"ck8pirmnr001nf5s6g9euziyf","_id":"ck8pirmoe003of5s6tvckdvir"},{"post_id":"ck8pirmm80008f5s69kzr9rbi","tag_id":"ck8pirmns001pf5s6u9dor406","_id":"ck8pirmoe003qf5s67kf4peg2"},{"post_id":"ck8pirmm9000af5s64w3p1wlb","tag_id":"ck8pirmns001qf5s6y9da6kfe","_id":"ck8pirmof003sf5s6z5jkqrf1"},{"post_id":"ck8pirmm9000af5s64w3p1wlb","tag_id":"ck8pirmnt001rf5s66d8x3i48","_id":"ck8pirmof003uf5s674d733tu"},{"post_id":"ck8pirmm9000af5s64w3p1wlb","tag_id":"ck8pirmnt001sf5s6ylhquenn","_id":"ck8pirmof003vf5s69gbswaav"},{"post_id":"ck8pirmmb000bf5s65u1e98xk","tag_id":"ck8pirmnj0012f5s65b4fl2xa","_id":"ck8pirmof003wf5s65b9shukl"},{"post_id":"ck8pirmmb000bf5s65u1e98xk","tag_id":"ck8pirmnu001uf5s6wre5sxy2","_id":"ck8pirmof003xf5s6fz2a5vid"},{"post_id":"ck8pirmmb000bf5s65u1e98xk","tag_id":"ck8pirmnu001vf5s67dono5kl","_id":"ck8pirmog003yf5s6ut11lxd7"},{"post_id":"ck8pirmmg000cf5s6w2ndmmry","tag_id":"ck8pirmnj0014f5s6uzs2asrd","_id":"ck8pirmog003zf5s61dvsylf8"},{"post_id":"ck8pirmmg000cf5s6w2ndmmry","tag_id":"ck8pirmnk0016f5s6l2lc9rx4","_id":"ck8pirmog0040f5s6xa4q8aw0"},{"post_id":"ck8pirmmg000cf5s6w2ndmmry","tag_id":"ck8pirmnw001yf5s6d04q2sse","_id":"ck8pirmog0041f5s64fkno4hx"},{"post_id":"ck8pirmmh000df5s6295mp7l4","tag_id":"ck8pirmny001zf5s6yo1bvq0e","_id":"ck8pirmog0042f5s6mk8mps80"},{"post_id":"ck8pirmmh000df5s6295mp7l4","tag_id":"ck8pirmny0020f5s6yrvhyn5w","_id":"ck8pirmog0043f5s6ixr4ewyl"},{"post_id":"ck8pirmmh000df5s6295mp7l4","tag_id":"ck8pirmnj0012f5s65b4fl2xa","_id":"ck8pirmog0044f5s6i2xmmfx8"},{"post_id":"ck8pirmmi000ef5s6pqbe5h1d","tag_id":"ck8pirmny0022f5s625y5jxbz","_id":"ck8pirmoh0045f5s6vutw5ryg"},{"post_id":"ck8pirmmi000ef5s6pqbe5h1d","tag_id":"ck8pirmnz0023f5s6i3x4cvv7","_id":"ck8pirmoh0046f5s60nq12084"},{"post_id":"ck8pirmmk000gf5s6hg210h1v","tag_id":"ck8pirmo00024f5s63utanoyy","_id":"ck8pirmoh0047f5s67r018aua"},{"post_id":"ck8pirmmk000gf5s6hg210h1v","tag_id":"ck8pirmo00025f5s6t41ncsih","_id":"ck8pirmoh0048f5s6tlo21u2f"},{"post_id":"ck8pirmmk000gf5s6hg210h1v","tag_id":"ck8pirmo00026f5s6vaf1ltpu","_id":"ck8pirmoh0049f5s6l4s9tien"},{"post_id":"ck8pirmmk000gf5s6hg210h1v","tag_id":"ck8pirmo10027f5s6dq3mx1p4","_id":"ck8pirmoh004af5s6bkif9gsr"},{"post_id":"ck8pirmmk000gf5s6hg210h1v","tag_id":"ck8pirmnj0012f5s65b4fl2xa","_id":"ck8pirmoi004bf5s6reh7sstl"},{"post_id":"ck8pirmmm000if5s6rqae5cky","tag_id":"ck8pirmnj0012f5s65b4fl2xa","_id":"ck8pirmoi004cf5s62mkvykl8"},{"post_id":"ck8pirmmm000if5s6rqae5cky","tag_id":"ck8pirmo2002af5s6pek3ugqy","_id":"ck8pirmoi004df5s61yxfrs3n"},{"post_id":"ck8pirmmm000if5s6rqae5cky","tag_id":"ck8pirmo2002bf5s6lc9yhxpg","_id":"ck8pirmoi004ef5s6fo5jb90z"},{"post_id":"ck8pirmmn000kf5s66iiy021o","tag_id":"ck8pirmo2002cf5s6ahhxryrj","_id":"ck8pirmoi004ff5s65k3m79t6"},{"post_id":"ck8pirmmn000kf5s66iiy021o","tag_id":"ck8pirmo2002df5s6eoqv699j","_id":"ck8pirmoi004gf5s61spmotny"},{"post_id":"ck8pirmmn000kf5s66iiy021o","tag_id":"ck8pirmo2002ef5s682z9mbem","_id":"ck8pirmoi004hf5s6ge5y7qvz"},{"post_id":"ck8pirmmn000kf5s66iiy021o","tag_id":"ck8pirmnj0012f5s65b4fl2xa","_id":"ck8pirmoi004if5s6g50hevqy"},{"post_id":"ck8pirmmo000lf5s6riyr6t98","tag_id":"ck8pirmo3002gf5s6xm0l1q0f","_id":"ck8pirmoi004jf5s6ma353jmg"},{"post_id":"ck8pirmmo000lf5s6riyr6t98","tag_id":"ck8pirmo3002hf5s6kes0l9s9","_id":"ck8pirmoi004kf5s688cnxr5r"},{"post_id":"ck8pirmmo000lf5s6riyr6t98","tag_id":"ck8pirmo4002if5s68akcptcx","_id":"ck8pirmoi004lf5s6smecjle2"},{"post_id":"ck8pirmmo000lf5s6riyr6t98","tag_id":"ck8pirmo4002jf5s647gb059d","_id":"ck8pirmoi004mf5s6gs0g3ppm"},{"post_id":"ck8pirmmp000mf5s6hr8x3lj0","tag_id":"ck8pirmnj0014f5s6uzs2asrd","_id":"ck8pirmoi004nf5s6euz53jeo"},{"post_id":"ck8pirmmp000mf5s6hr8x3lj0","tag_id":"ck8pirmnk0016f5s6l2lc9rx4","_id":"ck8pirmoi004of5s6xo3vglim"},{"post_id":"ck8pirmmp000mf5s6hr8x3lj0","tag_id":"ck8pirmo6002mf5s6rgua2in6","_id":"ck8pirmoi004pf5s6h39d8io7"},{"post_id":"ck8pirmmp000mf5s6hr8x3lj0","tag_id":"ck8pirmo6002nf5s6a4a4f2rl","_id":"ck8pirmoi004qf5s6nfcm4v02"},{"post_id":"ck8pirmmp000mf5s6hr8x3lj0","tag_id":"ck8pirmo6002of5s6b3xhouxz","_id":"ck8pirmoj004rf5s61172au1h"},{"post_id":"ck8pirmmp000mf5s6hr8x3lj0","tag_id":"ck8pirmo7002pf5s69v918e5t","_id":"ck8pirmoj004sf5s67ofbwef3"}],"Tag":[{"name":"resolution","_id":"ck8pirmn6000of5s6r01kpcju"},{"name":"hexo","_id":"ck8pirmn7000qf5s6qm4lfhcy"},{"name":"blog","_id":"ck8pirmn9000sf5s6ugqv3bjv"},{"name":"github","_id":"ck8pirmnd000uf5s6mkhuxb8o"},{"name":"ECMAScript2016","_id":"ck8pirmng000wf5s6g51z83vo"},{"name":"es7","_id":"ck8pirmnh000yf5s6ndkkklmm"},{"name":"decorator","_id":"ck8pirmni0010f5s6lahiglcl"},{"name":"javascript","_id":"ck8pirmnj0012f5s65b4fl2xa"},{"name":"ECMAScript2015","_id":"ck8pirmnj0014f5s6uzs2asrd"},{"name":"es6","_id":"ck8pirmnk0016f5s6l2lc9rx4"},{"name":"iterators","_id":"ck8pirmnk0018f5s6v6p3y4k5"},{"name":"generators","_id":"ck8pirmnl001bf5s6lxjjpiak"},{"name":"var","_id":"ck8pirmnn001hf5s6gmcwg901"},{"name":"let","_id":"ck8pirmno001jf5s6tayzmzub"},{"name":"const","_id":"ck8pirmnp001lf5s67mf08f9x"},{"name":"block binding","_id":"ck8pirmnr001nf5s6g9euziyf"},{"name":"hoisting","_id":"ck8pirmns001pf5s6u9dor406"},{"name":"react","_id":"ck8pirmns001qf5s6y9da6kfe"},{"name":"react native","_id":"ck8pirmnt001rf5s66d8x3i48"},{"name":"Xcode","_id":"ck8pirmnt001sf5s6ylhquenn"},{"name":"setTimeout","_id":"ck8pirmnu001uf5s6wre5sxy2"},{"name":"setInterval","_id":"ck8pirmnu001vf5s67dono5kl"},{"name":"module","_id":"ck8pirmnw001yf5s6d04q2sse"},{"name":"books","_id":"ck8pirmny001zf5s6yo1bvq0e"},{"name":"reading","_id":"ck8pirmny0020f5s6yrvhyn5w"},{"name":"Flutter","_id":"ck8pirmny0022f5s625y5jxbz"},{"name":"setup","_id":"ck8pirmnz0023f5s6i3x4cvv7"},{"name":"window","_id":"ck8pirmo00024f5s63utanoyy"},{"name":"events","_id":"ck8pirmo00025f5s6t41ncsih"},{"name":"capture/bubbling","_id":"ck8pirmo00026f5s6vaf1ltpu"},{"name":"delegate","_id":"ck8pirmo10027f5s6dq3mx1p4"},{"name":"leetcode","_id":"ck8pirmo2002af5s6pek3ugqy"},{"name":"algorithm","_id":"ck8pirmo2002bf5s6lc9yhxpg"},{"name":"nodejs","_id":"ck8pirmo2002cf5s6ahhxryrj"},{"name":"modules","_id":"ck8pirmo2002df5s6eoqv699j"},{"name":"exports","_id":"ck8pirmo2002ef5s682z9mbem"},{"name":"echarts","_id":"ck8pirmo3002gf5s6xm0l1q0f"},{"name":"zrender","_id":"ck8pirmo3002hf5s6kes0l9s9"},{"name":"tooltip","_id":"ck8pirmo4002if5s68akcptcx"},{"name":"confine","_id":"ck8pirmo4002jf5s647gb059d"},{"name":"promise","_id":"ck8pirmo6002mf5s6rgua2in6"},{"name":"Observables","_id":"ck8pirmo6002nf5s6a4a4f2rl"},{"name":"subscription","_id":"ck8pirmo6002of5s6b3xhouxz"},{"name":"subscribe","_id":"ck8pirmo7002pf5s69v918e5t"}]}}