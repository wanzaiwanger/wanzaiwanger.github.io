{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/anatole/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo@2x.png","path":"images/logo@2x.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/mylogo.png","path":"images/mylogo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"969c2ecce672fd58f8b2f4974155fe296c8cd02d","modified":1521234199967},{"_id":"themes/anatole/LICENSE","hash":"013aeea58737aaf555e4487dab17f06286597c3d","modified":1521234199968},{"_id":"themes/anatole/README.md","hash":"8e51a41de2ce148db91c3ef60987bc2d2f4ec5d7","modified":1521234199968},{"_id":"themes/anatole/_config.yml","hash":"a339f2c8570ad0525f95c22d52e4b2e4e764d7eb","modified":1521234199968},{"_id":"source/_posts/how-to-disable-copy-paste-for-input.md","hash":"3a1292dcc63b8e4ac328c696e86a82f18d5936f2","modified":1521234199967},{"_id":"source/_posts/Run-react-native-app-on-Mac.md","hash":"5870b4b777f8297b91ef75ddeff2225f910344a7","modified":1521928876000},{"_id":"source/_posts/Build-a-Personal-Blog-With-Hexo.md","hash":"40a65335a2e38bdc07b77f82537c2a8e1ee76eea","modified":1523836373000},{"_id":"source/_posts/Iterators-and-generators.md","hash":"664a02d7a07be52ad24c43074e2b70682a8f6a3c","modified":1525162841313},{"_id":"source/_posts/learn-events.md","hash":"5b31aa7f3db9c9250ee93d388f8977fcf4750972","modified":1524538110000},{"_id":"source/about/index.md","hash":"958d3ff4b741fea54d261ed54ae087e4baaa189e","modified":1521234199967},{"_id":"source/_posts/learn-es6-modules.md","hash":"12f99d83fde9a18b6ef8ce08c9bbb4e94d60423d","modified":1523147632000},{"_id":"source/categories/index.md","hash":"2029d39cc68b2fc09655d126cfc51374bba153ff","modified":1521234199967},{"_id":"source/tags/index.md","hash":"771e3964b6e5ce39dcb5adb87be4c17b9783f632","modified":1521234199967},{"_id":"themes/anatole/layout/mixins.jade","hash":"9e503038ba6d48aa955d64bd08e9cb9819028300","modified":1521234199969},{"_id":"themes/anatole/layout/archive.jade","hash":"6e306d07c90e89089bc7cbab0a1ca6f5cdd09ffa","modified":1521234199968},{"_id":"themes/anatole/layout/category.jade","hash":"a39c7e5bfbef271031e357089eca11a8644da6b6","modified":1521234199968},{"_id":"themes/anatole/layout/index.jade","hash":"53da3cfd498951148acb33de1574df80ae282dc5","modified":1521234199968},{"_id":"themes/anatole/layout/page.jade","hash":"300e3fa98fd7cb2627589d3555ab4863cfeedd0c","modified":1521234199969},{"_id":"themes/anatole/layout/post.jade","hash":"0b830bf13f3c82a936fa44c687b3911606cd8bec","modified":1521234199970},{"_id":"themes/anatole/layout/tag.jade","hash":"30a27b53dafb363740f1e8fd98da55e1d2eaadae","modified":1521234199970},{"_id":"themes/anatole/layout/partial/layout.jade","hash":"b4bea3d8235cca77c7338870a1bb322a0c662ad4","modified":1521234199969},{"_id":"themes/anatole/layout/partial/head.jade","hash":"ce41cecb8ce53fc1e8dd17c4c98b9c87993627b7","modified":1521234199969},{"_id":"themes/anatole/layout/partial/comments.jade","hash":"ee43e2fa9bed77868f2340435e455a3e647428df","modified":1521234199969},{"_id":"themes/anatole/layout/partial/footer.jade","hash":"c56236746b7456c12899b9005015e9f8849db0ec","modified":1521234199969},{"_id":"themes/anatole/layout/partial/nav.jade","hash":"8f529f1576a90c191b1795818324810beb825858","modified":1521234199969},{"_id":"themes/anatole/layout/partial/sidebar.jade","hash":"b4aa4289b4a8cbfbb207e733fe1a02c86ebeed7c","modified":1521234199969},{"_id":"themes/anatole/source/css/custom.css","hash":"1099f8cd8ad1605bbd791a64cefdf3b21f965fad","modified":1521234199970},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"f69b5eb4c6463f1f0481a4ecfe878c7ee0b9b835","modified":1521234199970},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1521234199970},{"_id":"themes/anatole/source/css/style.css","hash":"7b707391c77a6e63aaade7a293783940e70b5421","modified":1521234199970},{"_id":"themes/anatole/source/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1521234199971},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1521234199971},{"_id":"themes/anatole/source/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1521234199972},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1521234199972},{"_id":"themes/anatole/source/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1521234199973},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1521234199975},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1521234199973},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1521234199975},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1521234199972},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1521234199972},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1521234199976},{"_id":"themes/anatole/source/images/mylogo.png","hash":"bb12c3110592128245b8202eae6ddcb2acba7e5f","modified":1521234199975},{"_id":"source/_posts/Learn-ES6-Block-Binding.md","hash":"e48a009f853726d53a538e2f6edf628f9c021655","modified":1525331469360}],"Category":[{"name":"web","_id":"cjgq6iql60004b86tfbkkcspj"},{"name":"tech","_id":"cjgq6iqlh000fb86tveod2d0i"}],"Data":[],"Page":[{"title":"about","date":"2017-04-08T10:23:22.000Z","_content":"This is about page.\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-08 03:23:22\n---\nThis is about page.\n","updated":"2018-03-16T21:03:19.967Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjgq6iql40001b86tlbkb1mcm","content":"<p>This is about page.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is about page.</p>\n"},{"title":"categories","date":"2017-04-10T07:03:14.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-04-10 00:03:14\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-03-16T21:03:19.967Z","path":"categories/index.html","layout":"page","_id":"cjgq6iql60003b86tm5dqqoue","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-04-10T07:03:21.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-10 00:03:21\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-03-16T21:03:19.967Z","path":"tags/index.html","layout":"page","_id":"cjgq6iqla0007b86t3881vb8i","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"How to disable copy/paste/cut for input fields","date":"2018-03-16T20:34:18.000Z","_content":"\nStop user copy paste for this input field.\n\n```html\n<input type=\"text\" onselectstart=\"return false\" onpaste=\"return false;\" onCopy=\"return false\" onCut=\"return false\" onDrag=\"return false\" onDrop=\"return false\" autocomplete=off/>\n```\n","source":"_posts/how-to-disable-copy-paste-for-input.md","raw":"---\ntitle: How to disable copy/paste/cut for input fields\ndate: 2018-03-16 13:34:18\ncategories:\n- web\ntags:\n- html\n---\n\nStop user copy paste for this input field.\n\n```html\n<input type=\"text\" onselectstart=\"return false\" onpaste=\"return false;\" onCopy=\"return false\" onCut=\"return false\" onDrag=\"return false\" onDrop=\"return false\" autocomplete=off/>\n```\n","slug":"how-to-disable-copy-paste-for-input","published":1,"updated":"2018-03-16T21:03:19.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgq6iql10000b86twcqk51ss","content":"<p>Stop user copy paste for this input field.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">onselectstart</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onpaste</span>=<span class=\"string\">\"return false;\"</span> <span class=\"attr\">onCopy</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onCut</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onDrag</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onDrop</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">off/</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Stop user copy paste for this input field.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">onselectstart</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onpaste</span>=<span class=\"string\">\"return false;\"</span> <span class=\"attr\">onCopy</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onCut</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onDrag</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onDrop</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">off/</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Run React Native App on Mac","date":"2018-02-05T09:05:04.000Z","_content":"\n1. make sure installed LATEST xcode on your mac. Be make sure check your app store to upgrade your xcode to latest version.\n2. install homebrew or nvm, so you can install node and manage your nodejs version.\n3. install nodejs and npm\n4. install watchman\n5. install react native cli such as `react-native-cli`\n6. create your react native project using `react-native init <project-name>`\n\nAfter installing these tools, use `react-native run-ios` to start your simulator.\n\nAnd in case if you met this error code when you run `react-native run-ios [--simulator=\"iPhone X\"]`\n\n```shell\nFound Xcode project TestProject.xcodeproj\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n\nCommand failed: xcrun instruments -s\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n```\n\nthis is because you did not set your xcode's command line tools, so your can go to `preference -> locations -> Command Line Tools` to select.\n\n![xcode command line tools](http://ww1.sinaimg.cn/large/71dc9500ly1fo5oy30mhdj21eo0w646p.jpg)\n","source":"_posts/Run-react-native-app-on-Mac.md","raw":"---\ntitle: Run React Native App on Mac\ndate: 2018-02-05 01:05:04\ncategories:\n- web\ntags:\n- react\n- react native\n- xcode\n---\n\n1. make sure installed LATEST xcode on your mac. Be make sure check your app store to upgrade your xcode to latest version.\n2. install homebrew or nvm, so you can install node and manage your nodejs version.\n3. install nodejs and npm\n4. install watchman\n5. install react native cli such as `react-native-cli`\n6. create your react native project using `react-native init <project-name>`\n\nAfter installing these tools, use `react-native run-ios` to start your simulator.\n\nAnd in case if you met this error code when you run `react-native run-ios [--simulator=\"iPhone X\"]`\n\n```shell\nFound Xcode project TestProject.xcodeproj\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n\nCommand failed: xcrun instruments -s\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n```\n\nthis is because you did not set your xcode's command line tools, so your can go to `preference -> locations -> Command Line Tools` to select.\n\n![xcode command line tools](http://ww1.sinaimg.cn/large/71dc9500ly1fo5oy30mhdj21eo0w646p.jpg)\n","slug":"Run-react-native-app-on-Mac","published":1,"updated":"2018-03-24T22:01:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgq6iql40002b86t4zsiw9gt","content":"<ol>\n<li>make sure installed LATEST xcode on your mac. Be make sure check your app store to upgrade your xcode to latest version.</li>\n<li>install homebrew or nvm, so you can install node and manage your nodejs version.</li>\n<li>install nodejs and npm</li>\n<li>install watchman</li>\n<li>install react native cli such as <code>react-native-cli</code></li>\n<li>create your react native project using <code>react-native init &lt;project-name&gt;</code></li>\n</ol>\n<p>After installing these tools, use <code>react-native run-ios</code> to start your simulator.</p>\n<p>And in case if you met this error code when you run <code>react-native run-ios [--simulator=&quot;iPhone X&quot;]</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found Xcode project TestProject.xcodeproj</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br><span class=\"line\"></span><br><span class=\"line\">Command failed: xcrun instruments -s</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br></pre></td></tr></table></figure>\n<p>this is because you did not set your xcode’s command line tools, so your can go to <code>preference -&gt; locations -&gt; Command Line Tools</code> to select.</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/71dc9500ly1fo5oy30mhdj21eo0w646p.jpg\" alt=\"xcode command line tools\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>make sure installed LATEST xcode on your mac. Be make sure check your app store to upgrade your xcode to latest version.</li>\n<li>install homebrew or nvm, so you can install node and manage your nodejs version.</li>\n<li>install nodejs and npm</li>\n<li>install watchman</li>\n<li>install react native cli such as <code>react-native-cli</code></li>\n<li>create your react native project using <code>react-native init &lt;project-name&gt;</code></li>\n</ol>\n<p>After installing these tools, use <code>react-native run-ios</code> to start your simulator.</p>\n<p>And in case if you met this error code when you run <code>react-native run-ios [--simulator=&quot;iPhone X&quot;]</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found Xcode project TestProject.xcodeproj</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br><span class=\"line\"></span><br><span class=\"line\">Command failed: xcrun instruments -s</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br></pre></td></tr></table></figure>\n<p>this is because you did not set your xcode’s command line tools, so your can go to <code>preference -&gt; locations -&gt; Command Line Tools</code> to select.</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/71dc9500ly1fo5oy30mhdj21eo0w646p.jpg\" alt=\"xcode command line tools\"></p>\n"},{"title":"Build a Personal Blog With Hexo","date":"2017-04-10T05:50:50.000Z","_content":"\nAfter spending serveral nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easizer to handle as a developer. Hence I'm going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.\n\nBefore we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.\n\nThis article has five sections as follows:\n\n* Install Hexo\n* Deploy on Github\n* Add new layouts\n* Decorate with new Theme\n* Add Busuanzi & Disqus & Google Analytics\n\n## Install Hexo\n\n```bash\n$ npm install hexo-cli -g\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\nAfter the npm installation, you can now run the server:\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\nAt this time, go to `localhost:4000`, and you should see your blog now has a \"Hello World\" article with default theme.\n\n## Deploy on Github\n\nYou can follow [Github Pages](https://pages.github.com/) to create a repo in your github. After that, you can `git clone` with your https or ssh url to your local.\nThen back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:\n\n```bash\n$ npm install hexo-deployer-git --save\n```\n\nThen update the `_config.yaml` file by adding these code in the bottom:\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: <your blog repo ssh or https url>\n  branch: master\n```\n\nAt this time, we can deploy the source code to the github repo:\n\n```bash\n$ hexo deploy\n```\n\n**TIP**: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:\n\n```bash\n$ hexo clean\n```\n\nThis command will clean the cache file (`db.json`) and generate files (`public`).\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\nNow, you can take a look at your blog in your browser.\n\n## Add new layouts\n\n```bash\nhexo new post <title>\n```\n\nif met this fatal error, try install `hexo-deployer-git` again.\n\n```bash\nError: fatal: in unpopulated submodule '.deploy_git'\n```\n\n```bash\nnpm install hexo-deployer-git –save\nrm -rf .deploy_git\nhexo g\nhexo d\nhexo clean\n```\n","source":"_posts/Build-a-Personal-Blog-With-Hexo.md","raw":"---\ntitle: Build a Personal Blog With Hexo\ncategories: \n- tech\ntags: \n- hexo\n- blog\n- github\ndate: 2017-04-09 22:50:50\n---\n\nAfter spending serveral nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easizer to handle as a developer. Hence I'm going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.\n\nBefore we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.\n\nThis article has five sections as follows:\n\n* Install Hexo\n* Deploy on Github\n* Add new layouts\n* Decorate with new Theme\n* Add Busuanzi & Disqus & Google Analytics\n\n## Install Hexo\n\n```bash\n$ npm install hexo-cli -g\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\nAfter the npm installation, you can now run the server:\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\nAt this time, go to `localhost:4000`, and you should see your blog now has a \"Hello World\" article with default theme.\n\n## Deploy on Github\n\nYou can follow [Github Pages](https://pages.github.com/) to create a repo in your github. After that, you can `git clone` with your https or ssh url to your local.\nThen back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:\n\n```bash\n$ npm install hexo-deployer-git --save\n```\n\nThen update the `_config.yaml` file by adding these code in the bottom:\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: <your blog repo ssh or https url>\n  branch: master\n```\n\nAt this time, we can deploy the source code to the github repo:\n\n```bash\n$ hexo deploy\n```\n\n**TIP**: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:\n\n```bash\n$ hexo clean\n```\n\nThis command will clean the cache file (`db.json`) and generate files (`public`).\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\nNow, you can take a look at your blog in your browser.\n\n## Add new layouts\n\n```bash\nhexo new post <title>\n```\n\nif met this fatal error, try install `hexo-deployer-git` again.\n\n```bash\nError: fatal: in unpopulated submodule '.deploy_git'\n```\n\n```bash\nnpm install hexo-deployer-git –save\nrm -rf .deploy_git\nhexo g\nhexo d\nhexo clean\n```\n","slug":"Build-a-Personal-Blog-With-Hexo","published":1,"updated":"2018-04-15T23:52:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgq6iql90006b86t2mkwcy7n","content":"<p>After spending serveral nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easizer to handle as a developer. Hence I’m going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.</p>\n<p>Before we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.</p>\n<p>This article has five sections as follows:</p>\n<ul>\n<li>Install Hexo</li>\n<li>Deploy on Github</li>\n<li>Add new layouts</li>\n<li>Decorate with new Theme</li>\n<li>Add Busuanzi &amp; Disqus &amp; Google Analytics</li>\n</ul>\n<h2 id=\"Install-Hexo\"><a href=\"#Install-Hexo\" class=\"headerlink\" title=\"Install Hexo\"></a>Install Hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>After the npm installation, you can now run the server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<p>At this time, go to <code>localhost:4000</code>, and you should see your blog now has a “Hello World” article with default theme.</p>\n<h2 id=\"Deploy-on-Github\"><a href=\"#Deploy-on-Github\" class=\"headerlink\" title=\"Deploy on Github\"></a>Deploy on Github</h2><p>You can follow <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a> to create a repo in your github. After that, you can <code>git clone</code> with your https or ssh url to your local.<br>Then back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>Then update the <code>_config.yaml</code> file by adding these code in the bottom:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;your blog repo ssh or https url&gt;</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>At this time, we can deploy the source code to the github repo:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p><strong>TIP</strong>: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>This command will clean the cache file (<code>db.json</code>) and generate files (<code>public</code>).</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p>Now, you can take a look at your blog in your browser.</p>\n<h2 id=\"Add-new-layouts\"><a href=\"#Add-new-layouts\" class=\"headerlink\" title=\"Add new layouts\"></a>Add new layouts</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>if met this fatal error, try install <code>hexo-deployer-git</code> again.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">'.deploy_git'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git –save</span><br><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>After spending serveral nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easizer to handle as a developer. Hence I’m going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.</p>\n<p>Before we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.</p>\n<p>This article has five sections as follows:</p>\n<ul>\n<li>Install Hexo</li>\n<li>Deploy on Github</li>\n<li>Add new layouts</li>\n<li>Decorate with new Theme</li>\n<li>Add Busuanzi &amp; Disqus &amp; Google Analytics</li>\n</ul>\n<h2 id=\"Install-Hexo\"><a href=\"#Install-Hexo\" class=\"headerlink\" title=\"Install Hexo\"></a>Install Hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>After the npm installation, you can now run the server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<p>At this time, go to <code>localhost:4000</code>, and you should see your blog now has a “Hello World” article with default theme.</p>\n<h2 id=\"Deploy-on-Github\"><a href=\"#Deploy-on-Github\" class=\"headerlink\" title=\"Deploy on Github\"></a>Deploy on Github</h2><p>You can follow <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a> to create a repo in your github. After that, you can <code>git clone</code> with your https or ssh url to your local.<br>Then back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>Then update the <code>_config.yaml</code> file by adding these code in the bottom:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;your blog repo ssh or https url&gt;</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>At this time, we can deploy the source code to the github repo:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p><strong>TIP</strong>: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>This command will clean the cache file (<code>db.json</code>) and generate files (<code>public</code>).</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p>Now, you can take a look at your blog in your browser.</p>\n<h2 id=\"Add-new-layouts\"><a href=\"#Add-new-layouts\" class=\"headerlink\" title=\"Add new layouts\"></a>Add new layouts</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>if met this fatal error, try install <code>hexo-deployer-git</code> again.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">'.deploy_git'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git –save</span><br><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n"},{"title":"Iterators and generators","date":"2018-05-01T08:19:28.000Z","_content":"\n# Iterators and Generators\n\n## Iterators\n\nIterators are objects with a specific interface designed for iteration.\n\nIn JavaScript an iterator is an object that provides a `next()` method which returns the next item in the sequence. This method returns an object with two properties: `done` and `value`.\n\nBelow is an implementation of iterator in ES5.\n\n```js\nfunction createIterator(items) {\n  var i = 0;\n  return {\n    next: function() {\n      var done = i >= items.length;\n      var value = !done ? items[i++] : undefined;\n\n      return {\n        done: done,\n        value: value,\n      };\n    },\n  };\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { done: false, value: 1 }\nconsole.log(iterator.next()); // { done: false, value: 2 }\nconsole.log(iterator.next()); // { done: false, value: 3 }\nconsole.log(iterator.next()); // { done: true, value: undefined }\n```\n\n## Generators\n\nA generator is a function that returns an iterator. Generator functions are indicated by an asterisk (_) after the `function` key word and use the `yield` keyword. It doesn't matter how many whitespace between `function` and `_`. On MDN, the`_`is right next to`function`, however in Zakas's book, the`_` is just before the function name.\n\nGenerators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\n\n> you can use `yield` only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.\n\n```js\n// method 1: function declaration\nfunction* createIterator1(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n}\n\n// method 2: function expression\nlet createIterator2 = function*(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n};\n\nconst iterator = createIterator2([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n> create an arrow function that is also a generator is not possible.\n\n### Generator Object Method\n\nSince generators are just functions. You can add generators to objects.\n\n```js\n// method 1: es5 style object literal\nlet obj1 = {\n  createIterator: function*(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\n// method 2: es6 shorthand\nlet obj2 = {\n  *createIterator(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\nconst iterator = obj2.createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n## Iterable and for-of loops\n\n`iterable protocol`: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a `for..of` construct.\n\nAn iterable is an object with a `Symbol.iterator` property.\n\nThese are iterables:\n\n* Arrays and TypedArrays\n* Maps\n* Sets\n* Strings\n* `arguments`\n* DOM Elements `NodeList`\n\n> All iterators created by generators are also iterables, because generators assign the `Symbol.iterator` property by default.\n\n### Accessing the default Iterator\n\n```js\nlet values = [1, 2, 3];\n\n// same process happens behind the scene when using for-of loop\nlet iterator = values[Symbol.iterator]();\n\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\n\n// check\nfunction isIterable(object) {\n  return typeof object[Symbol.iterator] === 'function';\n}\n\nconsole.log(isIterable([1, 2, 3])); // true\nconsole.log(isIterable('Hello')); // true\nconsole.log(isIterable(new Map())); // true\nconsole.log(isIterable(new Set())); // true\nconsole.log(isIterable(new WeakMap())); // false\nconsole.log(isIterable(new WeakSet())); // false\n```\n\n### Creating Iterator\n\n```js\nlet collection = {\n  items: [],\n  *[Symbol.iterator]() {\n    for (let item of this.items) {\n      yield item;\n    }\n  },\n};\n\ncollection.items.push(1);\ncollection.items.push(2);\ncollection.items.push(3);\n\nfor (let x of collection) {\n  console.log(x);\n}\n\n// 1\n// 2\n// 3\n```\n\n## Built-in Iterators\n\n### collection iterators\n\n* `entries()`\n* `values()`\n* `keys()`\n\n#### `entries()`\n\n* array: [index, value]\n* set: [value, value]\n* map: [key, value]\n\n#### `values()`\n\n* array: value\n* set: value\n* map: value\n\n#### `keys()`\n\n* array: index\n* set: value\n* map: key\n\n### Default Iterators for Collection Types\n\n* array: `values()`\n* set: `values()`\n* map: `entries()`\n\n```js\n// destructuring and for-of loop\nlet data = new Map();\n\ndata.set('title', 'Understanding ECMAScript 6');\ndata.set('format', 'ebook');\n\n// same as using data.entries()\nfor (let [key, value] of data) {\n  console.log(key + '=' + value);\n}\n```\n\n* NodeList\n\n```js\nvar divs = document.getElementsByTagName('div');\n\nfor (let div of divs) {\n  console.log(div.id);\n}\n```\n\n## Constructs accept iterables\n\nSome other constructs in JS that use iterables are:\n\n* `for-of`\n* Destructuring of Arrays\n* The spread operator (`…`)\n* `Promise.all` and `Promise.race` accept iterables over Promises.\n* Maps and Sets\n\n```js\nconst map = new Map([[1, 'one'], [2, 'two']]);\nmap.get(1)\n// one\nconst set = new Set(['a', 'b', 'c]);\nset.has('c');\n// true\n```\n\n## Advanced Iterator Functionality\n\n### passing arguments to Iterators\n\nThe `next()` method also accepts a value which can be used to modify the internal state of the generator. A value passed to `next()` will be treated as the result of the last yield expression that paused the generator.\n\n```js\nfunction* createIterator() {\n  let first = yield 1;\n  let second = yield first + 2; // 4 + 2\n  yield second + 3; // 5 + 3\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next(4)); // \"{ value: 6, done: false }\"\nconsole.log(iterator.next(5)); // \"{ value: 8, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n### Throw and Return\n\n* throw\n\nResume the execution of a generator by throwing an error into it and returns an object with two properties done and value.\n\n```js\nfunction* gen() {\n  while (true) {\n    try {\n      yield 42;\n    } catch (e) {\n      console.log('Error caught!');\n    }\n  }\n}\n\nvar g = gen();\ng.next();\n// { value: 42, done: false }\ng.throw(new Error('Something went wrong'));\n// \"Error caught!\"\n// { value: 42, done: false }\n```\n\n* return\n\nReturn the given value and finishes the generator.\n\n```js\nfunction* createIterator() {\n  yield 1;\n  return;\n  yield 2;\n  yield 3;\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n### Delegating generators\n\n```js\nfunction* g1() {\n  yield 1;\n  yield 2;\n}\n\nfunction* g2() {\n  yield 0;\n  yield* g1();\n  yield* [3, 4];\n  yield* '56';\n  yield* Array.from(arguments);\n}\n\nvar iterator = g2(7, 8);\n\nconsole.log(iterator.next()); // {value: 0, done: false}\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: 4, done: false}\nconsole.log(iterator.next()); // {value: '5', done: false}\nconsole.log(iterator.next()); // {value: '6', done: false}\nconsole.log(iterator.next()); // {value: 7, done: false}\nconsole.log(iterator.next()); // {value: 8, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```\n\n`yield*` is an expression, not a statement, so it evaluates to a value.\n\n```js\nfunction* g4() {\n  yield* [1, 2, 3];\n  return 'foo';\n}\n\nvar result;\n\nfunction* g5() {\n  result = yield* g4();\n}\n\nvar iterator = g5();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true},\n// g4() returned {value: 'foo', done: true} at this point\n\nconsole.log(result); // \"foo\"\n```\n\n## Asynchronous Task Running\n\n### tradition callback\n\n```js\nlet fs = require('fs');\n\nfs.readFile('config.json', function(err, contents) {\n  if (err) {\n    throw err;\n  }\n\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n### Asynchronous task runner\n\n```js\nfunction run(taskDef) {\n  // create the iterator, make available elsewhere\n  let task = taskDef();\n\n  // start the task\n  let result = task.next();\n\n  // recursive function to keep calling next()\n  function step() {\n    // if there's more to do\n    if (!result.done) {\n      if (typeof result.value === 'function') {\n        result.value(function(err, data) {\n          if (err) {\n            result = task.throw(err);\n            return;\n          }\n\n          result = task.next(data);\n          step();\n        });\n      } else {\n        result = task.next(result.value);\n        step();\n      }\n    }\n  }\n\n  // start the process\n  step();\n}\n\nlet fs = require('fs');\n\nfunction readFile(filename) {\n  return function(callback) {\n    fs.readFile(filename, callback);\n  };\n}\n\nrun(function*() {\n  let contents = yield readFile('config.json');\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n### Pros and Cons\n\nPros:\n\n* Lazy Evaluation: It is calculated as we demand it;\n* Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.\n\nCons:\n\n* Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.\n* Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.\n\n## Related Reading\n\n1.  Nicholas C. Zakas, [Iterators and Generators](https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators)\n\n2.  Axel Rauschmayer, [Iterables and iterators](http://exploringjs.com/es6/ch_iteration.html)\n\n3.  Axel Rauschmayer, [Generators](http://exploringjs.com/es6/ch_generators.html)\n\n4.  Brandon Morelli, [A Simple Guide to ES6 Iterators in JavaScript with Examples](https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e)\n\n5.  Arfat Salman, [Understanding Generators in ES6 JavaScript with Examples](https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5)\n\n6.  MDN, [Iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n\n7.  MDN, [Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n","source":"_posts/Iterators-and-generators.md","raw":"---\ntitle: Iterators and generators\ndate: 2018-05-01 01:19:28\ncategories:\n- web\ntags:\n- ECMAScript2015\n- es6\n- iterators\n- generators\n---\n\n# Iterators and Generators\n\n## Iterators\n\nIterators are objects with a specific interface designed for iteration.\n\nIn JavaScript an iterator is an object that provides a `next()` method which returns the next item in the sequence. This method returns an object with two properties: `done` and `value`.\n\nBelow is an implementation of iterator in ES5.\n\n```js\nfunction createIterator(items) {\n  var i = 0;\n  return {\n    next: function() {\n      var done = i >= items.length;\n      var value = !done ? items[i++] : undefined;\n\n      return {\n        done: done,\n        value: value,\n      };\n    },\n  };\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { done: false, value: 1 }\nconsole.log(iterator.next()); // { done: false, value: 2 }\nconsole.log(iterator.next()); // { done: false, value: 3 }\nconsole.log(iterator.next()); // { done: true, value: undefined }\n```\n\n## Generators\n\nA generator is a function that returns an iterator. Generator functions are indicated by an asterisk (_) after the `function` key word and use the `yield` keyword. It doesn't matter how many whitespace between `function` and `_`. On MDN, the`_`is right next to`function`, however in Zakas's book, the`_` is just before the function name.\n\nGenerators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\n\n> you can use `yield` only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.\n\n```js\n// method 1: function declaration\nfunction* createIterator1(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n}\n\n// method 2: function expression\nlet createIterator2 = function*(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n};\n\nconst iterator = createIterator2([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n> create an arrow function that is also a generator is not possible.\n\n### Generator Object Method\n\nSince generators are just functions. You can add generators to objects.\n\n```js\n// method 1: es5 style object literal\nlet obj1 = {\n  createIterator: function*(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\n// method 2: es6 shorthand\nlet obj2 = {\n  *createIterator(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\nconst iterator = obj2.createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n## Iterable and for-of loops\n\n`iterable protocol`: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a `for..of` construct.\n\nAn iterable is an object with a `Symbol.iterator` property.\n\nThese are iterables:\n\n* Arrays and TypedArrays\n* Maps\n* Sets\n* Strings\n* `arguments`\n* DOM Elements `NodeList`\n\n> All iterators created by generators are also iterables, because generators assign the `Symbol.iterator` property by default.\n\n### Accessing the default Iterator\n\n```js\nlet values = [1, 2, 3];\n\n// same process happens behind the scene when using for-of loop\nlet iterator = values[Symbol.iterator]();\n\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\n\n// check\nfunction isIterable(object) {\n  return typeof object[Symbol.iterator] === 'function';\n}\n\nconsole.log(isIterable([1, 2, 3])); // true\nconsole.log(isIterable('Hello')); // true\nconsole.log(isIterable(new Map())); // true\nconsole.log(isIterable(new Set())); // true\nconsole.log(isIterable(new WeakMap())); // false\nconsole.log(isIterable(new WeakSet())); // false\n```\n\n### Creating Iterator\n\n```js\nlet collection = {\n  items: [],\n  *[Symbol.iterator]() {\n    for (let item of this.items) {\n      yield item;\n    }\n  },\n};\n\ncollection.items.push(1);\ncollection.items.push(2);\ncollection.items.push(3);\n\nfor (let x of collection) {\n  console.log(x);\n}\n\n// 1\n// 2\n// 3\n```\n\n## Built-in Iterators\n\n### collection iterators\n\n* `entries()`\n* `values()`\n* `keys()`\n\n#### `entries()`\n\n* array: [index, value]\n* set: [value, value]\n* map: [key, value]\n\n#### `values()`\n\n* array: value\n* set: value\n* map: value\n\n#### `keys()`\n\n* array: index\n* set: value\n* map: key\n\n### Default Iterators for Collection Types\n\n* array: `values()`\n* set: `values()`\n* map: `entries()`\n\n```js\n// destructuring and for-of loop\nlet data = new Map();\n\ndata.set('title', 'Understanding ECMAScript 6');\ndata.set('format', 'ebook');\n\n// same as using data.entries()\nfor (let [key, value] of data) {\n  console.log(key + '=' + value);\n}\n```\n\n* NodeList\n\n```js\nvar divs = document.getElementsByTagName('div');\n\nfor (let div of divs) {\n  console.log(div.id);\n}\n```\n\n## Constructs accept iterables\n\nSome other constructs in JS that use iterables are:\n\n* `for-of`\n* Destructuring of Arrays\n* The spread operator (`…`)\n* `Promise.all` and `Promise.race` accept iterables over Promises.\n* Maps and Sets\n\n```js\nconst map = new Map([[1, 'one'], [2, 'two']]);\nmap.get(1)\n// one\nconst set = new Set(['a', 'b', 'c]);\nset.has('c');\n// true\n```\n\n## Advanced Iterator Functionality\n\n### passing arguments to Iterators\n\nThe `next()` method also accepts a value which can be used to modify the internal state of the generator. A value passed to `next()` will be treated as the result of the last yield expression that paused the generator.\n\n```js\nfunction* createIterator() {\n  let first = yield 1;\n  let second = yield first + 2; // 4 + 2\n  yield second + 3; // 5 + 3\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next(4)); // \"{ value: 6, done: false }\"\nconsole.log(iterator.next(5)); // \"{ value: 8, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n### Throw and Return\n\n* throw\n\nResume the execution of a generator by throwing an error into it and returns an object with two properties done and value.\n\n```js\nfunction* gen() {\n  while (true) {\n    try {\n      yield 42;\n    } catch (e) {\n      console.log('Error caught!');\n    }\n  }\n}\n\nvar g = gen();\ng.next();\n// { value: 42, done: false }\ng.throw(new Error('Something went wrong'));\n// \"Error caught!\"\n// { value: 42, done: false }\n```\n\n* return\n\nReturn the given value and finishes the generator.\n\n```js\nfunction* createIterator() {\n  yield 1;\n  return;\n  yield 2;\n  yield 3;\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n### Delegating generators\n\n```js\nfunction* g1() {\n  yield 1;\n  yield 2;\n}\n\nfunction* g2() {\n  yield 0;\n  yield* g1();\n  yield* [3, 4];\n  yield* '56';\n  yield* Array.from(arguments);\n}\n\nvar iterator = g2(7, 8);\n\nconsole.log(iterator.next()); // {value: 0, done: false}\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: 4, done: false}\nconsole.log(iterator.next()); // {value: '5', done: false}\nconsole.log(iterator.next()); // {value: '6', done: false}\nconsole.log(iterator.next()); // {value: 7, done: false}\nconsole.log(iterator.next()); // {value: 8, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```\n\n`yield*` is an expression, not a statement, so it evaluates to a value.\n\n```js\nfunction* g4() {\n  yield* [1, 2, 3];\n  return 'foo';\n}\n\nvar result;\n\nfunction* g5() {\n  result = yield* g4();\n}\n\nvar iterator = g5();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true},\n// g4() returned {value: 'foo', done: true} at this point\n\nconsole.log(result); // \"foo\"\n```\n\n## Asynchronous Task Running\n\n### tradition callback\n\n```js\nlet fs = require('fs');\n\nfs.readFile('config.json', function(err, contents) {\n  if (err) {\n    throw err;\n  }\n\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n### Asynchronous task runner\n\n```js\nfunction run(taskDef) {\n  // create the iterator, make available elsewhere\n  let task = taskDef();\n\n  // start the task\n  let result = task.next();\n\n  // recursive function to keep calling next()\n  function step() {\n    // if there's more to do\n    if (!result.done) {\n      if (typeof result.value === 'function') {\n        result.value(function(err, data) {\n          if (err) {\n            result = task.throw(err);\n            return;\n          }\n\n          result = task.next(data);\n          step();\n        });\n      } else {\n        result = task.next(result.value);\n        step();\n      }\n    }\n  }\n\n  // start the process\n  step();\n}\n\nlet fs = require('fs');\n\nfunction readFile(filename) {\n  return function(callback) {\n    fs.readFile(filename, callback);\n  };\n}\n\nrun(function*() {\n  let contents = yield readFile('config.json');\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n### Pros and Cons\n\nPros:\n\n* Lazy Evaluation: It is calculated as we demand it;\n* Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.\n\nCons:\n\n* Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.\n* Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.\n\n## Related Reading\n\n1.  Nicholas C. Zakas, [Iterators and Generators](https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators)\n\n2.  Axel Rauschmayer, [Iterables and iterators](http://exploringjs.com/es6/ch_iteration.html)\n\n3.  Axel Rauschmayer, [Generators](http://exploringjs.com/es6/ch_generators.html)\n\n4.  Brandon Morelli, [A Simple Guide to ES6 Iterators in JavaScript with Examples](https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e)\n\n5.  Arfat Salman, [Understanding Generators in ES6 JavaScript with Examples](https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5)\n\n6.  MDN, [Iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n\n7.  MDN, [Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n","slug":"Iterators-and-generators","published":1,"updated":"2018-05-01T08:20:41.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgq6iqlb0008b86tul0py0a2","content":"<h1 id=\"Iterators-and-Generators\"><a href=\"#Iterators-and-Generators\" class=\"headerlink\" title=\"Iterators and Generators\"></a>Iterators and Generators</h1><h2 id=\"Iterators\"><a href=\"#Iterators\" class=\"headerlink\" title=\"Iterators\"></a>Iterators</h2><p>Iterators are objects with a specific interface designed for iteration.</p>\n<p>In JavaScript an iterator is an object that provides a <code>next()</code> method which returns the next item in the sequence. This method returns an object with two properties: <code>done</code> and <code>value</code>.</p>\n<p>Below is an implementation of iterator in ES5.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIterator</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> done = i &gt;= items.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = !done ? items[i++] : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        done: done,</span><br><span class=\"line\">        value: value,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 1 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 2 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h2><p>A generator is a function that returns an iterator. Generator functions are indicated by an asterisk (<em>) after the <code>function</code> key word and use the <code>yield</code> keyword. It doesn’t matter how many whitespace between <code>function</code> and `</em><code>. On MDN, the</code><em><code>is right next to</code>function<code>, however in Zakas&#39;s book, the</code></em>` is just before the function name.</p>\n<p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p>\n<blockquote>\n<p>you can use <code>yield</code> only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: function declaration</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator1</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: function expression</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createIterator2 = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = createIterator2([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>create an arrow function that is also a generator is not possible.</p>\n</blockquote>\n<h3 id=\"Generator-Object-Method\"><a href=\"#Generator-Object-Method\" class=\"headerlink\" title=\"Generator Object Method\"></a>Generator Object Method</h3><p>Since generators are just functions. You can add generators to objects.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: es5 style object literal</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  createIterator: <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: es6 shorthand</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  *createIterator(items) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = obj2.createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Iterable-and-for-of-loops\"><a href=\"#Iterable-and-for-of-loops\" class=\"headerlink\" title=\"Iterable and for-of loops\"></a>Iterable and for-of loops</h2><p><code>iterable protocol</code>: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a <code>for..of</code> construct.</p>\n<p>An iterable is an object with a <code>Symbol.iterator</code> property.</p>\n<p>These are iterables:</p>\n<ul>\n<li>Arrays and TypedArrays</li>\n<li>Maps</li>\n<li>Sets</li>\n<li>Strings</li>\n<li><code>arguments</code></li>\n<li>DOM Elements <code>NodeList</code></li>\n</ul>\n<blockquote>\n<p>All iterators created by generators are also iterables, because generators assign the <code>Symbol.iterator</code> property by default.</p>\n</blockquote>\n<h3 id=\"Accessing-the-default-Iterator\"><a href=\"#Accessing-the-default-Iterator\" class=\"headerlink\" title=\"Accessing the default Iterator\"></a>Accessing the default Iterator</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same process happens behind the scene when using for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = values[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isIterable</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> object[<span class=\"built_in\">Symbol</span>.iterator] === <span class=\"string\">'function'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"string\">'Hello'</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>())); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>())); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Creating-Iterator\"><a href=\"#Creating-Iterator\" class=\"headerlink\" title=\"Creating Iterator\"></a>Creating Iterator</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> collection = &#123;</span><br><span class=\"line\">  items: [],</span><br><span class=\"line\">  *[<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.items) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">collection.items.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> collection) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Built-in-Iterators\"><a href=\"#Built-in-Iterators\" class=\"headerlink\" title=\"Built-in Iterators\"></a>Built-in Iterators</h2><h3 id=\"collection-iterators\"><a href=\"#collection-iterators\" class=\"headerlink\" title=\"collection iterators\"></a>collection iterators</h3><ul>\n<li><code>entries()</code></li>\n<li><code>values()</code></li>\n<li><code>keys()</code></li>\n</ul>\n<h4 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a><code>entries()</code></h4><ul>\n<li>array: [index, value]</li>\n<li>set: [value, value]</li>\n<li>map: [key, value]</li>\n</ul>\n<h4 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a><code>values()</code></h4><ul>\n<li>array: value</li>\n<li>set: value</li>\n<li>map: value</li>\n</ul>\n<h4 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a><code>keys()</code></h4><ul>\n<li>array: index</li>\n<li>set: value</li>\n<li>map: key</li>\n</ul>\n<h3 id=\"Default-Iterators-for-Collection-Types\"><a href=\"#Default-Iterators-for-Collection-Types\" class=\"headerlink\" title=\"Default Iterators for Collection Types\"></a>Default Iterators for Collection Types</h3><ul>\n<li>array: <code>values()</code></li>\n<li>set: <code>values()</code></li>\n<li>map: <code>entries()</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// destructuring and for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">data.set(<span class=\"string\">'title'</span>, <span class=\"string\">'Understanding ECMAScript 6'</span>);</span><br><span class=\"line\">data.set(<span class=\"string\">'format'</span>, <span class=\"string\">'ebook'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same as using data.entries()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">'='</span> + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NodeList</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> div <span class=\"keyword\">of</span> divs) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(div.id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Constructs-accept-iterables\"><a href=\"#Constructs-accept-iterables\" class=\"headerlink\" title=\"Constructs accept iterables\"></a>Constructs accept iterables</h2><p>Some other constructs in JS that use iterables are:</p>\n<ul>\n<li><code>for-of</code></li>\n<li>Destructuring of Arrays</li>\n<li>The spread operator (<code>…</code>)</li>\n<li><code>Promise.all</code> and <code>Promise.race</code> accept iterables over Promises.</li>\n<li>Maps and Sets</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'one'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>]]);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c]);</span></span><br><span class=\"line\"><span class=\"string\">set.has('</span>c<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Advanced-Iterator-Functionality\"><a href=\"#Advanced-Iterator-Functionality\" class=\"headerlink\" title=\"Advanced Iterator Functionality\"></a>Advanced Iterator Functionality</h2><h3 id=\"passing-arguments-to-Iterators\"><a href=\"#passing-arguments-to-Iterators\" class=\"headerlink\" title=\"passing arguments to Iterators\"></a>passing arguments to Iterators</h3><p>The <code>next()</code> method also accepts a value which can be used to modify the internal state of the generator. A value passed to <code>next()</code> will be treated as the result of the last yield expression that paused the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> second = <span class=\"keyword\">yield</span> first + <span class=\"number\">2</span>; <span class=\"comment\">// 4 + 2</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> second + <span class=\"number\">3</span>; <span class=\"comment\">// 5 + 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">4</span>)); <span class=\"comment\">// \"&#123; value: 6, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">5</span>)); <span class=\"comment\">// \"&#123; value: 8, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Throw-and-Return\"><a href=\"#Throw-and-Return\" class=\"headerlink\" title=\"Throw and Return\"></a>Throw and Return</h3><ul>\n<li>throw</li>\n</ul>\n<p>Resume the execution of a generator by throwing an error into it and returns an object with two properties done and value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error caught!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br><span class=\"line\">g.throw(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Something went wrong'</span>));</span><br><span class=\"line\"><span class=\"comment\">// \"Error caught!\"</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>return</li>\n</ul>\n<p>Return the given value and finishes the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Delegating-generators\"><a href=\"#Delegating-generators\" class=\"headerlink\" title=\"Delegating generators\"></a>Delegating generators</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* g1();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"string\">'56'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g2(<span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 4, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '5', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '6', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 7, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 8, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>yield*</code> is an expression, not a statement, so it evaluates to a value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  result = <span class=\"keyword\">yield</span>* g4();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g5();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// g4() returned &#123;value: 'foo', done: true&#125; at this point</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"foo\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Asynchronous-Task-Running\"><a href=\"#Asynchronous-Task-Running\" class=\"headerlink\" title=\"Asynchronous Task Running\"></a>Asynchronous Task Running</h2><h3 id=\"tradition-callback\"><a href=\"#tradition-callback\" class=\"headerlink\" title=\"tradition callback\"></a>tradition callback</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'config.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Asynchronous-task-runner\"><a href=\"#Asynchronous-task-runner\" class=\"headerlink\" title=\"Asynchronous task runner\"></a>Asynchronous task runner</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">taskDef</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// create the iterator, make available elsewhere</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> task = taskDef();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the task</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = task.next();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// recursive function to keep calling next()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if there's more to do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result.done) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result.value === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        result.value(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            result = task.throw(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          result = task.next(data);</span><br><span class=\"line\">          step();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = task.next(result.value);</span><br><span class=\"line\">        step();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the process</span></span><br><span class=\"line\">  step();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFile</span>(<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filename, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> contents = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'config.json'</span>);</span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h3><p>Pros:</p>\n<ul>\n<li>Lazy Evaluation: It is calculated as we demand it;</li>\n<li>Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.</li>\n<li>Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.</li>\n</ul>\n<h2 id=\"Related-Reading\"><a href=\"#Related-Reading\" class=\"headerlink\" title=\"Related Reading\"></a>Related Reading</h2><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators\" target=\"_blank\" rel=\"noopener\">Iterators and Generators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_iteration.html\" target=\"_blank\" rel=\"noopener\">Iterables and iterators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_generators.html\" target=\"_blank\" rel=\"noopener\">Generators</a></p>\n</li>\n<li><p>Brandon Morelli, <a href=\"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e\" target=\"_blank\" rel=\"noopener\">A Simple Guide to ES6 Iterators in JavaScript with Examples</a></p>\n</li>\n<li><p>Arfat Salman, <a href=\"https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5\" target=\"_blank\" rel=\"noopener\">Understanding Generators in ES6 JavaScript with Examples</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iterators and generators</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iteration protocols</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Iterators-and-Generators\"><a href=\"#Iterators-and-Generators\" class=\"headerlink\" title=\"Iterators and Generators\"></a>Iterators and Generators</h1><h2 id=\"Iterators\"><a href=\"#Iterators\" class=\"headerlink\" title=\"Iterators\"></a>Iterators</h2><p>Iterators are objects with a specific interface designed for iteration.</p>\n<p>In JavaScript an iterator is an object that provides a <code>next()</code> method which returns the next item in the sequence. This method returns an object with two properties: <code>done</code> and <code>value</code>.</p>\n<p>Below is an implementation of iterator in ES5.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIterator</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> done = i &gt;= items.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = !done ? items[i++] : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        done: done,</span><br><span class=\"line\">        value: value,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 1 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 2 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h2><p>A generator is a function that returns an iterator. Generator functions are indicated by an asterisk (<em>) after the <code>function</code> key word and use the <code>yield</code> keyword. It doesn’t matter how many whitespace between <code>function</code> and `</em><code>. On MDN, the</code><em><code>is right next to</code>function<code>, however in Zakas&#39;s book, the</code></em>` is just before the function name.</p>\n<p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p>\n<blockquote>\n<p>you can use <code>yield</code> only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: function declaration</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator1</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: function expression</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createIterator2 = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = createIterator2([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>create an arrow function that is also a generator is not possible.</p>\n</blockquote>\n<h3 id=\"Generator-Object-Method\"><a href=\"#Generator-Object-Method\" class=\"headerlink\" title=\"Generator Object Method\"></a>Generator Object Method</h3><p>Since generators are just functions. You can add generators to objects.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: es5 style object literal</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  createIterator: <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: es6 shorthand</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  *createIterator(items) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = obj2.createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Iterable-and-for-of-loops\"><a href=\"#Iterable-and-for-of-loops\" class=\"headerlink\" title=\"Iterable and for-of loops\"></a>Iterable and for-of loops</h2><p><code>iterable protocol</code>: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a <code>for..of</code> construct.</p>\n<p>An iterable is an object with a <code>Symbol.iterator</code> property.</p>\n<p>These are iterables:</p>\n<ul>\n<li>Arrays and TypedArrays</li>\n<li>Maps</li>\n<li>Sets</li>\n<li>Strings</li>\n<li><code>arguments</code></li>\n<li>DOM Elements <code>NodeList</code></li>\n</ul>\n<blockquote>\n<p>All iterators created by generators are also iterables, because generators assign the <code>Symbol.iterator</code> property by default.</p>\n</blockquote>\n<h3 id=\"Accessing-the-default-Iterator\"><a href=\"#Accessing-the-default-Iterator\" class=\"headerlink\" title=\"Accessing the default Iterator\"></a>Accessing the default Iterator</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same process happens behind the scene when using for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = values[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isIterable</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> object[<span class=\"built_in\">Symbol</span>.iterator] === <span class=\"string\">'function'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"string\">'Hello'</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>())); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>())); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Creating-Iterator\"><a href=\"#Creating-Iterator\" class=\"headerlink\" title=\"Creating Iterator\"></a>Creating Iterator</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> collection = &#123;</span><br><span class=\"line\">  items: [],</span><br><span class=\"line\">  *[<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.items) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">collection.items.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> collection) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Built-in-Iterators\"><a href=\"#Built-in-Iterators\" class=\"headerlink\" title=\"Built-in Iterators\"></a>Built-in Iterators</h2><h3 id=\"collection-iterators\"><a href=\"#collection-iterators\" class=\"headerlink\" title=\"collection iterators\"></a>collection iterators</h3><ul>\n<li><code>entries()</code></li>\n<li><code>values()</code></li>\n<li><code>keys()</code></li>\n</ul>\n<h4 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a><code>entries()</code></h4><ul>\n<li>array: [index, value]</li>\n<li>set: [value, value]</li>\n<li>map: [key, value]</li>\n</ul>\n<h4 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a><code>values()</code></h4><ul>\n<li>array: value</li>\n<li>set: value</li>\n<li>map: value</li>\n</ul>\n<h4 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a><code>keys()</code></h4><ul>\n<li>array: index</li>\n<li>set: value</li>\n<li>map: key</li>\n</ul>\n<h3 id=\"Default-Iterators-for-Collection-Types\"><a href=\"#Default-Iterators-for-Collection-Types\" class=\"headerlink\" title=\"Default Iterators for Collection Types\"></a>Default Iterators for Collection Types</h3><ul>\n<li>array: <code>values()</code></li>\n<li>set: <code>values()</code></li>\n<li>map: <code>entries()</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// destructuring and for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">data.set(<span class=\"string\">'title'</span>, <span class=\"string\">'Understanding ECMAScript 6'</span>);</span><br><span class=\"line\">data.set(<span class=\"string\">'format'</span>, <span class=\"string\">'ebook'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same as using data.entries()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">'='</span> + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NodeList</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> div <span class=\"keyword\">of</span> divs) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(div.id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Constructs-accept-iterables\"><a href=\"#Constructs-accept-iterables\" class=\"headerlink\" title=\"Constructs accept iterables\"></a>Constructs accept iterables</h2><p>Some other constructs in JS that use iterables are:</p>\n<ul>\n<li><code>for-of</code></li>\n<li>Destructuring of Arrays</li>\n<li>The spread operator (<code>…</code>)</li>\n<li><code>Promise.all</code> and <code>Promise.race</code> accept iterables over Promises.</li>\n<li>Maps and Sets</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'one'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>]]);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c]);</span></span><br><span class=\"line\"><span class=\"string\">set.has('</span>c<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Advanced-Iterator-Functionality\"><a href=\"#Advanced-Iterator-Functionality\" class=\"headerlink\" title=\"Advanced Iterator Functionality\"></a>Advanced Iterator Functionality</h2><h3 id=\"passing-arguments-to-Iterators\"><a href=\"#passing-arguments-to-Iterators\" class=\"headerlink\" title=\"passing arguments to Iterators\"></a>passing arguments to Iterators</h3><p>The <code>next()</code> method also accepts a value which can be used to modify the internal state of the generator. A value passed to <code>next()</code> will be treated as the result of the last yield expression that paused the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> second = <span class=\"keyword\">yield</span> first + <span class=\"number\">2</span>; <span class=\"comment\">// 4 + 2</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> second + <span class=\"number\">3</span>; <span class=\"comment\">// 5 + 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">4</span>)); <span class=\"comment\">// \"&#123; value: 6, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">5</span>)); <span class=\"comment\">// \"&#123; value: 8, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Throw-and-Return\"><a href=\"#Throw-and-Return\" class=\"headerlink\" title=\"Throw and Return\"></a>Throw and Return</h3><ul>\n<li>throw</li>\n</ul>\n<p>Resume the execution of a generator by throwing an error into it and returns an object with two properties done and value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error caught!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br><span class=\"line\">g.throw(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Something went wrong'</span>));</span><br><span class=\"line\"><span class=\"comment\">// \"Error caught!\"</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>return</li>\n</ul>\n<p>Return the given value and finishes the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Delegating-generators\"><a href=\"#Delegating-generators\" class=\"headerlink\" title=\"Delegating generators\"></a>Delegating generators</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* g1();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"string\">'56'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g2(<span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 4, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '5', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '6', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 7, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 8, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>yield*</code> is an expression, not a statement, so it evaluates to a value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  result = <span class=\"keyword\">yield</span>* g4();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g5();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// g4() returned &#123;value: 'foo', done: true&#125; at this point</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"foo\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Asynchronous-Task-Running\"><a href=\"#Asynchronous-Task-Running\" class=\"headerlink\" title=\"Asynchronous Task Running\"></a>Asynchronous Task Running</h2><h3 id=\"tradition-callback\"><a href=\"#tradition-callback\" class=\"headerlink\" title=\"tradition callback\"></a>tradition callback</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'config.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Asynchronous-task-runner\"><a href=\"#Asynchronous-task-runner\" class=\"headerlink\" title=\"Asynchronous task runner\"></a>Asynchronous task runner</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">taskDef</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// create the iterator, make available elsewhere</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> task = taskDef();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the task</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = task.next();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// recursive function to keep calling next()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if there's more to do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result.done) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result.value === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        result.value(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            result = task.throw(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          result = task.next(data);</span><br><span class=\"line\">          step();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = task.next(result.value);</span><br><span class=\"line\">        step();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the process</span></span><br><span class=\"line\">  step();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFile</span>(<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filename, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> contents = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'config.json'</span>);</span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h3><p>Pros:</p>\n<ul>\n<li>Lazy Evaluation: It is calculated as we demand it;</li>\n<li>Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.</li>\n<li>Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.</li>\n</ul>\n<h2 id=\"Related-Reading\"><a href=\"#Related-Reading\" class=\"headerlink\" title=\"Related Reading\"></a>Related Reading</h2><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators\" target=\"_blank\" rel=\"noopener\">Iterators and Generators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_iteration.html\" target=\"_blank\" rel=\"noopener\">Iterables and iterators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_generators.html\" target=\"_blank\" rel=\"noopener\">Generators</a></p>\n</li>\n<li><p>Brandon Morelli, <a href=\"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e\" target=\"_blank\" rel=\"noopener\">A Simple Guide to ES6 Iterators in JavaScript with Examples</a></p>\n</li>\n<li><p>Arfat Salman, <a href=\"https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5\" target=\"_blank\" rel=\"noopener\">Understanding Generators in ES6 JavaScript with Examples</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iterators and generators</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iteration protocols</a></p>\n</li>\n</ol>\n"},{"title":"Learn Events","date":"2018-04-15T23:47:42.000Z","_content":"\n# learn events\n\n## register\n\n```js\nmyElement.onclick = functionA;\nmyElement.onclick = functionB;\n```\n\nsecond row will overwrite first row\n\n```js\nmyElement.addEventListener('click', functionA);\nmyElement.addEventListener('click', functionB);\n```\n\nboth would run\n\nwhich should use\n\n* inline event handlers `<button onclick=\"bgChange()\">Press me</button>` （don't use）\n* Event handler properties; element.onclick; better cross-browser compatibility (IE8)\n* DOM Level 2 Events; element.addEventListener('click', functionA); (IE9, can register multiple events，can be removed)\n\n## event objects\n\ne/evt/event\n\nevent.target\n\n## Preventing default behavior\n\ne.preventDefault();\n\n## Event bubbling\n\nEvent bubbling and capture are two mechanisms that describe what happens when two handlers\nof the same event type are activated on one element.\n\nIn the capturing phase:\n\nThe browser checks to see if the element's outer-most ancestor (`<html>`) has an onclick event handler registered on it in the capturing phase, and runs it if so.\nThen it moves on to the next element inside `<html>` and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.\n\nIn the bubbling phase, the exact opposite occurs:\n\nThe browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.\nThen it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the `<html>` element.\n\nEvent handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.\n\n```js\nelement1.addEventListener('click', doSomething2, true); // fire at capture phase\nelement2.addEventListener('click', doSomething, false);\n```\n\n## Event delegation\n\nif you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.\n\n```html\n<ul id=\"parent-list\">\n  <li id=\"post-1\">Item 1</li>\n  <li id=\"post-2\">Item 2</li>\n  <li id=\"post-3\">Item 3</li>\n  <li id=\"post-4\">Item 4</li>\n  <li id=\"post-5\">Item 5</li>\n  <li id=\"post-6\" class=\"endangered\">Item 6</li>\n</ul>\n```\n\n```js\n// Get the element, add a click listener...\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  // e.target is the clicked element!\n  // If it was a list item\n  if (e.target && e.target.nodeName == 'LI') {\n    // List item found!  Output the ID!\n    console.log('List item ', e.target.id.replace('post-', ''), ' was clicked!');\n  }\n});\n\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  if (e.target && e.target.matches('li.endangered')) {\n    // List item found!  Output the ID!\n    console.log('The ' + e.target.textContent + ' is endangered!');\n  }\n});\n```\n\n## related reading\n\nmdn <https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture>\n\nevent order <https://www.quirksmode.org/js/events_order.html>\n\nevent delegate <https://davidwalsh.name/event-delegate>\n\nEvent delegation <https://javascript.info/event-delegation>\n","source":"_posts/learn-events.md","raw":"---\ntitle: Learn Events\ndate: 2018-04-15 16:47:42\ncategories:\n- web\ntags:\n- window\n- events\n- capture/bubbling\n- delegate\n---\n\n# learn events\n\n## register\n\n```js\nmyElement.onclick = functionA;\nmyElement.onclick = functionB;\n```\n\nsecond row will overwrite first row\n\n```js\nmyElement.addEventListener('click', functionA);\nmyElement.addEventListener('click', functionB);\n```\n\nboth would run\n\nwhich should use\n\n* inline event handlers `<button onclick=\"bgChange()\">Press me</button>` （don't use）\n* Event handler properties; element.onclick; better cross-browser compatibility (IE8)\n* DOM Level 2 Events; element.addEventListener('click', functionA); (IE9, can register multiple events，can be removed)\n\n## event objects\n\ne/evt/event\n\nevent.target\n\n## Preventing default behavior\n\ne.preventDefault();\n\n## Event bubbling\n\nEvent bubbling and capture are two mechanisms that describe what happens when two handlers\nof the same event type are activated on one element.\n\nIn the capturing phase:\n\nThe browser checks to see if the element's outer-most ancestor (`<html>`) has an onclick event handler registered on it in the capturing phase, and runs it if so.\nThen it moves on to the next element inside `<html>` and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.\n\nIn the bubbling phase, the exact opposite occurs:\n\nThe browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.\nThen it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the `<html>` element.\n\nEvent handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.\n\n```js\nelement1.addEventListener('click', doSomething2, true); // fire at capture phase\nelement2.addEventListener('click', doSomething, false);\n```\n\n## Event delegation\n\nif you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.\n\n```html\n<ul id=\"parent-list\">\n  <li id=\"post-1\">Item 1</li>\n  <li id=\"post-2\">Item 2</li>\n  <li id=\"post-3\">Item 3</li>\n  <li id=\"post-4\">Item 4</li>\n  <li id=\"post-5\">Item 5</li>\n  <li id=\"post-6\" class=\"endangered\">Item 6</li>\n</ul>\n```\n\n```js\n// Get the element, add a click listener...\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  // e.target is the clicked element!\n  // If it was a list item\n  if (e.target && e.target.nodeName == 'LI') {\n    // List item found!  Output the ID!\n    console.log('List item ', e.target.id.replace('post-', ''), ' was clicked!');\n  }\n});\n\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  if (e.target && e.target.matches('li.endangered')) {\n    // List item found!  Output the ID!\n    console.log('The ' + e.target.textContent + ' is endangered!');\n  }\n});\n```\n\n## related reading\n\nmdn <https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture>\n\nevent order <https://www.quirksmode.org/js/events_order.html>\n\nevent delegate <https://davidwalsh.name/event-delegate>\n\nEvent delegation <https://javascript.info/event-delegation>\n","slug":"learn-events","published":1,"updated":"2018-04-24T02:48:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgq6iqlc0009b86t0z9chglv","content":"<h1 id=\"learn-events\"><a href=\"#learn-events\" class=\"headerlink\" title=\"learn events\"></a>learn events</h1><h2 id=\"register\"><a href=\"#register\" class=\"headerlink\" title=\"register\"></a>register</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.onclick = functionA;</span><br><span class=\"line\">myElement.onclick = functionB;</span><br></pre></td></tr></table></figure>\n<p>second row will overwrite first row</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionA);</span><br><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionB);</span><br></pre></td></tr></table></figure>\n<p>both would run</p>\n<p>which should use</p>\n<ul>\n<li>inline event handlers <code>&lt;button onclick=&quot;bgChange()&quot;&gt;Press me&lt;/button&gt;</code> （don’t use）</li>\n<li>Event handler properties; element.onclick; better cross-browser compatibility (IE8)</li>\n<li>DOM Level 2 Events; element.addEventListener(‘click’, functionA); (IE9, can register multiple events，can be removed)</li>\n</ul>\n<h2 id=\"event-objects\"><a href=\"#event-objects\" class=\"headerlink\" title=\"event objects\"></a>event objects</h2><p>e/evt/event</p>\n<p>event.target</p>\n<h2 id=\"Preventing-default-behavior\"><a href=\"#Preventing-default-behavior\" class=\"headerlink\" title=\"Preventing default behavior\"></a>Preventing default behavior</h2><p>e.preventDefault();</p>\n<h2 id=\"Event-bubbling\"><a href=\"#Event-bubbling\" class=\"headerlink\" title=\"Event bubbling\"></a>Event bubbling</h2><p>Event bubbling and capture are two mechanisms that describe what happens when two handlers<br>of the same event type are activated on one element.</p>\n<p>In the capturing phase:</p>\n<p>The browser checks to see if the element’s outer-most ancestor (<code>&lt;html&gt;</code>) has an onclick event handler registered on it in the capturing phase, and runs it if so.<br>Then it moves on to the next element inside <code>&lt;html&gt;</code> and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.</p>\n<p>In the bubbling phase, the exact opposite occurs:</p>\n<p>The browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.<br>Then it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the <code>&lt;html&gt;</code> element.</p>\n<p>Event handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element1.addEventListener(<span class=\"string\">'click'</span>, doSomething2, <span class=\"literal\">true</span>); <span class=\"comment\">// fire at capture phase</span></span><br><span class=\"line\">element2.addEventListener(<span class=\"string\">'click'</span>, doSomething, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Event-delegation\"><a href=\"#Event-delegation\" class=\"headerlink\" title=\"Event delegation\"></a>Event delegation</h2><p>if you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-1\"</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-2\"</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-3\"</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-4\"</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-5\"</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-6\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"endangered\"</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the element, add a click listener...</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// e.target is the clicked element!</span></span><br><span class=\"line\">  <span class=\"comment\">// If it was a list item</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.nodeName == <span class=\"string\">'LI'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'List item '</span>, e.target.id.replace(<span class=\"string\">'post-'</span>, <span class=\"string\">''</span>), <span class=\"string\">' was clicked!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.matches(<span class=\"string\">'li.endangered'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The '</span> + e.target.textContent + <span class=\"string\">' is endangered!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"related-reading\"><a href=\"#related-reading\" class=\"headerlink\" title=\"related reading\"></a>related reading</h2><p>mdn <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture</a></p>\n<p>event order <a href=\"https://www.quirksmode.org/js/events_order.html\" target=\"_blank\" rel=\"noopener\">https://www.quirksmode.org/js/events_order.html</a></p>\n<p>event delegate <a href=\"https://davidwalsh.name/event-delegate\" target=\"_blank\" rel=\"noopener\">https://davidwalsh.name/event-delegate</a></p>\n<p>Event delegation <a href=\"https://javascript.info/event-delegation\" target=\"_blank\" rel=\"noopener\">https://javascript.info/event-delegation</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"learn-events\"><a href=\"#learn-events\" class=\"headerlink\" title=\"learn events\"></a>learn events</h1><h2 id=\"register\"><a href=\"#register\" class=\"headerlink\" title=\"register\"></a>register</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.onclick = functionA;</span><br><span class=\"line\">myElement.onclick = functionB;</span><br></pre></td></tr></table></figure>\n<p>second row will overwrite first row</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionA);</span><br><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionB);</span><br></pre></td></tr></table></figure>\n<p>both would run</p>\n<p>which should use</p>\n<ul>\n<li>inline event handlers <code>&lt;button onclick=&quot;bgChange()&quot;&gt;Press me&lt;/button&gt;</code> （don’t use）</li>\n<li>Event handler properties; element.onclick; better cross-browser compatibility (IE8)</li>\n<li>DOM Level 2 Events; element.addEventListener(‘click’, functionA); (IE9, can register multiple events，can be removed)</li>\n</ul>\n<h2 id=\"event-objects\"><a href=\"#event-objects\" class=\"headerlink\" title=\"event objects\"></a>event objects</h2><p>e/evt/event</p>\n<p>event.target</p>\n<h2 id=\"Preventing-default-behavior\"><a href=\"#Preventing-default-behavior\" class=\"headerlink\" title=\"Preventing default behavior\"></a>Preventing default behavior</h2><p>e.preventDefault();</p>\n<h2 id=\"Event-bubbling\"><a href=\"#Event-bubbling\" class=\"headerlink\" title=\"Event bubbling\"></a>Event bubbling</h2><p>Event bubbling and capture are two mechanisms that describe what happens when two handlers<br>of the same event type are activated on one element.</p>\n<p>In the capturing phase:</p>\n<p>The browser checks to see if the element’s outer-most ancestor (<code>&lt;html&gt;</code>) has an onclick event handler registered on it in the capturing phase, and runs it if so.<br>Then it moves on to the next element inside <code>&lt;html&gt;</code> and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.</p>\n<p>In the bubbling phase, the exact opposite occurs:</p>\n<p>The browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.<br>Then it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the <code>&lt;html&gt;</code> element.</p>\n<p>Event handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element1.addEventListener(<span class=\"string\">'click'</span>, doSomething2, <span class=\"literal\">true</span>); <span class=\"comment\">// fire at capture phase</span></span><br><span class=\"line\">element2.addEventListener(<span class=\"string\">'click'</span>, doSomething, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Event-delegation\"><a href=\"#Event-delegation\" class=\"headerlink\" title=\"Event delegation\"></a>Event delegation</h2><p>if you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-1\"</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-2\"</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-3\"</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-4\"</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-5\"</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-6\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"endangered\"</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the element, add a click listener...</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// e.target is the clicked element!</span></span><br><span class=\"line\">  <span class=\"comment\">// If it was a list item</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.nodeName == <span class=\"string\">'LI'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'List item '</span>, e.target.id.replace(<span class=\"string\">'post-'</span>, <span class=\"string\">''</span>), <span class=\"string\">' was clicked!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.matches(<span class=\"string\">'li.endangered'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The '</span> + e.target.textContent + <span class=\"string\">' is endangered!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"related-reading\"><a href=\"#related-reading\" class=\"headerlink\" title=\"related reading\"></a>related reading</h2><p>mdn <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture</a></p>\n<p>event order <a href=\"https://www.quirksmode.org/js/events_order.html\" target=\"_blank\" rel=\"noopener\">https://www.quirksmode.org/js/events_order.html</a></p>\n<p>event delegate <a href=\"https://davidwalsh.name/event-delegate\" target=\"_blank\" rel=\"noopener\">https://davidwalsh.name/event-delegate</a></p>\n<p>Event delegation <a href=\"https://javascript.info/event-delegation\" target=\"_blank\" rel=\"noopener\">https://javascript.info/event-delegation</a></p>\n"},{"title":"learn ES6 modules","date":"2018-04-08T00:30:40.000Z","_content":"\nA module is Javascript code that automatically runs in **strict** mode with no way opt out.\n\nmodule and script are not the same.\n\n## import export\n\n### 1. named export (several per module)\n\n```javascript\n//------ lib.js ------\nexport const sqrt = Math.sqrt;\nexport function square(x) {\n  return x * x;\n}\nexport function diag(x, y) {\n  return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\n\nimport { square, diag } from './lib.js';\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n\n// can not reassign imported bindings\nsuqare = 2; // throw an error\n\n// or\n\n//------ main.js ------\nimport * as lib from 'lib';\nconsole.log(lib.square(11)); // 121\nconsole.log(lib.diag(4, 3)); // 5\n```\n\n* syntax: import { identifiers } from './example.js' -> module specifier\n\n* the list of binding to imports is not a destructured object\n\n* the last one this is called _namespace_ import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.\n\n* Be sure to include /, ./ or ../ at the begining of the string representing the file for the best compatibility across browsers and node.js.\n\n* lib.js is only execute once, no matter how many import statements have been decalared. After the code to import the module excutes, the instantiated module is kept in **memory** and reused whenever another import statement reference to it. e.g.\n\n```javascript\n// just execute lib.js once\nimport { diag } from './lib.js';\nimport { square } from './lib.js';\n```\n\n* import/export must be used outside condition statement or functions.\n\n```javascript\nif (flag) {\n    export flag; // syntax error\n}\n\nfunction tryImport() {\nimport { diag } from './lib.js'; // syntax error\n}\n```\n\n* ES6 import statement create _read-only_ bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.\n\n```javascript\nexport var name = 'Nico';\nexport function setName(x) {\n  name = x;\n}\n\nimport { name, setName } from './lib.js';\nconsole.log(name); // Nico\nsetName('Jack');\nconsole.log(name); // Jack\n\n// can not reassign imported bindings\nname = 'Nico'; // throw an error\n```\n\n* renaming export and import\n\n```javascript\nexport {sum as add};\nimport {add} form './example.js';\n\n// or\nimport { add as sum } from './example.js';\nconsole.log(typeof add); // udefined\n```\n\n### 2. default export (one per module)\n\n```javascript\n//------ myFunc.js ------\nexport default function () { ··· } // no semicolon!\n\n//------ main1.js ------\nimport myFunc from 'myFunc';\nmyFunc();\n\n// or\nfunction sum () { ... }\nexport default sum;\n\n// or\nexport sum2() { ... }\nexport {sum as default}\n\n// Or a class:\n\n//------ MyClass.js ------\nexport default class { ··· } // no semicolon!\n\n//------ main2.js ------\nimport MyClass from 'MyClass';\nconst inst = new MyClass();\n```\n\n### 3. combine\n\nyou can use named export and default together\n\nnote: the default must come before the non-defaults in import statement.\n\n```js\nexport var name = 'Nico';\nexport default function () { ··· }\n\nimport sum, { name } from './example.js';\n\n// or\nimport { default as sum, name } from './example.js';\n```\n\n### 4. re-exporting\n\n```js\nimport {add} form './example.js';\nexport add;\n\n// or short\nexport { add } from './example.js';\n\n// export with different name\nexport { add as sum } from './example.js';\n\n// export everything\nexport * from './example.js';\n```\n\nnote: by exporting everything, you're including default as well as any named exports.\n\n### 5. importing without bindings\n\nSome modules may not export anthing; instead they might only modify object in the gloabal scope. _Import without bindings are most likely to be used to create polyfills and shims_.\n\n```js\n// example.js\nArray.prototype.somethingFancy = function () { ...}\n\n// main.js\nimport './example.js'\nlet arr = [];\narr.somethingFancy();\n```\n\n## loading modules\n\n### 1. use <\bscript> as `defer`\n\n```html\n<!-- load a module JavaScript file -->\n<script type=\"module\" src=\"module.js\"></script>\n\n<!-- include a module inline -->\n<script type=\"module\">\n\nimport { sum } from \"./example.js\";\n\nlet result = sum(1, 2);\n\n</script>\n```\n\n* 'module' is not a content type like 'text/javascript', and browsers ignore `<script>` elements when type is unrecognized, providing good backwards-compatibility.\n\n* in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.\n\n* module sequence; `<script type=\"module\">` always acts as if the `defer` attribute is applied.\n\n```html\n<!-- this will execute first -->\n<script type=\"module\" src=\"module1.js\"></script>\n\n<!-- this will execute second -->\n<script type=\"module\">\nimport { sum } from \"./example.js\";\n\nlet result = sum(1, 2);\n</script>\n```\n\n* synchronies and sequential: **modules are parsed completely first to dientify all `import`, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.**\n\ni. download and parse `module1.js` , recursive download and parse import in `module1.js`;\n\nii. parse inline module\n\nonce loading complete\n\niiii. recursive execute `import` source in `module1.js`, then execute `module1.js`\n\niiiii. recursive execute `import` source in inline module, then execute inline module\n\n### 2. use <\bscript> as `async`\n\n```html\n<!-- no guarantee which one of these will execute first -->\n<script type=\"module\" async src=\"module1.js\"></script>\n<script type=\"module\" async src=\"module2.js\"></script>\n```\n\nthe `async` causes the script file to be executed as soon as the file is compeleted downloaded and parsed. the order in document does not affect the order in which the scripts are excuted. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.\n\n### 3. use `Worker`\n\n```js\n// load script.js as a script\nlet worker = new Worker('script.js');\n\n// load module.js as a module\nlet worker = new Worker('module.js', { type: 'module' });\n```\n\n## Support for cyclic dependencies\n\n### why support\n\nCyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.\n\nI think this example from nodejs document can clearly explain cyclic dependencies. <https://nodejs.org/api/modules.html#modules_cycles>\n\n```js\n// a.js\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n\n// b.js\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n\n// main.js\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done = %j, b.done = %j', a.done, b.done);\n```\n\nthe output is\n\n```bash\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\n```\n\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`. At that point, `b.js` tries to load `a.js`. In order to prevent an **infinite loop**, an **unfinished copy** of the `a.js` exports object is returned to the `b.js` module. `b.js` then finishes loading, and its exports object is provided to the `a.js` module.\n\n#### related reading material\n\n1.  Nicholas C. Zakas, [Understanding ECMAScript 6](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n2.  Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n\n3.  nodejs document, [Modules](https://nodejs.org/api/modules.html)\n","source":"_posts/learn-es6-modules.md","raw":"---\ntitle: learn ES6 modules\ndate: 2018-04-07 17:30:40\ncategories:\n- web\ntags:\n- ECMAScript2015\n- es6\n- module\n---\n\nA module is Javascript code that automatically runs in **strict** mode with no way opt out.\n\nmodule and script are not the same.\n\n## import export\n\n### 1. named export (several per module)\n\n```javascript\n//------ lib.js ------\nexport const sqrt = Math.sqrt;\nexport function square(x) {\n  return x * x;\n}\nexport function diag(x, y) {\n  return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\n\nimport { square, diag } from './lib.js';\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n\n// can not reassign imported bindings\nsuqare = 2; // throw an error\n\n// or\n\n//------ main.js ------\nimport * as lib from 'lib';\nconsole.log(lib.square(11)); // 121\nconsole.log(lib.diag(4, 3)); // 5\n```\n\n* syntax: import { identifiers } from './example.js' -> module specifier\n\n* the list of binding to imports is not a destructured object\n\n* the last one this is called _namespace_ import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.\n\n* Be sure to include /, ./ or ../ at the begining of the string representing the file for the best compatibility across browsers and node.js.\n\n* lib.js is only execute once, no matter how many import statements have been decalared. After the code to import the module excutes, the instantiated module is kept in **memory** and reused whenever another import statement reference to it. e.g.\n\n```javascript\n// just execute lib.js once\nimport { diag } from './lib.js';\nimport { square } from './lib.js';\n```\n\n* import/export must be used outside condition statement or functions.\n\n```javascript\nif (flag) {\n    export flag; // syntax error\n}\n\nfunction tryImport() {\nimport { diag } from './lib.js'; // syntax error\n}\n```\n\n* ES6 import statement create _read-only_ bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.\n\n```javascript\nexport var name = 'Nico';\nexport function setName(x) {\n  name = x;\n}\n\nimport { name, setName } from './lib.js';\nconsole.log(name); // Nico\nsetName('Jack');\nconsole.log(name); // Jack\n\n// can not reassign imported bindings\nname = 'Nico'; // throw an error\n```\n\n* renaming export and import\n\n```javascript\nexport {sum as add};\nimport {add} form './example.js';\n\n// or\nimport { add as sum } from './example.js';\nconsole.log(typeof add); // udefined\n```\n\n### 2. default export (one per module)\n\n```javascript\n//------ myFunc.js ------\nexport default function () { ··· } // no semicolon!\n\n//------ main1.js ------\nimport myFunc from 'myFunc';\nmyFunc();\n\n// or\nfunction sum () { ... }\nexport default sum;\n\n// or\nexport sum2() { ... }\nexport {sum as default}\n\n// Or a class:\n\n//------ MyClass.js ------\nexport default class { ··· } // no semicolon!\n\n//------ main2.js ------\nimport MyClass from 'MyClass';\nconst inst = new MyClass();\n```\n\n### 3. combine\n\nyou can use named export and default together\n\nnote: the default must come before the non-defaults in import statement.\n\n```js\nexport var name = 'Nico';\nexport default function () { ··· }\n\nimport sum, { name } from './example.js';\n\n// or\nimport { default as sum, name } from './example.js';\n```\n\n### 4. re-exporting\n\n```js\nimport {add} form './example.js';\nexport add;\n\n// or short\nexport { add } from './example.js';\n\n// export with different name\nexport { add as sum } from './example.js';\n\n// export everything\nexport * from './example.js';\n```\n\nnote: by exporting everything, you're including default as well as any named exports.\n\n### 5. importing without bindings\n\nSome modules may not export anthing; instead they might only modify object in the gloabal scope. _Import without bindings are most likely to be used to create polyfills and shims_.\n\n```js\n// example.js\nArray.prototype.somethingFancy = function () { ...}\n\n// main.js\nimport './example.js'\nlet arr = [];\narr.somethingFancy();\n```\n\n## loading modules\n\n### 1. use <\bscript> as `defer`\n\n```html\n<!-- load a module JavaScript file -->\n<script type=\"module\" src=\"module.js\"></script>\n\n<!-- include a module inline -->\n<script type=\"module\">\n\nimport { sum } from \"./example.js\";\n\nlet result = sum(1, 2);\n\n</script>\n```\n\n* 'module' is not a content type like 'text/javascript', and browsers ignore `<script>` elements when type is unrecognized, providing good backwards-compatibility.\n\n* in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.\n\n* module sequence; `<script type=\"module\">` always acts as if the `defer` attribute is applied.\n\n```html\n<!-- this will execute first -->\n<script type=\"module\" src=\"module1.js\"></script>\n\n<!-- this will execute second -->\n<script type=\"module\">\nimport { sum } from \"./example.js\";\n\nlet result = sum(1, 2);\n</script>\n```\n\n* synchronies and sequential: **modules are parsed completely first to dientify all `import`, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.**\n\ni. download and parse `module1.js` , recursive download and parse import in `module1.js`;\n\nii. parse inline module\n\nonce loading complete\n\niiii. recursive execute `import` source in `module1.js`, then execute `module1.js`\n\niiiii. recursive execute `import` source in inline module, then execute inline module\n\n### 2. use <\bscript> as `async`\n\n```html\n<!-- no guarantee which one of these will execute first -->\n<script type=\"module\" async src=\"module1.js\"></script>\n<script type=\"module\" async src=\"module2.js\"></script>\n```\n\nthe `async` causes the script file to be executed as soon as the file is compeleted downloaded and parsed. the order in document does not affect the order in which the scripts are excuted. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.\n\n### 3. use `Worker`\n\n```js\n// load script.js as a script\nlet worker = new Worker('script.js');\n\n// load module.js as a module\nlet worker = new Worker('module.js', { type: 'module' });\n```\n\n## Support for cyclic dependencies\n\n### why support\n\nCyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.\n\nI think this example from nodejs document can clearly explain cyclic dependencies. <https://nodejs.org/api/modules.html#modules_cycles>\n\n```js\n// a.js\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n\n// b.js\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n\n// main.js\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done = %j, b.done = %j', a.done, b.done);\n```\n\nthe output is\n\n```bash\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\n```\n\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`. At that point, `b.js` tries to load `a.js`. In order to prevent an **infinite loop**, an **unfinished copy** of the `a.js` exports object is returned to the `b.js` module. `b.js` then finishes loading, and its exports object is provided to the `a.js` module.\n\n#### related reading material\n\n1.  Nicholas C. Zakas, [Understanding ECMAScript 6](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n2.  Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n\n3.  nodejs document, [Modules](https://nodejs.org/api/modules.html)\n","slug":"learn-es6-modules","published":1,"updated":"2018-04-08T00:33:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgq6iqlf000db86te5upzh8r","content":"<p>A module is Javascript code that automatically runs in <strong>strict</strong> mode with no way opt out.</p>\n<p>module and script are not the same.</p>\n<h2 id=\"import-export\"><a href=\"#import-export\" class=\"headerlink\" title=\"import export\"></a>import export</h2><h3 id=\"1-named-export-several-per-module\"><a href=\"#1-named-export-several-per-module\" class=\"headerlink\" title=\"1. named export (several per module)\"></a>1. named export (several per module)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ lib.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> sqrt = <span class=\"built_in\">Math</span>.sqrt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diag</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sqrt(square(x) + square(y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square, diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">suqare = <span class=\"number\">2</span>; <span class=\"comment\">// throw an error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lib <span class=\"keyword\">from</span> <span class=\"string\">'lib'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>syntax: import { identifiers } from ‘./example.js’ -&gt; module specifier</p>\n</li>\n<li><p>the list of binding to imports is not a destructured object</p>\n</li>\n<li><p>the last one this is called <em>namespace</em> import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.</p>\n</li>\n<li><p>Be sure to include /, ./ or ../ at the begining of the string representing the file for the best compatibility across browsers and node.js.</p>\n</li>\n<li><p>lib.js is only execute once, no matter how many import statements have been decalared. After the code to import the module excutes, the instantiated module is kept in <strong>memory</strong> and reused whenever another import statement reference to it. e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// just execute lib.js once</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>import/export must be used outside condition statement or functions.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> flag; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryImport</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ES6 import statement create <em>read-only</em> bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  name = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, setName &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Nico</span></span><br><span class=\"line\">setName(<span class=\"string\">'Jack'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">name = <span class=\"string\">'Nico'</span>; <span class=\"comment\">// throw an error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>renaming export and import</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> add&#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> add); <span class=\"comment\">// udefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-default-export-one-per-module\"><a href=\"#2-default-export-one-per-module\" class=\"headerlink\" title=\"2. default export (one per module)\"></a>2. default export (one per module)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ myFunc.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main1.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myFunc <span class=\"keyword\">from</span> <span class=\"string\">'myFunc'</span>;</span><br><span class=\"line\">myFunc();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\"></span>) </span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> sum2() &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or a class:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ MyClass.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main2.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MyClass <span class=\"keyword\">from</span> <span class=\"string\">'MyClass'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> inst = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-combine\"><a href=\"#3-combine\" class=\"headerlink\" title=\"3. combine\"></a>3. combine</h3><p>you can use named export and default together</p>\n<p>note: the default must come before the non-defaults in import statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum, &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> sum, name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-re-exporting\"><a href=\"#4-re-exporting\" class=\"headerlink\" title=\"4. re-exporting\"></a>4. re-exporting</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or short</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export with different name</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export everything</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<p>note: by exporting everything, you’re including default as well as any named exports.</p>\n<h3 id=\"5-importing-without-bindings\"><a href=\"#5-importing-without-bindings\" class=\"headerlink\" title=\"5. importing without bindings\"></a>5. importing without bindings</h3><p>Some modules may not export anthing; instead they might only modify object in the gloabal scope. <em>Import without bindings are most likely to be used to create polyfills and shims</em>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.js</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.somethingFancy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./example.js'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">arr.somethingFancy();</span><br></pre></td></tr></table></figure>\n<h2 id=\"loading-modules\"><a href=\"#loading-modules\" class=\"headerlink\" title=\"loading modules\"></a>loading modules</h2><h3 id=\"1-use-lt-script-gt-as-defer\"><a href=\"#1-use-lt-script-gt-as-defer\" class=\"headerlink\" title=\"1. use &lt;\bscript&gt; as defer\"></a>1. use &lt;\bscript&gt; as <code>defer</code></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- load a module JavaScript file --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- include a module inline --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./example.js\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>‘module’ is not a content type like ‘text/javascript’, and browsers ignore <code>&lt;script&gt;</code> elements when type is unrecognized, providing good backwards-compatibility.</p>\n</li>\n<li><p>in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.</p>\n</li>\n<li><p>module sequence; <code>&lt;script type=&quot;module&quot;&gt;</code> always acts as if the <code>defer</code> attribute is applied.</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute second --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./example.js\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>synchronies and sequential: <strong>modules are parsed completely first to dientify all <code>import</code>, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.</strong></li>\n</ul>\n<p>i. download and parse <code>module1.js</code> , recursive download and parse import in <code>module1.js</code>;</p>\n<p>ii. parse inline module</p>\n<p>once loading complete</p>\n<p>iiii. recursive execute <code>import</code> source in <code>module1.js</code>, then execute <code>module1.js</code></p>\n<p>iiiii. recursive execute <code>import</code> source in inline module, then execute inline module</p>\n<h3 id=\"2-use-lt-script-gt-as-async\"><a href=\"#2-use-lt-script-gt-as-async\" class=\"headerlink\" title=\"2. use &lt;\bscript&gt; as async\"></a>2. use &lt;\bscript&gt; as <code>async</code></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- no guarantee which one of these will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>the <code>async</code> causes the script file to be executed as soon as the file is compeleted downloaded and parsed. the order in document does not affect the order in which the scripts are excuted. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.</p>\n<h3 id=\"3-use-Worker\"><a href=\"#3-use-Worker\" class=\"headerlink\" title=\"3. use Worker\"></a>3. use <code>Worker</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load script.js as a script</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'script.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load module.js as a module</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'module.js'</span>, &#123; <span class=\"attr\">type</span>: <span class=\"string\">'module'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Support-for-cyclic-dependencies\"><a href=\"#Support-for-cyclic-dependencies\" class=\"headerlink\" title=\"Support for cyclic dependencies\"></a>Support for cyclic dependencies</h2><h3 id=\"why-support\"><a href=\"#why-support\" class=\"headerlink\" title=\"why support\"></a>why support</h3><p>Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.</p>\n<p>I think this example from nodejs document can clearly explain cyclic dependencies. <a href=\"https://nodejs.org/api/modules.html#modules_cycles\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/api/modules.html#modules_cycles</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in a, b.done = %j'</span>, b.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in b, a.done = %j'</span>, a.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main starting'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in main, a.done = %j, b.done = %j'</span>, a.done, b.done);</span><br></pre></td></tr></table></figure>\n<p>the output is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">main starting</span><br><span class=\"line\">a starting</span><br><span class=\"line\">b starting</span><br><span class=\"line\"><span class=\"keyword\">in</span> b, a.done = <span class=\"literal\">false</span></span><br><span class=\"line\">b <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> a, b.done = <span class=\"literal\">true</span></span><br><span class=\"line\">a <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> main, a.done = <span class=\"literal\">true</span>, b.done = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an <strong>infinite loop</strong>, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its exports object is provided to the <code>a.js</code> module.</p>\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></p>\n</li>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>A module is Javascript code that automatically runs in <strong>strict</strong> mode with no way opt out.</p>\n<p>module and script are not the same.</p>\n<h2 id=\"import-export\"><a href=\"#import-export\" class=\"headerlink\" title=\"import export\"></a>import export</h2><h3 id=\"1-named-export-several-per-module\"><a href=\"#1-named-export-several-per-module\" class=\"headerlink\" title=\"1. named export (several per module)\"></a>1. named export (several per module)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ lib.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> sqrt = <span class=\"built_in\">Math</span>.sqrt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diag</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sqrt(square(x) + square(y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square, diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">suqare = <span class=\"number\">2</span>; <span class=\"comment\">// throw an error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lib <span class=\"keyword\">from</span> <span class=\"string\">'lib'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>syntax: import { identifiers } from ‘./example.js’ -&gt; module specifier</p>\n</li>\n<li><p>the list of binding to imports is not a destructured object</p>\n</li>\n<li><p>the last one this is called <em>namespace</em> import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.</p>\n</li>\n<li><p>Be sure to include /, ./ or ../ at the begining of the string representing the file for the best compatibility across browsers and node.js.</p>\n</li>\n<li><p>lib.js is only execute once, no matter how many import statements have been decalared. After the code to import the module excutes, the instantiated module is kept in <strong>memory</strong> and reused whenever another import statement reference to it. e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// just execute lib.js once</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>import/export must be used outside condition statement or functions.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> flag; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryImport</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ES6 import statement create <em>read-only</em> bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  name = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, setName &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Nico</span></span><br><span class=\"line\">setName(<span class=\"string\">'Jack'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">name = <span class=\"string\">'Nico'</span>; <span class=\"comment\">// throw an error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>renaming export and import</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> add&#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> add); <span class=\"comment\">// udefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-default-export-one-per-module\"><a href=\"#2-default-export-one-per-module\" class=\"headerlink\" title=\"2. default export (one per module)\"></a>2. default export (one per module)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ myFunc.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main1.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myFunc <span class=\"keyword\">from</span> <span class=\"string\">'myFunc'</span>;</span><br><span class=\"line\">myFunc();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\"></span>) </span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> sum2() &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or a class:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ MyClass.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main2.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MyClass <span class=\"keyword\">from</span> <span class=\"string\">'MyClass'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> inst = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-combine\"><a href=\"#3-combine\" class=\"headerlink\" title=\"3. combine\"></a>3. combine</h3><p>you can use named export and default together</p>\n<p>note: the default must come before the non-defaults in import statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum, &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> sum, name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-re-exporting\"><a href=\"#4-re-exporting\" class=\"headerlink\" title=\"4. re-exporting\"></a>4. re-exporting</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or short</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export with different name</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export everything</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<p>note: by exporting everything, you’re including default as well as any named exports.</p>\n<h3 id=\"5-importing-without-bindings\"><a href=\"#5-importing-without-bindings\" class=\"headerlink\" title=\"5. importing without bindings\"></a>5. importing without bindings</h3><p>Some modules may not export anthing; instead they might only modify object in the gloabal scope. <em>Import without bindings are most likely to be used to create polyfills and shims</em>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.js</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.somethingFancy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./example.js'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">arr.somethingFancy();</span><br></pre></td></tr></table></figure>\n<h2 id=\"loading-modules\"><a href=\"#loading-modules\" class=\"headerlink\" title=\"loading modules\"></a>loading modules</h2><h3 id=\"1-use-lt-script-gt-as-defer\"><a href=\"#1-use-lt-script-gt-as-defer\" class=\"headerlink\" title=\"1. use &lt;\bscript&gt; as defer\"></a>1. use &lt;\bscript&gt; as <code>defer</code></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- load a module JavaScript file --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- include a module inline --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./example.js\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>‘module’ is not a content type like ‘text/javascript’, and browsers ignore <code>&lt;script&gt;</code> elements when type is unrecognized, providing good backwards-compatibility.</p>\n</li>\n<li><p>in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.</p>\n</li>\n<li><p>module sequence; <code>&lt;script type=&quot;module&quot;&gt;</code> always acts as if the <code>defer</code> attribute is applied.</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute second --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./example.js\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>synchronies and sequential: <strong>modules are parsed completely first to dientify all <code>import</code>, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.</strong></li>\n</ul>\n<p>i. download and parse <code>module1.js</code> , recursive download and parse import in <code>module1.js</code>;</p>\n<p>ii. parse inline module</p>\n<p>once loading complete</p>\n<p>iiii. recursive execute <code>import</code> source in <code>module1.js</code>, then execute <code>module1.js</code></p>\n<p>iiiii. recursive execute <code>import</code> source in inline module, then execute inline module</p>\n<h3 id=\"2-use-lt-script-gt-as-async\"><a href=\"#2-use-lt-script-gt-as-async\" class=\"headerlink\" title=\"2. use &lt;\bscript&gt; as async\"></a>2. use &lt;\bscript&gt; as <code>async</code></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- no guarantee which one of these will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>the <code>async</code> causes the script file to be executed as soon as the file is compeleted downloaded and parsed. the order in document does not affect the order in which the scripts are excuted. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.</p>\n<h3 id=\"3-use-Worker\"><a href=\"#3-use-Worker\" class=\"headerlink\" title=\"3. use Worker\"></a>3. use <code>Worker</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load script.js as a script</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'script.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load module.js as a module</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'module.js'</span>, &#123; <span class=\"attr\">type</span>: <span class=\"string\">'module'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Support-for-cyclic-dependencies\"><a href=\"#Support-for-cyclic-dependencies\" class=\"headerlink\" title=\"Support for cyclic dependencies\"></a>Support for cyclic dependencies</h2><h3 id=\"why-support\"><a href=\"#why-support\" class=\"headerlink\" title=\"why support\"></a>why support</h3><p>Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.</p>\n<p>I think this example from nodejs document can clearly explain cyclic dependencies. <a href=\"https://nodejs.org/api/modules.html#modules_cycles\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/api/modules.html#modules_cycles</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in a, b.done = %j'</span>, b.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in b, a.done = %j'</span>, a.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main starting'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in main, a.done = %j, b.done = %j'</span>, a.done, b.done);</span><br></pre></td></tr></table></figure>\n<p>the output is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">main starting</span><br><span class=\"line\">a starting</span><br><span class=\"line\">b starting</span><br><span class=\"line\"><span class=\"keyword\">in</span> b, a.done = <span class=\"literal\">false</span></span><br><span class=\"line\">b <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> a, b.done = <span class=\"literal\">true</span></span><br><span class=\"line\">a <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> main, a.done = <span class=\"literal\">true</span>, b.done = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an <strong>infinite loop</strong>, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its exports object is provided to the <code>a.js</code> module.</p>\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></p>\n</li>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules</a></p>\n</li>\n</ol>\n"},{"title":"Learn ES6 Block Binding","date":"2018-05-03T07:07:52.000Z","_content":"\n## Var declaration and hoisting\n\nHoisting: Variable declarations using `var` are treated as if they are at the top of the __function__ (or __global__ scope, if declared outside of a function) regardless of where the actual declaration occurs.\n","source":"_posts/Learn-ES6-Block-Binding.md","raw":"---\ntitle: Learn ES6 Block Binding\ndate: 2018-05-03 00:07:52\ncategories:\n- web\ntags:\n- ECMAScript2015\n- es6\n- var\n- let\n- const\n- block binding\n- hoisting\n---\n\n## Var declaration and hoisting\n\nHoisting: Variable declarations using `var` are treated as if they are at the top of the __function__ (or __global__ scope, if declared outside of a function) regardless of where the actual declaration occurs.\n","slug":"Learn-ES6-Block-Binding","published":1,"updated":"2018-05-03T07:11:41.380Z","_id":"cjgq6uuej001ub86tng57x11j","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Var-declaration-and-hoisting\"><a href=\"#Var-declaration-and-hoisting\" class=\"headerlink\" title=\"Var declaration and hoisting\"></a>Var declaration and hoisting</h2><p>Hoisting: Variable declarations using <code>var</code> are treated as if they are at the top of the <strong>function</strong> (or <strong>global</strong> scope, if declared outside of a function) regardless of where the actual declaration occurs.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Var-declaration-and-hoisting\"><a href=\"#Var-declaration-and-hoisting\" class=\"headerlink\" title=\"Var declaration and hoisting\"></a>Var declaration and hoisting</h2><p>Hoisting: Variable declarations using <code>var</code> are treated as if they are at the top of the <strong>function</strong> (or <strong>global</strong> scope, if declared outside of a function) regardless of where the actual declaration occurs.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjgq6iqlb0008b86tul0py0a2","category_id":"cjgq6iql60004b86tfbkkcspj","_id":"cjgq6iqlh000eb86tgywkfw7p"},{"post_id":"cjgq6iql10000b86twcqk51ss","category_id":"cjgq6iql60004b86tfbkkcspj","_id":"cjgq6iqlh000hb86tqcpcuv4t"},{"post_id":"cjgq6iqlc0009b86t0z9chglv","category_id":"cjgq6iql60004b86tfbkkcspj","_id":"cjgq6iqlh000ib86tiakzau9q"},{"post_id":"cjgq6iqlf000db86te5upzh8r","category_id":"cjgq6iql60004b86tfbkkcspj","_id":"cjgq6iqli000kb86tjl9q6vty"},{"post_id":"cjgq6iql40002b86t4zsiw9gt","category_id":"cjgq6iql60004b86tfbkkcspj","_id":"cjgq6iqli000lb86ts74tdrlr"},{"post_id":"cjgq6iql90006b86t2mkwcy7n","category_id":"cjgq6iqlh000fb86tveod2d0i","_id":"cjgq6iqli000nb86tnfkz17zz"},{"post_id":"cjgq6uuej001ub86tng57x11j","category_id":"cjgq6iql60004b86tfbkkcspj","_id":"cjgq6v50t001xb86tptg8951u"}],"PostTag":[{"post_id":"cjgq6iql10000b86twcqk51ss","tag_id":"cjgq6iql80005b86tmh3xiy2s","_id":"cjgq6iqlf000cb86trr3qh7gw"},{"post_id":"cjgq6iql40002b86t4zsiw9gt","tag_id":"cjgq6iqld000bb86ta8nch41q","_id":"cjgq6iqli000ob86toib2wh8z"},{"post_id":"cjgq6iql40002b86t4zsiw9gt","tag_id":"cjgq6iqlh000gb86twrskzysz","_id":"cjgq6iqli000pb86tloncc486"},{"post_id":"cjgq6iql40002b86t4zsiw9gt","tag_id":"cjgq6iqli000jb86t0n8uoxw1","_id":"cjgq6iqlj000rb86t8znx47kj"},{"post_id":"cjgq6iql90006b86t2mkwcy7n","tag_id":"cjgq6iqli000mb86tcowojao5","_id":"cjgq6iqlj000ub86t2fazcyaq"},{"post_id":"cjgq6iql90006b86t2mkwcy7n","tag_id":"cjgq6iqlj000qb86ts698pu66","_id":"cjgq6iqlj000vb86tmcwzafhz"},{"post_id":"cjgq6iql90006b86t2mkwcy7n","tag_id":"cjgq6iqlj000sb86tjdleslwp","_id":"cjgq6iqlj000xb86tawi6a373"},{"post_id":"cjgq6iqlb0008b86tul0py0a2","tag_id":"cjgq6iqlj000tb86tt96bxx1t","_id":"cjgq6iqlk0011b86tmx1amet1"},{"post_id":"cjgq6iqlb0008b86tul0py0a2","tag_id":"cjgq6iqlj000wb86tqie6xae2","_id":"cjgq6iqlk0012b86tdvjyyp79"},{"post_id":"cjgq6iqlb0008b86tul0py0a2","tag_id":"cjgq6iqlk000yb86t9r467ljc","_id":"cjgq6iqll0014b86thfyvw094"},{"post_id":"cjgq6iqlb0008b86tul0py0a2","tag_id":"cjgq6iqlk000zb86t4vmckwdg","_id":"cjgq6iqll0015b86tqb9y7qco"},{"post_id":"cjgq6iqlc0009b86t0z9chglv","tag_id":"cjgq6iqlk0010b86tsnoq37s9","_id":"cjgq6iqlm0019b86tysol391t"},{"post_id":"cjgq6iqlc0009b86t0z9chglv","tag_id":"cjgq6iqlk0013b86tg7hga3qs","_id":"cjgq6iqlm001ab86t90hriehk"},{"post_id":"cjgq6iqlc0009b86t0z9chglv","tag_id":"cjgq6iqll0016b86t262nvlcl","_id":"cjgq6iqlm001cb86t9j3f1246"},{"post_id":"cjgq6iqlc0009b86t0z9chglv","tag_id":"cjgq6iqll0017b86txwjvzoh0","_id":"cjgq6iqlm001db86tbj1ybq0j"},{"post_id":"cjgq6iqlf000db86te5upzh8r","tag_id":"cjgq6iqlj000tb86tt96bxx1t","_id":"cjgq6iqln001fb86twvcogdgq"},{"post_id":"cjgq6iqlf000db86te5upzh8r","tag_id":"cjgq6iqlj000wb86tqie6xae2","_id":"cjgq6iqln001gb86txpsweabj"},{"post_id":"cjgq6iqlf000db86te5upzh8r","tag_id":"cjgq6iqlm001eb86tlad4w7sj","_id":"cjgq6iqln001hb86thrxzddsj"},{"post_id":"cjgq6uuej001ub86tng57x11j","tag_id":"cjgq6iqlj000tb86tt96bxx1t","_id":"cjgq6v50s001vb86tqm9pa2ny"},{"post_id":"cjgq6uuej001ub86tng57x11j","tag_id":"cjgq6iqlj000wb86tqie6xae2","_id":"cjgq6v50t001wb86tuokzcpsm"},{"post_id":"cjgq6uuej001ub86tng57x11j","tag_id":"cjgq6ml3r001lb86t61sib1hs","_id":"cjgq6vli60021b86t6f6vaeqz"},{"post_id":"cjgq6uuej001ub86tng57x11j","tag_id":"cjgq6ml3s001nb86tvbsm1obu","_id":"cjgq6vli60022b86to697euze"},{"post_id":"cjgq6uuej001ub86tng57x11j","tag_id":"cjgq6ml3r001mb86tzx9mujf8","_id":"cjgq6vli60023b86tguf4lt03"},{"post_id":"cjgq6uuej001ub86tng57x11j","tag_id":"cjgq6ml3r001jb86tj7y3w61d","_id":"cjgq6vli60024b86tv0oe9g9y"},{"post_id":"cjgq6uuej001ub86tng57x11j","tag_id":"cjgq6vli50020b86ta15erdiz","_id":"cjgq6vli60025b86tdm0h800e"}],"Tag":[{"name":"html","_id":"cjgq6iql80005b86tmh3xiy2s"},{"name":"react","_id":"cjgq6iqld000bb86ta8nch41q"},{"name":"react native","_id":"cjgq6iqlh000gb86twrskzysz"},{"name":"xcode","_id":"cjgq6iqli000jb86t0n8uoxw1"},{"name":"hexo","_id":"cjgq6iqli000mb86tcowojao5"},{"name":"blog","_id":"cjgq6iqlj000qb86ts698pu66"},{"name":"github","_id":"cjgq6iqlj000sb86tjdleslwp"},{"name":"ECMAScript2015","_id":"cjgq6iqlj000tb86tt96bxx1t"},{"name":"es6","_id":"cjgq6iqlj000wb86tqie6xae2"},{"name":"iterators","_id":"cjgq6iqlk000yb86t9r467ljc"},{"name":"generators","_id":"cjgq6iqlk000zb86t4vmckwdg"},{"name":"window","_id":"cjgq6iqlk0010b86tsnoq37s9"},{"name":"events","_id":"cjgq6iqlk0013b86tg7hga3qs"},{"name":"capture/bubbling","_id":"cjgq6iqll0016b86t262nvlcl"},{"name":"delegate","_id":"cjgq6iqll0017b86txwjvzoh0"},{"name":"module","_id":"cjgq6iqlm001eb86tlad4w7sj"},{"name":"block binding","_id":"cjgq6ml3r001jb86tj7y3w61d"},{"name":"var","_id":"cjgq6ml3r001lb86t61sib1hs"},{"name":"const","_id":"cjgq6ml3r001mb86tzx9mujf8"},{"name":"let","_id":"cjgq6ml3s001nb86tvbsm1obu"},{"name":"hoisting","_id":"cjgq6vli50020b86ta15erdiz"}]}}