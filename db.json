{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/custom.css","path":"css/custom.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo@2x.png","path":"images/logo@2x.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/anatole/source/images/mylogo.png","path":"images/mylogo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"969c2ecce672fd58f8b2f4974155fe296c8cd02d","modified":1536331210860},{"_id":"themes/anatole/LICENSE","hash":"013aeea58737aaf555e4487dab17f06286597c3d","modified":1536331210867},{"_id":"themes/anatole/README.md","hash":"8e51a41de2ce148db91c3ef60987bc2d2f4ec5d7","modified":1536331210867},{"_id":"themes/anatole/_config.yml","hash":"f52c56b4c891e75279cab02ccd68370cd79a2834","modified":1542030092953},{"_id":"source/_posts/Build-a-Personal-Blog-With-Hexo.md","hash":"11dbf826e50a326ed570ff2c5cb3fbc90eadd06b","modified":1541938519272},{"_id":"source/_posts/2017年中总结.md","hash":"a864edd8751f2a797618d7ca13cfdd53b8ec45ce","modified":1536334011366},{"_id":"source/_posts/Decorator-in-JavaScript.md","hash":"d8b92c3b24ed16ea4ef03034d51c4cfe7480865f","modified":1541938544951},{"_id":"source/_posts/Iterators-and-generators.md","hash":"664a02d7a07be52ad24c43074e2b70682a8f6a3c","modified":1536331210863},{"_id":"source/_posts/Learn-ES6-Block-Binding.md","hash":"e7a3caf3128ec93076bf4194ee1b182d35374262","modified":1540025796035},{"_id":"source/_posts/Run-react-native-app-on-Mac.md","hash":"5870b4b777f8297b91ef75ddeff2225f910344a7","modified":1536331210864},{"_id":"source/_posts/Regret-Minimization-and-Multi-task-Serially.md","hash":"471ab6fca66767b0f6ab83f4655bc0594940c926","modified":1536334446223},{"_id":"source/_posts/Timers-in-JavaScript.md","hash":"19a45aa9f2c1f4b6e714da52dc301c9cb6921183","modified":1541938569804},{"_id":"source/_posts/how-to-disable-copy-paste-for-input.md","hash":"3a1292dcc63b8e4ac328c696e86a82f18d5936f2","modified":1536331210864},{"_id":"source/_posts/learn-es6-modules.md","hash":"12f99d83fde9a18b6ef8ce08c9bbb4e94d60423d","modified":1536331210864},{"_id":"source/_posts/learn-events.md","hash":"7bcd4e9557f73ebc68ec91b18a32fd55324c8f03","modified":1541938643531},{"_id":"source/_posts/华为面试.md","hash":"db9491fed6d99f421b183f5c53677a49f439d642","modified":1536332983568},{"_id":"source/_posts/三月总结.md","hash":"1d0232876be0032e16fc29ec5c952a68b591b983","modified":1536334763593},{"_id":"source/_posts/新工作.md","hash":"e55bdb6ea3e09bf7cf5f89140129119c72784b87","modified":1536333117436},{"_id":"source/_posts/看《杀人回忆》.md","hash":"4ee32f3f5ede0c8af012758aa7131e4faec0f69e","modified":1536334273532},{"_id":"source/about/index.md","hash":"958d3ff4b741fea54d261ed54ae087e4baaa189e","modified":1536331210865},{"_id":"source/_posts/这就算开始吧.md","hash":"bdba816d09c7ffa7d686466eff0f4dd97e7b45b0","modified":1536331580482},{"_id":"source/categories/index.md","hash":"2029d39cc68b2fc09655d126cfc51374bba153ff","modified":1536331210865},{"_id":"source/tags/index.md","hash":"771e3964b6e5ce39dcb5adb87be4c17b9783f632","modified":1536331210866},{"_id":"themes/anatole/layout/archive.jade","hash":"52b73d18420af570ece4e749985a8c548e7571ea","modified":1542031048844},{"_id":"themes/anatole/layout/category.jade","hash":"a39c7e5bfbef271031e357089eca11a8644da6b6","modified":1536331210867},{"_id":"themes/anatole/layout/index.jade","hash":"ab8828a0e8d7595b0931247debcdab649864e5db","modified":1542031173941},{"_id":"themes/anatole/layout/page.jade","hash":"300e3fa98fd7cb2627589d3555ab4863cfeedd0c","modified":1536331210868},{"_id":"themes/anatole/layout/mixins.jade","hash":"0e54fc9b01a12b35261e6c41234c0632ccc54c68","modified":1542031796613},{"_id":"themes/anatole/layout/tag.jade","hash":"2d527a5ff924a036ed040b1055b6a7d80113ab50","modified":1542029594147},{"_id":"themes/anatole/layout/post.jade","hash":"0ac8a18916de4ea3fe48d1ff1fa65002a6dd4d43","modified":1542032041624},{"_id":"themes/anatole/layout/partial/footer.jade","hash":"aba48a32c8cc9809d8e796a7f87dac0d8761afc1","modified":1542029951163},{"_id":"themes/anatole/layout/partial/comments.jade","hash":"793f056f968a64f2a540756c0a5e11a0e894fe93","modified":1542030256724},{"_id":"themes/anatole/layout/partial/head.jade","hash":"cf36128982ca1197fff6c6b630220609ea1fa568","modified":1542032743147},{"_id":"themes/anatole/layout/partial/layout.jade","hash":"b4bea3d8235cca77c7338870a1bb322a0c662ad4","modified":1536331210869},{"_id":"themes/anatole/layout/partial/nav.jade","hash":"759d6c720bc3c9862350b09d5e36f0da62ba6c3b","modified":1542032641739},{"_id":"themes/anatole/layout/partial/sidebar.jade","hash":"b4aa4289b4a8cbfbb207e733fe1a02c86ebeed7c","modified":1536331210870},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"aad20484db2d30298553e5e54212ddf3fbc0164b","modified":1542029277759},{"_id":"themes/anatole/source/css/custom.css","hash":"dd127bc7e05e009b71aab5d71469cdf43ef78ee2","modified":1542032705531},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1536331210873},{"_id":"themes/anatole/source/css/style.css","hash":"14063ce487c2848c2ebfa7c365f7ba0635023e83","modified":1542029368000},{"_id":"themes/anatole/source/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1536331210873},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1536331210874},{"_id":"themes/anatole/source/images/favicon.png","hash":"d659236704308954da9d64b101c4f54cc3f3255c","modified":1536331210876},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1536331210875},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1536331210880},{"_id":"themes/anatole/source/images/logo@2x.png","hash":"49c3fa97724abf53861bf11356ea9ba5bcb11576","modified":1536331210876},{"_id":"themes/anatole/source/images/logo.png","hash":"41bdf2ebd8cc193ad82a211758af827d891b1a90","modified":1536331210876},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1536331210880},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1536331210875},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1536331210875},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1536331210882},{"_id":"themes/anatole/source/images/mylogo.png","hash":"bb12c3110592128245b8202eae6ddcb2acba7e5f","modified":1536331210879},{"_id":"themes/cactus/.gitignore","hash":"c5345a2c5fa6c136dbe2020a405e541b4755a259","modified":1542026276779},{"_id":"themes/cactus/.jshintrc","hash":"2548bd6ce44422edc7e6f9f68061ab47f26c4f57","modified":1542026276779},{"_id":"themes/cactus/.stylintrc","hash":"eb5f48e83657928cb0cbee031373b2cd36ca0083","modified":1542026276780},{"_id":"themes/cactus/LICENSE","hash":"346ece39a983b0e7858c11f785cd846cef9eb875","modified":1542026276780},{"_id":"themes/cactus/README.md","hash":"6b0c6ea10c3a68c3788f2c81065bad37699dc6a7","modified":1542026276780},{"_id":"themes/cactus/_config.yml","hash":"fbb7b435f15970e746f46a33a14562eea90cbf1b","modified":1542026276780},{"_id":"themes/cactus/gulpfile.js","hash":"2bae290993507026a509665ee5a5326b616f8d68","modified":1542026276780},{"_id":"themes/cactus/package.json","hash":"5bbdbc429e9d46acf97baf7ac5654edde0781064","modified":1542026276786},{"_id":"themes/cactus/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1542026276772},{"_id":"themes/cactus/.git/config","hash":"c9a0b9fc0b92d2337dc125357f2bb7c648badb22","modified":1542026276774},{"_id":"themes/cactus/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1542026256760},{"_id":"themes/cactus/.git/index","hash":"4b978a5207cc0daddc83624427a8ebb66e5095e6","modified":1542026276862},{"_id":"themes/cactus/.git/packed-refs","hash":"bea3431f7b90058a5ce306e4ff17d3294d1903d3","modified":1542026276769},{"_id":"themes/cactus/languages/ca.yml","hash":"b79dd2c21dc6697c635e92db1f661a4b8d5d2305","modified":1542026276780},{"_id":"themes/cactus/languages/default.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1542026276781},{"_id":"themes/cactus/languages/en.yml","hash":"ea91a271db1a49386f97955ed72b2a668e2aea5e","modified":1542026276781},{"_id":"themes/cactus/languages/es.yml","hash":"2b1fc8b0d636123e9ee39017fa20053bd1913a5a","modified":1542026276781},{"_id":"themes/cactus/languages/fa.yml","hash":"63f32e50953af1c4bd0308a4fca5862b5287c2cb","modified":1542026276781},{"_id":"themes/cactus/languages/fr.yml","hash":"4fea266d3c522903f3eee4fffee6e66c44775005","modified":1542026276781},{"_id":"themes/cactus/languages/it.yml","hash":"62800bcae1f2d2454f87f4bcf4d7593848424f61","modified":1542026276781},{"_id":"themes/cactus/languages/nl.yml","hash":"ac0573352ad2c737a7686bcca498b985e7bd6447","modified":1542026276781},{"_id":"themes/cactus/languages/pl.yml","hash":"8a2d6dc874d86c38d42c2c861c39590647b5d536","modified":1542026276781},{"_id":"themes/cactus/languages/pt-br.yml","hash":"4859aba788a050c2d5d0b997693b0c8c24b349f7","modified":1542026276782},{"_id":"themes/cactus/languages/ru.yml","hash":"81b57fcd1977ef534f4bf303dbc1b4710cc7f057","modified":1542026276782},{"_id":"themes/cactus/languages/tr.yml","hash":"2702914007e6bade9d6861078c0e179ac05bf48c","modified":1542026276782},{"_id":"themes/cactus/languages/zh-CN.yml","hash":"142004800bd580f8ee2f0eba7345c1725a5e2e5e","modified":1542026276782},{"_id":"themes/cactus/layout/archive.ejs","hash":"b5e70bd2780d044b94e22ce8af0afb114c2a6eae","modified":1542026276786},{"_id":"themes/cactus/layout/index.ejs","hash":"2bb56a08ca4dcd9e37170be04ec791fffce8727a","modified":1542026276786},{"_id":"themes/cactus/layout/layout.ejs","hash":"ad0f48fca26b3670c9fbcb3e61bfbaa62dc33ab2","modified":1542026276786},{"_id":"themes/cactus/layout/page.ejs","hash":"c5465d5315a7544aa466b01fd8cfb62917a8bb1d","modified":1542026276786},{"_id":"themes/cactus/layout/post.ejs","hash":"a7d164ce888a60cd3eddd9c04bc6762428fa66bb","modified":1542026276786},{"_id":"themes/cactus/scripts/merge-configs.js","hash":"2048c3415d96b17b9d84aa44bc0c25f1210525f8","modified":1542026276787},{"_id":"themes/cactus/scripts/meta.js","hash":"fa6055a39851c9953d033e70c1614547b94dce60","modified":1542026276787},{"_id":"themes/cactus/scripts/page_title.js","hash":"fa662dbdb82779af1b95e35ed7ccdf4866a53dee","modified":1542026276787},{"_id":"themes/cactus/scripts/thumbnail.js","hash":"df8829fd8c3119650037eba5ec11bdce06acff9d","modified":1542026276787},{"_id":"themes/cactus/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1542026256763},{"_id":"themes/cactus/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1542026256761},{"_id":"themes/cactus/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1542026256763},{"_id":"themes/cactus/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1542026256766},{"_id":"themes/cactus/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1542026256767},{"_id":"themes/cactus/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1542026256762},{"_id":"themes/cactus/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1542026256767},{"_id":"themes/cactus/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1542026256762},{"_id":"themes/cactus/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1542026256764},{"_id":"themes/cactus/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1542026256764},{"_id":"themes/cactus/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1542026256767},{"_id":"themes/cactus/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1542026256759},{"_id":"themes/cactus/.git/logs/HEAD","hash":"ebabc1f6950815f7b2ba7a174e09327c3c6e393e","modified":1542026276773},{"_id":"themes/cactus/layout/_partial/comments.ejs","hash":"4cf8d0059e5f8bc8ae1dd1a426293583fd398052","modified":1542026276782},{"_id":"themes/cactus/layout/_partial/footer.ejs","hash":"c3a80e347cb11022baf5e65fb4d0209b8d205693","modified":1542026276782},{"_id":"themes/cactus/layout/_partial/head.ejs","hash":"753dcb513c6f21f6f46e673942c7261cf50da886","modified":1542026276783},{"_id":"themes/cactus/layout/_partial/header.ejs","hash":"9b2b7d6e9ab514107adf408c7ec8530fd612b3d5","modified":1542026276783},{"_id":"themes/cactus/layout/_partial/pagination.ejs","hash":"23bf862b3b8a3cd831850504d9b5a24d21b005e7","modified":1542026276783},{"_id":"themes/cactus/layout/_partial/scripts.ejs","hash":"78e3e290ab8bb6450a04b2a9c7c5b7b3da74abb8","modified":1542026276785},{"_id":"themes/cactus/layout/_partial/search.ejs","hash":"8b4bf9cf5db0ce762a31fc3baae0f2fc004bece4","modified":1542026276785},{"_id":"themes/cactus/layout/_partial/styles.ejs","hash":"be1b54388eb02176dd4722285dda19e3dce2e62e","modified":1542026276785},{"_id":"themes/cactus/source/css/_extend.styl","hash":"2ff73bd3dbdb58fa69cbadb2a1c0ed966812ce88","modified":1542026276788},{"_id":"themes/cactus/source/css/_fonts.styl","hash":"354809b5a64e8a47a66c66fd1a28ac597c1460a6","modified":1542026276788},{"_id":"themes/cactus/source/css/_mixins.styl","hash":"1a9e309523df9685e8d088dcff0a809c58e2c392","modified":1542026276799},{"_id":"themes/cactus/source/css/_util.styl","hash":"2bfeb2e2605dd5235693b00c71a212646d2e0410","modified":1542026276803},{"_id":"themes/cactus/source/css/_variables.styl","hash":"02079fb71b7d1c01d15fa512a1948ad4cbb416b5","modified":1542026276803},{"_id":"themes/cactus/source/css/rtl.styl","hash":"98355abe9ef3a398a5b4cb40d3d33bf86ac8d1d4","modified":1542026276803},{"_id":"themes/cactus/source/css/style.styl","hash":"935843090dc40797a1e85181253ffe169b883131","modified":1542026276804},{"_id":"themes/cactus/source/images/apple-touch-icon.png","hash":"57e2def34682655f41a0be2d083f16765ba7858b","modified":1542026276805},{"_id":"themes/cactus/source/images/favicon-192x192.png","hash":"96e6fcbbb13a5914a6131391e210eb7dfd13d692","modified":1542026276805},{"_id":"themes/cactus/source/images/favicon.ico","hash":"189f9842bcb79a6f8f9e8445bc8bbd773443826b","modified":1542026276805},{"_id":"themes/cactus/source/js/main.js","hash":"584c5a69ac81a483a1c4377a2e2cf326c2795e7b","modified":1542026276808},{"_id":"themes/cactus/source/js/search.js","hash":"a74d0c601f820160825a2e4ad13618074d714933","modified":1542026276808},{"_id":"themes/cactus/.git/refs/heads/master","hash":"42a73ffd83fd6c2c04589af4980bfba4642aeac7","modified":1542026276773},{"_id":"themes/cactus/layout/_partial/post/actions_desktop.ejs","hash":"38aadd1ed890303dde582b722486138afee09b0a","modified":1542026276783},{"_id":"themes/cactus/layout/_partial/post/actions_mobile.ejs","hash":"79b234ff3c264e66b2e71c819228e62bf92b48e4","modified":1542026276784},{"_id":"themes/cactus/layout/_partial/post/category.ejs","hash":"b5bfa049f17868fb09d9d2a7e1d5279fa0381d37","modified":1542026276784},{"_id":"themes/cactus/layout/_partial/post/date.ejs","hash":"12a4a7ba6334e3e5c03d9a9601d7779a27c2e082","modified":1542026276784},{"_id":"themes/cactus/layout/_partial/post/gallery.ejs","hash":"9aecd8908e8a684f33dc20c02497c0f1774137c7","modified":1542026276784},{"_id":"themes/cactus/layout/_partial/post/share.ejs","hash":"847a400e79b775246ca9067e40c3f104d571413d","modified":1542026276784},{"_id":"themes/cactus/layout/_partial/post/tag.ejs","hash":"e08fae30da060f49c087f6c121868b08eb55c795","modified":1542026276784},{"_id":"themes/cactus/layout/_partial/post/title.ejs","hash":"a060f1c6e3718494a6b1d0e1981ea0bf4e549828","modified":1542026276785},{"_id":"themes/cactus/source/css/_colors/classic.styl","hash":"0f0ec41a4165814ce69688425d5ac4d701b7cc70","modified":1542026276787},{"_id":"themes/cactus/source/css/_colors/dark.styl","hash":"9c9655b42b85f754b8a573a1d4634c23c680e1bf","modified":1542026276788},{"_id":"themes/cactus/source/css/_colors/light.styl","hash":"d09f781cb02394850737b3a9efc6693307d5bf09","modified":1542026276788},{"_id":"themes/cactus/source/css/_colors/white.styl","hash":"2b25ad24573bded8b42f9d80112eab9fadbed1a5","modified":1542026276788},{"_id":"themes/cactus/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1542026276788},{"_id":"themes/cactus/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1542026276788},{"_id":"themes/cactus/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1542026276789},{"_id":"themes/cactus/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1542026276789},{"_id":"themes/cactus/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1542026276789},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1542026276789},{"_id":"themes/cactus/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1542026276789},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1542026276790},{"_id":"themes/cactus/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1542026276790},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1542026276790},{"_id":"themes/cactus/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1542026276790},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1542026276791},{"_id":"themes/cactus/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1542026276791},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1542026276791},{"_id":"themes/cactus/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1542026276791},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1542026276791},{"_id":"themes/cactus/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1542026276791},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1542026276792},{"_id":"themes/cactus/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1542026276792},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1542026276792},{"_id":"themes/cactus/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1542026276792},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1542026276792},{"_id":"themes/cactus/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1542026276792},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1542026276792},{"_id":"themes/cactus/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1542026276793},{"_id":"themes/cactus/source/css/_highlight/brown-paper.styl","hash":"c2326ba20a5020a66ca7895258d18833327d4334","modified":1542026276793},{"_id":"themes/cactus/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1542026276793},{"_id":"themes/cactus/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1542026276793},{"_id":"themes/cactus/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1542026276793},{"_id":"themes/cactus/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1542026276793},{"_id":"themes/cactus/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1542026276794},{"_id":"themes/cactus/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1542026276794},{"_id":"themes/cactus/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1542026276794},{"_id":"themes/cactus/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1542026276794},{"_id":"themes/cactus/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1542026276794},{"_id":"themes/cactus/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1542026276795},{"_id":"themes/cactus/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1542026276795},{"_id":"themes/cactus/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1542026276795},{"_id":"themes/cactus/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1542026276795},{"_id":"themes/cactus/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1542026276795},{"_id":"themes/cactus/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1542026276795},{"_id":"themes/cactus/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1542026276795},{"_id":"themes/cactus/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1542026276795},{"_id":"themes/cactus/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1542026276796},{"_id":"themes/cactus/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1542026276796},{"_id":"themes/cactus/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1542026276796},{"_id":"themes/cactus/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1542026276796},{"_id":"themes/cactus/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1542026276796},{"_id":"themes/cactus/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1542026276796},{"_id":"themes/cactus/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1542026276796},{"_id":"themes/cactus/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1542026276796},{"_id":"themes/cactus/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1542026276797},{"_id":"themes/cactus/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1542026276797},{"_id":"themes/cactus/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1542026276797},{"_id":"themes/cactus/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1542026276797},{"_id":"themes/cactus/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1542026276797},{"_id":"themes/cactus/source/css/_highlight/pojoaque.styl","hash":"4e7b6b046b8575ac749f6aec4e953a62ada27a36","modified":1542026276797},{"_id":"themes/cactus/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1542026276797},{"_id":"themes/cactus/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1542026276797},{"_id":"themes/cactus/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1542026276798},{"_id":"themes/cactus/source/css/_highlight/school-book.styl","hash":"d43560fe519a931ce6da7d57416d7aa148441b83","modified":1542026276798},{"_id":"themes/cactus/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1542026276798},{"_id":"themes/cactus/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1542026276798},{"_id":"themes/cactus/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1542026276798},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1542026276798},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1542026276798},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1542026276799},{"_id":"themes/cactus/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1542026276799},{"_id":"themes/cactus/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1542026276799},{"_id":"themes/cactus/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1542026276799},{"_id":"themes/cactus/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1542026276799},{"_id":"themes/cactus/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1542026276799},{"_id":"themes/cactus/source/css/_partial/archive.styl","hash":"ef8fc52337c4c7b010cad7c427cb78009b30f9d8","modified":1542026276800},{"_id":"themes/cactus/source/css/_partial/article.styl","hash":"2c0569b6ba624160701e69688ca02ecdf24c2ac6","modified":1542026276801},{"_id":"themes/cactus/source/css/_partial/categories.styl","hash":"a43f00e61b3507f130b8a3f8108a4eeca147c2a0","modified":1542026276801},{"_id":"themes/cactus/source/css/_partial/comments.styl","hash":"1e90f1fb9d4c155df518cacb5a537e9de9c042c1","modified":1542026276801},{"_id":"themes/cactus/source/css/_partial/footer.styl","hash":"d9b13e402808175dc90761cc4fdfe3d4808034f8","modified":1542026276801},{"_id":"themes/cactus/source/css/_partial/header.styl","hash":"662667942cc9a2caf55caa84a0fc73617d0c3aa4","modified":1542026276801},{"_id":"themes/cactus/source/css/_partial/index.styl","hash":"59c99f4ea3a73bf47ce030df166c5e33d5de31fb","modified":1542026276801},{"_id":"themes/cactus/source/css/_partial/pagination.styl","hash":"950bf517bbe7adb9a9aa4eb5ddec74ffc7598787","modified":1542026276802},{"_id":"themes/cactus/source/css/_partial/search.styl","hash":"159be002780c62a77f46947cf854a7342fba24f4","modified":1542026276802},{"_id":"themes/cactus/source/css/_partial/tags.styl","hash":"d571d5c7c960300d29c5f0ec3fe1140322ecd6b3","modified":1542026276803},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff","hash":"37443d0040f0d7af381c955e4c15919a15d0349e","modified":1542026276847},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.woff2","hash":"0a257c8b60e0f20802c1dc8daeed2d3cb0d44f17","modified":1542026276847},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff","hash":"df15fd1e74b6f4a50bea57e2b44d9627f38495b5","modified":1542026276850},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.woff2","hash":"62447a951d48b21c4696ae72df4bc4adef636e26","modified":1542026276850},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff","hash":"32ae5c0d1d5943c8bb8e0f6ab07c3269c6f8b8a8","modified":1542026276853},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.woff2","hash":"ef07a250766fea840c1049e67c0405d9216ee0a8","modified":1542026276854},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff","hash":"f5653059b2a5929516e4aab02329a978600b9b67","modified":1542026276856},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.woff2","hash":"668400ae92700965f03f2371faaee0ab8c8347c3","modified":1542026276856},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff","hash":"ad4d46a99a1daf6353c86c79ac3a2b030213859c","modified":1542026276858},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.woff2","hash":"c3be79b553ec394db71268d604b1d29183b867dc","modified":1542026276858},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff","hash":"bbee70033f0f5882e9869e417b69c6a38f56f187","modified":1542026276861},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.woff2","hash":"30ce165216db078951a690a6ad665b9b78f5dd81","modified":1542026276861},{"_id":"themes/cactus/source/lib/vazir-font/font-face.css","hash":"8f2bf6b59ae1f2ed4c2fead6cea4b8314fcf62e5","modified":1542026276861},{"_id":"themes/cactus/.git/objects/pack/pack-edb1ad8e21e0ee8e35cc9dfe87e7d73bbd38eca5.idx","hash":"3f698d0552e41d78ee600706e57d72304a724511","modified":1542026276759},{"_id":"themes/cactus/source/images/logo.png","hash":"0e3029251dfda26adee2761f71377297e8c26871","modified":1542026276807},{"_id":"themes/cactus/source/lib/jquery/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1542026276826},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.eot","hash":"13d026ff857c853cbd0dc519b6e58669db309441","modified":1542026276845},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Black.ttf","hash":"594dc3344ad14903c247615427d1009709f0f5a4","modified":1542026276846},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.eot","hash":"f76ec625e15522ff60d21f7a9a3b71c65bc27556","modified":1542026276848},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Bold.ttf","hash":"2e6c9df9f775373fb1988ae8529aa8f05313dae6","modified":1542026276849},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.eot","hash":"3edffd7bb61eee8cd46b57225f9f9e5264e3362b","modified":1542026276851},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Light.ttf","hash":"9f1e2934098a6a4a7c5584c8f3fa24a707070da3","modified":1542026276853},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.eot","hash":"1f5a73db7947ef22c8a2bb19d6449b80496c03c4","modified":1542026276854},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Medium.ttf","hash":"295f7e02c9b157e7ea63ad09613b00ceab85c5cd","modified":1542026276855},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.eot","hash":"08e1503d1181188690fd9c81860d6c890c1465f6","modified":1542026276857},{"_id":"themes/cactus/source/lib/vazir-font/Vazir-Thin.ttf","hash":"a6aa450ee6e0f85786474ca6b04827ef97e81af4","modified":1542026276857},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.eot","hash":"31a9219c25fe1991fb745ec8dbbcf45c6094a702","modified":1542026276859},{"_id":"themes/cactus/source/lib/vazir-font/Vazir.ttf","hash":"f22b219824026e490a581ddb3b36b07997dff0e3","modified":1542026276860},{"_id":"themes/cactus/.git/logs/refs/heads/master","hash":"ebabc1f6950815f7b2ba7a174e09327c3c6e393e","modified":1542026276773},{"_id":"themes/cactus/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1542026276772},{"_id":"themes/cactus/source/css/_partial/post/actions_desktop.styl","hash":"4ef72ea70f7c840b2843bf7717aaafae3b6fc241","modified":1542026276802},{"_id":"themes/cactus/source/css/_partial/post/actions_mobile.styl","hash":"0d2966c1d870392476864af8ee3ba312ba30cb82","modified":1542026276802},{"_id":"themes/cactus/source/lib/font-awesome/css/all.min.css","hash":"cf1a3fd771900af34f2af22142beecfb47367548","modified":1542026276808},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"d902f8db3e021155f177f698a252fb98d6e61768","modified":1542026276816},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"42ff503f20e97503cef8e5b2ec10ae07699d7c01","modified":1542026276817},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"c140085833a38abec6b7df99d4ccac93eb266031","modified":1542026276818},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"7b3f44b4d3028f3c87ddf0f4bd62511c9bf4a87e","modified":1542026276819},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"9784edb76f8a2ed595ea4bf74d46cda4eff3b303","modified":1542026276819},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"92da6e3c7121e21cdfde25ef08797a3937a683e1","modified":1542026276826},{"_id":"themes/cactus/source/lib/justified-gallery/css/justifiedGallery.min.css","hash":"92bb6e468a1db7fbd99ccb960e15e28572254263","modified":1542026276827},{"_id":"themes/cactus/source/lib/justified-gallery/js/jquery.justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1542026276827},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"644ece8263d2f96b087eebf7f6d4e309e5898eb5","modified":1542026276809},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"19e302760e39e25a5f8d90d6cd0164ef6cd74f8c","modified":1542026276816},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"f9d835a0f9248b1bb33d66968e87c4a50103ed8d","modified":1542026276816},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"80d33a73cbb60e206ef6f5c898988641576c7dda","modified":1542026276826},{"_id":"themes/cactus/.git/logs/refs/remotes/origin/HEAD","hash":"ebabc1f6950815f7b2ba7a174e09327c3c6e393e","modified":1542026276771},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"33e86c0ad6fb9c5c0c8c2af4cb2d790c6b14a8aa","modified":1542026276818},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"10740942ec6b3f4985529d343402d0bf32f9f847","modified":1542026276820},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"c445864a9646948e0d7ff44930ad732ee61427d8","modified":1542026276825},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-BoldItalic.ttf","hash":"b7d24ab1e4fad720f31a2b0cca1904ce1740d846","modified":1542026276836},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-BoldItalic.ttf","hash":"b542b9591fbf33925d93f0695b6e123a9f0cfd43","modified":1542026276841},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-BoldItalic.ttf","hash":"926035f0156cccf1b0ca507347f39bf9c510f51e","modified":1542026276843},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Italic.ttf","hash":"9a23c6898b0943bd3d96c04df9a0f66e919451d8","modified":1542026276838},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Italic.ttf","hash":"93ebc5098cf57a32b7b8d297681f31692c09bdfa","modified":1542026276842},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Italic.ttf","hash":"9d757cc9f928fc83b2133283dd639c12b11d94ad","modified":1542026276844},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Bold.ttf","hash":"34f7db59f1d023294e69976aa20b7d52b86165a4","modified":1542026276834},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGL-Regular.ttf","hash":"6c090d6bff3928fbf8a5f4104e58ed7f421aea7c","modified":1542026276839},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Bold.ttf","hash":"58be4b7760e9a84daa81929d046f9a15c4fd1c1a","modified":1542026276840},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGM-Regular.ttf","hash":"20ce1fc7ae1254558ca044ae48283faaa58897e5","modified":1542026276842},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Bold.ttf","hash":"f9918fb93d6ab6850f5d38069a999c311af78816","modified":1542026276843},{"_id":"themes/cactus/source/lib/meslo-LG/MesloLGS-Regular.ttf","hash":"de559f8d70d5b1ab2810597bfd0b1b9506f3ef01","modified":1542026276845},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"b0bb9e6ac7709206b9510f1718516d89aead5b21","modified":1542026276814},{"_id":"themes/cactus/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"ed6c1ed8f24df909f40fe5e5c652d7ff9570c821","modified":1542026276824},{"_id":"themes/cactus/.git/objects/pack/pack-edb1ad8e21e0ee8e35cc9dfe87e7d73bbd38eca5.pack","hash":"b985c902f4be762347c1e5a257a1c02161c6b5c8","modified":1542026276757},{"_id":"themes/anatole/layout/projects.jade","hash":"1317a0f1cc0fc2299f423a8a1f8f3637c48d7dd0","modified":1542032551132}],"Category":[{"name":"tech","_id":"cjoeadx3n0004ajs64gctce1w"},{"name":"life","_id":"cjoeadx3t000aajs6bnsupups"},{"name":"web","_id":"cjoeadx43000fajs6385dpfu3"}],"Data":[],"Page":[{"title":"about","date":"2017-04-08T10:23:22.000Z","_content":"This is about page.\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-04-08 03:23:22\n---\nThis is about page.\n","updated":"2018-09-07T14:40:10.865Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjoeadx3j0001ajs6b218koqr","content":"<p>This is about page.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is about page.</p>\n"},{"title":"categories","date":"2017-04-10T07:03:14.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-04-10 00:03:14\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-09-07T14:40:10.865Z","path":"categories/index.html","layout":"page","_id":"cjoeadx3m0003ajs6xd8k65q1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-04-10T07:03:21.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-10 00:03:21\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-09-07T14:40:10.866Z","path":"tags/index.html","layout":"page","_id":"cjoeadx3q0007ajs67jchfjta","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Build a Personal Blog With Hexo","date":"2017-04-10T05:50:50.000Z","_content":"\nAfter spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I'm going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.\n\nBefore we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.\n\nThis article has five sections as follows:\n\n* Install Hexo\n* Deploy on Github\n* Add new layouts\n* Decorate with new Theme\n* Add Busuanzi & Disqus & Google Analytics\n\n## Install Hexo\n\n```bash\n$ npm install hexo-cli -g\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\nAfter the npm installation, you can now run the server:\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\nAt this time, go to `localhost:4000`, and you should see your blog now has a \"Hello World\" article with default theme.\n\n#### Deploy on Github\n\nYou can follow [Github Pages](https://pages.github.com/) to create a repo in your github. After that, you can `git clone` with your https or ssh url to your local.\nThen back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:\n\n```bash\n$ npm install hexo-deployer-git --save\n```\n\nThen update the `_config.yaml` file by adding these code in the bottom:\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: <your blog repo ssh or https url>\n  branch: master\n```\n\nAt this time, we can deploy the source code to the github repo:\n\n```bash\n$ hexo deploy\n```\n\n**TIP**: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:\n\n```bash\n$ hexo clean\n```\n\nThis command will clean the cache file (`db.json`) and generate files (`public`).\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\nNow, you can take a look at your blog in your browser.\n\n#### Add new layouts\n\n```bash\nhexo new post <title>\n```\n\nif met this fatal error, try install `hexo-deployer-git` again.\n\n```bash\nError: fatal: in unpopulated submodule '.deploy_git'\n```\n\n```bash\nnpm install hexo-deployer-git --save\nrm -rf .deploy_git\nhexo g\nhexo d\nhexo clean\n```\n","source":"_posts/Build-a-Personal-Blog-With-Hexo.md","raw":"---\ntitle: Build a Personal Blog With Hexo\ncategories: \n- tech\ntags: \n- hexo\n- blog\n- github\ndate: 2017-04-09 22:50:50\n---\n\nAfter spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I'm going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.\n\nBefore we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.\n\nThis article has five sections as follows:\n\n* Install Hexo\n* Deploy on Github\n* Add new layouts\n* Decorate with new Theme\n* Add Busuanzi & Disqus & Google Analytics\n\n## Install Hexo\n\n```bash\n$ npm install hexo-cli -g\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\nAfter the npm installation, you can now run the server:\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\nAt this time, go to `localhost:4000`, and you should see your blog now has a \"Hello World\" article with default theme.\n\n#### Deploy on Github\n\nYou can follow [Github Pages](https://pages.github.com/) to create a repo in your github. After that, you can `git clone` with your https or ssh url to your local.\nThen back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:\n\n```bash\n$ npm install hexo-deployer-git --save\n```\n\nThen update the `_config.yaml` file by adding these code in the bottom:\n\n```bash\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: <your blog repo ssh or https url>\n  branch: master\n```\n\nAt this time, we can deploy the source code to the github repo:\n\n```bash\n$ hexo deploy\n```\n\n**TIP**: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:\n\n```bash\n$ hexo clean\n```\n\nThis command will clean the cache file (`db.json`) and generate files (`public`).\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n\nNow, you can take a look at your blog in your browser.\n\n#### Add new layouts\n\n```bash\nhexo new post <title>\n```\n\nif met this fatal error, try install `hexo-deployer-git` again.\n\n```bash\nError: fatal: in unpopulated submodule '.deploy_git'\n```\n\n```bash\nnpm install hexo-deployer-git --save\nrm -rf .deploy_git\nhexo g\nhexo d\nhexo clean\n```\n","slug":"Build-a-Personal-Blog-With-Hexo","published":1,"updated":"2018-11-11T12:15:19.272Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx3d0000ajs6xv98k0da","content":"<p>After spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I’m going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.</p>\n<p>Before we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.</p>\n<p>This article has five sections as follows:</p>\n<ul>\n<li>Install Hexo</li>\n<li>Deploy on Github</li>\n<li>Add new layouts</li>\n<li>Decorate with new Theme</li>\n<li>Add Busuanzi &amp; Disqus &amp; Google Analytics</li>\n</ul>\n<h2 id=\"Install-Hexo\"><a href=\"#Install-Hexo\" class=\"headerlink\" title=\"Install Hexo\"></a>Install Hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>After the npm installation, you can now run the server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<p>At this time, go to <code>localhost:4000</code>, and you should see your blog now has a “Hello World” article with default theme.</p>\n<h4 id=\"Deploy-on-Github\"><a href=\"#Deploy-on-Github\" class=\"headerlink\" title=\"Deploy on Github\"></a>Deploy on Github</h4><p>You can follow <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a> to create a repo in your github. After that, you can <code>git clone</code> with your https or ssh url to your local.<br>Then back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>Then update the <code>_config.yaml</code> file by adding these code in the bottom:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;your blog repo ssh or https url&gt;</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>At this time, we can deploy the source code to the github repo:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p><strong>TIP</strong>: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>This command will clean the cache file (<code>db.json</code>) and generate files (<code>public</code>).</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p>Now, you can take a look at your blog in your browser.</p>\n<h4 id=\"Add-new-layouts\"><a href=\"#Add-new-layouts\" class=\"headerlink\" title=\"Add new layouts\"></a>Add new layouts</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>if met this fatal error, try install <code>hexo-deployer-git</code> again.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">'.deploy_git'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>After spending several nights working on my personal blog with Hexo, I finished the structure work and deployed it with Github Pages. Compare to Wordpress, I think Hexo is more customizable and easier to handle as a developer. Hence I’m going to write down this tutorial to help more people who is also interested in building blog with Hexo, as well as summarizing what I have done for now.</p>\n<p>Before we start, you should already be familiar with npm and git operations. Besides, make sure that your computer has Node and npm installed locally.</p>\n<p>This article has five sections as follows:</p>\n<ul>\n<li>Install Hexo</li>\n<li>Deploy on Github</li>\n<li>Add new layouts</li>\n<li>Decorate with new Theme</li>\n<li>Add Busuanzi &amp; Disqus &amp; Google Analytics</li>\n</ul>\n<h2 id=\"Install-Hexo\"><a href=\"#Install-Hexo\" class=\"headerlink\" title=\"Install Hexo\"></a>Install Hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>After the npm installation, you can now run the server:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<p>At this time, go to <code>localhost:4000</code>, and you should see your blog now has a “Hello World” article with default theme.</p>\n<h4 id=\"Deploy-on-Github\"><a href=\"#Deploy-on-Github\" class=\"headerlink\" title=\"Deploy on Github\"></a>Deploy on Github</h4><p>You can follow <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"noopener\">Github Pages</a> to create a repo in your github. After that, you can <code>git clone</code> with your https or ssh url to your local.<br>Then back to your blog folder. We need to relate your source code to your repo. First install hexo-deployer-git:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n<p>Then update the <code>_config.yaml</code> file by adding these code in the bottom:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Deployment</span></span><br><span class=\"line\"><span class=\"comment\">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git</span><br><span class=\"line\">  repo: &lt;your blog repo ssh or https url&gt;</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>At this time, we can deploy the source code to the github repo:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p><strong>TIP</strong>: Sometime you may encounter that after your deployment, the website still did not change. At this time, you can try run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br></pre></td></tr></table></figure>\n<p>This command will clean the cache file (<code>db.json</code>) and generate files (<code>public</code>).</p>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n<p>Now, you can take a look at your blog in your browser.</p>\n<h4 id=\"Add-new-layouts\"><a href=\"#Add-new-layouts\" class=\"headerlink\" title=\"Add new layouts\"></a>Add new layouts</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<p>if met this fatal error, try install <code>hexo-deployer-git</code> again.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: fatal: <span class=\"keyword\">in</span> unpopulated submodule <span class=\"string\">'.deploy_git'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\">rm -rf .deploy_git</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">hexo d</span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n"},{"title":"2017年中总结","date":"2017-06-07T06:20:20.000Z","_content":"\n最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。\n\n时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。\n\n回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。\n\n对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。\n\n说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。\n\n第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。\n\n总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。\n\n2017/06/06\n","source":"_posts/2017年中总结.md","raw":"---\ntitle: 2017年中总结\ndate: 2017-06-06 23:20:20\ncategories:\n- life\ntags:\n---\n\n最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。\n\n时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。\n\n回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。\n\n对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。\n\n说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。\n\n第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。\n\n总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。\n\n2017/06/06\n","slug":"2017年中总结","published":1,"updated":"2018-09-07T15:26:51.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx3k0002ajs608v8eno9","content":"<p>最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。</p>\n<p>时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。</p>\n<p>回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。</p>\n<p>对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。</p>\n<p>说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。</p>\n<p>第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。</p>\n<p>总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。</p>\n<p>2017/06/06</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近很累，一直在做商业软件，早上九点半到晚上十一点。这周一连上了六天班，星期天在家竟然觉得无所事事，倍感空虚。本来还想去公司写写代码，但是想了想还是忍住了。觉得这个状态不太对，生活似乎完全被工作占满。</p>\n<p>时间过得太快，不知不觉已到六月。我来华为刚好三个月了。现在还很清晰的记得去年六月六号刚去 WeHousing 上班。之前没人通知我 dressing code，自己也没问，穿着西裤皮鞋九点就到了办公室。其他人十点多陆陆续续才来，穿的也很随意。自己感觉尤其的格格不入，或许是套在西装里带来的紧张。</p>\n<p>回想过去一年，感觉成熟了一些，伴随而来的是几缕看不见摸不着但又确实存在的焦虑。湾区牛人太多太多，这个 Facebook，那个 Google 或者 Uber。总想着要努力提升自己，但是看到别人达到的高度，又觉得那是可望不可及的妄想。眼瞅许多同龄人甚至更年轻的人都获得更大的成就，站在更高的起点，自己就感到深深的焦虑与紧张。总是计划要学习，但是时间总被工作压榨，活干不完，回到家都已经筋疲力尽。或许真的该好好反思一下自己的时间规划和工作效率。</p>\n<p>对比刚开始工作时候的自己，在解决问题方面，和对工具的使用上，有些提升。还记得刚开始工作的时候，要是一遇到从来没见过的问题，心里就有点慌。总是担心要是解决不了会怎么办。然后在网上找解决方案时也是一头雾水，东搜搜西查查，往往几个小时过去，也没找到搞定的方法。然后就是刚开始的时候，对些开发的工具也是报有很深的恐惧，总是担心自己一个操作失误搞砸。虽然说现在也谈不上非常精通，但是至少不会有举步维艰的感觉了。现在发现，不管是 Git 还是 shell command，也都是熟能生巧，多用，多查，多总结。久了命令也就记下来了。至于遇到业务难题，现在也略微知道些怎么去搜关键词找解决方案了。遇到 bug，也可以静下心来一步一步回溯定位。以前听人说，程序员不过是个熟练工种。现在从我的观察来看，此话似乎不错。在哪都是写代码，要想写得快写得好，无他，但手熟尔。也许过两年眼界变了，体会也大不同。</p>\n<p>说了这些进步，当然也有不足。感触最深的就是思考不足。我想可能的原因有两点，一个是不踏实，到现在还总想着跳槽的事，没有花时间去静下来思考所做的业务。还只停留在接到任务，完成任务的层面。而没有去思考业务本身的逻辑。比如前段时间大家探讨要不要做、怎么做行业模板的问题，看着同事们侃侃而谈，显然是要么之前做的很多，要么是思考了很久，而我就是一头雾水，一时完全没有想法。究其原因，还是平时只关注了代码层面，而没有去想我们这个行业在做什么，在解决什么问题，什么问题还无法解决。这些思考都是我很欠缺的。</p>\n<p>第二，就是探讨问题的时候容易动气。 有个同事，懂得很多，经验也很丰富，我打心眼里很佩服他。但是总是要把事情按他的说法说出来，即使我们说的是同一件事。我有时说着说着就很上头。明明我们在说一个东西，他还一个劲的重复自己的说法，否定你的讲法。虽然事后我也知道很没必要在口头上争个高低，但是有时候就是不由自主的有些动怒。这个问题是一定要改的。逞口舌之利没有任何益处，从他人身上学到东西才是最重要的。还有一个就是学习不要在乎面子。前段时间听他们一直在说“透传”。我也不知道怎么写，也不知道是个什么概念。就私下问了一个同事，你们说的“偷传”到底是个什么东西？同事听了哈哈一笑，告诉我是“透传”，我当时就有点脸红。昨天，还是那个同事，过来跟我说，你这样部署的方式不对，不应该这样。旁边人挺多的，陡然一下，觉得很没面子，虽然有些不快，但我还是厚着脸皮问，那正确的该怎么来嘛，他说了个思路，我说那好我去学习一下，下次再来。我到这个年纪，才认识到在学习这个方面，蠢货的面子不值一分钱。自己原来就是太在意别人看待自己的目光，生怕别人觉得自己不“聪明”，从而不管懂不懂，也不敢提问。现在看来，这种行为，实在是太愚蠢。</p>\n<p>总结了这么多，说说展望吧。虽然刚刚才说现在很浮躁，想着跳槽，但是这也是实属无奈之举。深感与同辈的差距，我只有靠跳槽才能去量化和顶尖高手的差距。当然，钱也是最重要的原因之一。今年已经快过了一半，说说下半年的计划吧。生活方面，希望年底能顺利拿到工作签证，这是最迫切的。接下来希望可以贷款交首付买套房子。最后条件允许，希望能跳槽找一份钱更多的，公司更酷的工作。技术方面想钻研一下 JavaScript，写一些 React。除此之外还要多学学如何部署，自动化，以及 AWS 和 Docker。</p>\n<p>2017/06/06</p>\n"},{"title":"Decorators in JavaScript","date":"2018-10-21T00:14:24.000Z","_content":"\n\n\n#### Decorators in Python\n\nIn Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.\n\n```python\ndef identity(ob):\n    return ob\n\n@identity\ndef myfunc():\n    print \"my function\"\n\nmyfunc()\nprint myfunc\n```\n\n```shell\nmy function\n<function myfunc at 0xb76db17c>\n```\n\n#### ES2016 Decorators\n\nAn ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.\n\n##### Syntax\n\n```js\n// es5\nvar person = { name: 'John' };\n\nfunction addAge(age) {\n  return function(person) {\n    return {\n      age: age,\n      name: person.name,\n    };\n  };\n}\n\nvar newPerson = addAge(30)(person);\nconsole.log(newPerson);\n\n// es6 (babel)\n// this is the decorator factory\nfunction addAgeDecorator(age) {\n  // this is the decorator\n  return function(targetClass) {\n    // do something with 'target' and 'value'...\n    return class {\n      name = new targetClass().name;\n      age = age;\n    };\n  };\n}\n\n@addAgeDecorator(30)\nclass Person {\n  name = 'John';\n}\n\nconsole.log(new Person());\n```\n\n### Decorating a property\n\n```js\nclass Cat {\n  @readonly\n  meow() {\n    console.log(`Meow!`);\n  }\n\n  sing() {\n    console.log(`soft kitty~`);\n  }\n}\n\nfunction readonly(target, name, descriptor) {\n  descriptor.writable = false;\n  return descriptor;\n}\n\nvar Garfield = new Cat();\nGarfield.meow = function() {\n  console.log('I want lasagne!');\n};\nGarfield.sing = function() {\n  console.log(\"Let's rock\");\n};\n\nGarfield.meow();\nGarfield.sing();\n// http://jsfiddle.net/minhuizheng/0h45utcd/5/\n```\n\nexplanation:\n\ntarget — class that the property is a part of  \nname — the name of the property the decorator is modifying  \ndescriptor — property descriptor. Think: object passed to Object.defineProperty\n\n#### Reference and Reading\n\n1. [Exploring EcmaScript Decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841)\n\n2. [Javascript Decorators](https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3)\n\n3. [Decorators](https://www.typescriptlang.org/docs/handbook/decorators.html)\n\n4. [JavaScript Decorators: What They Are and When to Use Them](https://www.sitepoint.com/javascript-decorators-what-they-are/)\n\n5. [React DnD](http://react-dnd.github.io/react-dnd/)\n","source":"_posts/Decorator-in-JavaScript.md","raw":"---\ntitle: Decorators in JavaScript\ndate: 2018-10-20 17:14:24\ncategories:\n  - web\ntags:\n  - ECMAScript2016\n  - es7\n  - decorator\n  - javascript\n---\n\n\n\n#### Decorators in Python\n\nIn Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.\n\n```python\ndef identity(ob):\n    return ob\n\n@identity\ndef myfunc():\n    print \"my function\"\n\nmyfunc()\nprint myfunc\n```\n\n```shell\nmy function\n<function myfunc at 0xb76db17c>\n```\n\n#### ES2016 Decorators\n\nAn ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.\n\n##### Syntax\n\n```js\n// es5\nvar person = { name: 'John' };\n\nfunction addAge(age) {\n  return function(person) {\n    return {\n      age: age,\n      name: person.name,\n    };\n  };\n}\n\nvar newPerson = addAge(30)(person);\nconsole.log(newPerson);\n\n// es6 (babel)\n// this is the decorator factory\nfunction addAgeDecorator(age) {\n  // this is the decorator\n  return function(targetClass) {\n    // do something with 'target' and 'value'...\n    return class {\n      name = new targetClass().name;\n      age = age;\n    };\n  };\n}\n\n@addAgeDecorator(30)\nclass Person {\n  name = 'John';\n}\n\nconsole.log(new Person());\n```\n\n### Decorating a property\n\n```js\nclass Cat {\n  @readonly\n  meow() {\n    console.log(`Meow!`);\n  }\n\n  sing() {\n    console.log(`soft kitty~`);\n  }\n}\n\nfunction readonly(target, name, descriptor) {\n  descriptor.writable = false;\n  return descriptor;\n}\n\nvar Garfield = new Cat();\nGarfield.meow = function() {\n  console.log('I want lasagne!');\n};\nGarfield.sing = function() {\n  console.log(\"Let's rock\");\n};\n\nGarfield.meow();\nGarfield.sing();\n// http://jsfiddle.net/minhuizheng/0h45utcd/5/\n```\n\nexplanation:\n\ntarget — class that the property is a part of  \nname — the name of the property the decorator is modifying  \ndescriptor — property descriptor. Think: object passed to Object.defineProperty\n\n#### Reference and Reading\n\n1. [Exploring EcmaScript Decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841)\n\n2. [Javascript Decorators](https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3)\n\n3. [Decorators](https://www.typescriptlang.org/docs/handbook/decorators.html)\n\n4. [JavaScript Decorators: What They Are and When to Use Them](https://www.sitepoint.com/javascript-decorators-what-they-are/)\n\n5. [React DnD](http://react-dnd.github.io/react-dnd/)\n","slug":"Decorator-in-JavaScript","published":1,"updated":"2018-11-11T12:15:44.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx3p0006ajs6o4d8vrer","content":"<h4 id=\"Decorators-in-Python\"><a href=\"#Decorators-in-Python\" class=\"headerlink\" title=\"Decorators in Python\"></a>Decorators in Python</h4><p>In Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">identity</span><span class=\"params\">(ob)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ob</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@identity</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfunc</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"my function\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">myfunc()</span><br><span class=\"line\"><span class=\"keyword\">print</span> myfunc</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my function</span><br><span class=\"line\">&lt;function myfunc at 0xb76db17c&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ES2016-Decorators\"><a href=\"#ES2016-Decorators\" class=\"headerlink\" title=\"ES2016 Decorators\"></a>ES2016 Decorators</h4><p>An ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.</p>\n<h5 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAge</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">person</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      age: age,</span><br><span class=\"line\">      name: person.name,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newPerson = addAge(<span class=\"number\">30</span>)(person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newPerson);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6 (babel)</span></span><br><span class=\"line\"><span class=\"comment\">// this is the decorator factory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAgeDecorator</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this is the decorator</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">targetClass</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something with 'target' and 'value'...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">      name = <span class=\"keyword\">new</span> targetClass().name;</span><br><span class=\"line\">      age = age;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@addAgeDecorator(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  name = <span class=\"string\">'John'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Person());</span><br></pre></td></tr></table></figure>\n<h3 id=\"Decorating-a-property\"><a href=\"#Decorating-a-property\" class=\"headerlink\" title=\"Decorating a property\"></a>Decorating a property</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  meow() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Meow!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sing() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`soft kitty~`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readonly</span>(<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">  descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Garfield = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">Garfield.meow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I want lasagne!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Garfield.sing = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Let's rock\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Garfield.meow();</span><br><span class=\"line\">Garfield.sing();</span><br><span class=\"line\"><span class=\"comment\">// http://jsfiddle.net/minhuizheng/0h45utcd/5/</span></span><br></pre></td></tr></table></figure>\n<p>explanation:</p>\n<p>target — class that the property is a part of<br>name — the name of the property the decorator is modifying<br>descriptor — property descriptor. Think: object passed to Object.defineProperty</p>\n<h4 id=\"Reference-and-Reading\"><a href=\"#Reference-and-Reading\" class=\"headerlink\" title=\"Reference and Reading\"></a>Reference and Reading</h4><ol>\n<li><p><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841\" target=\"_blank\" rel=\"noopener\">Exploring EcmaScript Decorators</a></p>\n</li>\n<li><p><a href=\"https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3\" target=\"_blank\" rel=\"noopener\">Javascript Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener\">Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.sitepoint.com/javascript-decorators-what-they-are/\" target=\"_blank\" rel=\"noopener\">JavaScript Decorators: What They Are and When to Use Them</a></p>\n</li>\n<li><p><a href=\"http://react-dnd.github.io/react-dnd/\" target=\"_blank\" rel=\"noopener\">React DnD</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Decorators-in-Python\"><a href=\"#Decorators-in-Python\" class=\"headerlink\" title=\"Decorators in Python\"></a>Decorators in Python</h4><p>In Python, decorators provide a very simple syntax for calling higher-order functions. A Python decorator is a function that takes another function, extending the behavior of the latter function without explicitly modifying it.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">identity</span><span class=\"params\">(ob)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ob</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@identity</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfunc</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">\"my function\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">myfunc()</span><br><span class=\"line\"><span class=\"keyword\">print</span> myfunc</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my function</span><br><span class=\"line\">&lt;function myfunc at 0xb76db17c&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ES2016-Decorators\"><a href=\"#ES2016-Decorators\" class=\"headerlink\" title=\"ES2016 Decorators\"></a>ES2016 Decorators</h4><p>An ES2016 decorator is an expression which returns function and can take a target, name and property descriptor as arguments.</p>\n<h5 id=\"Syntax\"><a href=\"#Syntax\" class=\"headerlink\" title=\"Syntax\"></a>Syntax</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// es5</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> person = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'John'</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAge</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">person</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      age: age,</span><br><span class=\"line\">      name: person.name,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newPerson = addAge(<span class=\"number\">30</span>)(person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newPerson);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// es6 (babel)</span></span><br><span class=\"line\"><span class=\"comment\">// this is the decorator factory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addAgeDecorator</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this is the decorator</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">targetClass</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something with 'target' and 'value'...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123;</span><br><span class=\"line\">      name = <span class=\"keyword\">new</span> targetClass().name;</span><br><span class=\"line\">      age = age;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@addAgeDecorator(<span class=\"number\">30</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  name = <span class=\"string\">'John'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> Person());</span><br></pre></td></tr></table></figure>\n<h3 id=\"Decorating-a-property\"><a href=\"#Decorating-a-property\" class=\"headerlink\" title=\"Decorating a property\"></a>Decorating a property</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span> </span>&#123;</span><br><span class=\"line\">  @readonly</span><br><span class=\"line\">  meow() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Meow!`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sing() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`soft kitty~`</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readonly</span>(<span class=\"params\">target, name, descriptor</span>) </span>&#123;</span><br><span class=\"line\">  descriptor.writable = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Garfield = <span class=\"keyword\">new</span> Cat();</span><br><span class=\"line\">Garfield.meow = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'I want lasagne!'</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Garfield.sing = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Let's rock\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Garfield.meow();</span><br><span class=\"line\">Garfield.sing();</span><br><span class=\"line\"><span class=\"comment\">// http://jsfiddle.net/minhuizheng/0h45utcd/5/</span></span><br></pre></td></tr></table></figure>\n<p>explanation:</p>\n<p>target — class that the property is a part of<br>name — the name of the property the decorator is modifying<br>descriptor — property descriptor. Think: object passed to Object.defineProperty</p>\n<h4 id=\"Reference-and-Reading\"><a href=\"#Reference-and-Reading\" class=\"headerlink\" title=\"Reference and Reading\"></a>Reference and Reading</h4><ol>\n<li><p><a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841\" target=\"_blank\" rel=\"noopener\">Exploring EcmaScript Decorators</a></p>\n</li>\n<li><p><a href=\"https://medium.com/jsguru/javascript-decorators-dac7d4b6bba3\" target=\"_blank\" rel=\"noopener\">Javascript Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener\">Decorators</a></p>\n</li>\n<li><p><a href=\"https://www.sitepoint.com/javascript-decorators-what-they-are/\" target=\"_blank\" rel=\"noopener\">JavaScript Decorators: What They Are and When to Use Them</a></p>\n</li>\n<li><p><a href=\"http://react-dnd.github.io/react-dnd/\" target=\"_blank\" rel=\"noopener\">React DnD</a></p>\n</li>\n</ol>\n"},{"title":"Learn ES6 Block Binding","date":"2018-05-03T07:07:52.000Z","_content":"\n### Var declaration and hoisting\n\nHoisting: Variable declarations using `var` are treated as if they are at the top of the **function** (or **global** scope, if declared outside of a function) regardless of where the actual declaration occurs.\n\n### Block-level Declarartion\n\nBlock-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:\n\n1.  Inside of a function\n2.  Inside of a block (indicated by the `{` and `}` characters)\n\n#### Let\n\n`let` declarations are not hoisted to the top of the enclosing block.\n\n##### No Redeclaration\n\n```js\nvar count = 30;\n// Syntax error\nlet count = 40;\n```\n\nBut in a block, let ccan be use to declare an variable with same name.\n\n```js\nvar count = 30;\n// Does not throw an error\nif (condition) {\n  let count = 40;\n  // more code\n}\n```\n\n#### Const\n\n`const`, like `let` declarations, are block-level declarations.\n\n```js\nif (condition) {\n  const maxItems = 5;\n  // more code\n}\n// maxItems isn't accessible here\n```\n\n`const` cannot re-declaration as well.\n\n`const` cannot re-assign.\n\n```js\nconst maxItems = 5;\nmaxItems = 6; // throws error\n```\n\n##### Declaring Objects with const\n\nA `const` declaration prevents modification of the binding and not of the value itself.\n\n```js\nconst person = {\n  name: 'Nicholas',\n};\n\n// works\nperson.name = 'Greg';\n\n// throws an error\nperson = {\n  name: 'Greg',\n};\n```\n\n`const` prevents modification of the binding, not modification of the bound value.\n\n### The Temporal Dead Zone(TDZ)\n\nA variable declared with either `let` or `const` cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the `typeof` operation.\n\n```js\nif (condition) {\n  console.log(typeof value); // ReferenceError!\n  let value = 'blue';\n}\n\nconsole.log(typeof value); // \"undefined\"\n\nif (condition) {\n  let value = 'blue';\n}\n```\n","source":"_posts/Learn-ES6-Block-Binding.md","raw":"---\ntitle: Learn ES6 Block Binding\ndate: 2018-05-03 00:07:52\ncategories:\n  - web\ntags:\n  - ECMAScript2015\n  - es6\n  - var\n  - let\n  - const\n  - block binding\n  - hoisting\n---\n\n### Var declaration and hoisting\n\nHoisting: Variable declarations using `var` are treated as if they are at the top of the **function** (or **global** scope, if declared outside of a function) regardless of where the actual declaration occurs.\n\n### Block-level Declarartion\n\nBlock-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:\n\n1.  Inside of a function\n2.  Inside of a block (indicated by the `{` and `}` characters)\n\n#### Let\n\n`let` declarations are not hoisted to the top of the enclosing block.\n\n##### No Redeclaration\n\n```js\nvar count = 30;\n// Syntax error\nlet count = 40;\n```\n\nBut in a block, let ccan be use to declare an variable with same name.\n\n```js\nvar count = 30;\n// Does not throw an error\nif (condition) {\n  let count = 40;\n  // more code\n}\n```\n\n#### Const\n\n`const`, like `let` declarations, are block-level declarations.\n\n```js\nif (condition) {\n  const maxItems = 5;\n  // more code\n}\n// maxItems isn't accessible here\n```\n\n`const` cannot re-declaration as well.\n\n`const` cannot re-assign.\n\n```js\nconst maxItems = 5;\nmaxItems = 6; // throws error\n```\n\n##### Declaring Objects with const\n\nA `const` declaration prevents modification of the binding and not of the value itself.\n\n```js\nconst person = {\n  name: 'Nicholas',\n};\n\n// works\nperson.name = 'Greg';\n\n// throws an error\nperson = {\n  name: 'Greg',\n};\n```\n\n`const` prevents modification of the binding, not modification of the bound value.\n\n### The Temporal Dead Zone(TDZ)\n\nA variable declared with either `let` or `const` cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the `typeof` operation.\n\n```js\nif (condition) {\n  console.log(typeof value); // ReferenceError!\n  let value = 'blue';\n}\n\nconsole.log(typeof value); // \"undefined\"\n\nif (condition) {\n  let value = 'blue';\n}\n```\n","slug":"Learn-ES6-Block-Binding","published":1,"updated":"2018-10-20T08:56:36.035Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx3r0008ajs6oa64403t","content":"<h3 id=\"Var-declaration-and-hoisting\"><a href=\"#Var-declaration-and-hoisting\" class=\"headerlink\" title=\"Var declaration and hoisting\"></a>Var declaration and hoisting</h3><p>Hoisting: Variable declarations using <code>var</code> are treated as if they are at the top of the <strong>function</strong> (or <strong>global</strong> scope, if declared outside of a function) regardless of where the actual declaration occurs.</p>\n<h3 id=\"Block-level-Declarartion\"><a href=\"#Block-level-Declarartion\" class=\"headerlink\" title=\"Block-level Declarartion\"></a>Block-level Declarartion</h3><p>Block-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:</p>\n<ol>\n<li>Inside of a function</li>\n<li>Inside of a block (indicated by the <code>{</code> and <code>}</code> characters)</li>\n</ol>\n<h4 id=\"Let\"><a href=\"#Let\" class=\"headerlink\" title=\"Let\"></a>Let</h4><p><code>let</code> declarations are not hoisted to the top of the enclosing block.</p>\n<h5 id=\"No-Redeclaration\"><a href=\"#No-Redeclaration\" class=\"headerlink\" title=\"No Redeclaration\"></a>No Redeclaration</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Syntax error</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br></pre></td></tr></table></figure>\n<p>But in a block, let ccan be use to declare an variable with same name.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Does not throw an error</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const\"></a>Const</h4><p><code>const</code>, like <code>let</code> declarations, are block-level declarations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// maxItems isn't accessible here</span></span><br></pre></td></tr></table></figure>\n<p><code>const</code> cannot re-declaration as well.</p>\n<p><code>const</code> cannot re-assign.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">maxItems = <span class=\"number\">6</span>; <span class=\"comment\">// throws error</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Declaring-Objects-with-const\"><a href=\"#Declaring-Objects-with-const\" class=\"headerlink\" title=\"Declaring Objects with const\"></a>Declaring Objects with const</h5><p>A <code>const</code> declaration prevents modification of the binding and not of the value itself.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Nicholas'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// works</span></span><br><span class=\"line\">person.name = <span class=\"string\">'Greg'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// throws an error</span></span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Greg'</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>const</code> prevents modification of the binding, not modification of the bound value.</p>\n<h3 id=\"The-Temporal-Dead-Zone-TDZ\"><a href=\"#The-Temporal-Dead-Zone-TDZ\" class=\"headerlink\" title=\"The Temporal Dead Zone(TDZ)\"></a>The Temporal Dead Zone(TDZ)</h3><p>A variable declared with either <code>let</code> or <code>const</code> cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the <code>typeof</code> operation.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// ReferenceError!</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// \"undefined\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Var-declaration-and-hoisting\"><a href=\"#Var-declaration-and-hoisting\" class=\"headerlink\" title=\"Var declaration and hoisting\"></a>Var declaration and hoisting</h3><p>Hoisting: Variable declarations using <code>var</code> are treated as if they are at the top of the <strong>function</strong> (or <strong>global</strong> scope, if declared outside of a function) regardless of where the actual declaration occurs.</p>\n<h3 id=\"Block-level-Declarartion\"><a href=\"#Block-level-Declarartion\" class=\"headerlink\" title=\"Block-level Declarartion\"></a>Block-level Declarartion</h3><p>Block-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:</p>\n<ol>\n<li>Inside of a function</li>\n<li>Inside of a block (indicated by the <code>{</code> and <code>}</code> characters)</li>\n</ol>\n<h4 id=\"Let\"><a href=\"#Let\" class=\"headerlink\" title=\"Let\"></a>Let</h4><p><code>let</code> declarations are not hoisted to the top of the enclosing block.</p>\n<h5 id=\"No-Redeclaration\"><a href=\"#No-Redeclaration\" class=\"headerlink\" title=\"No Redeclaration\"></a>No Redeclaration</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Syntax error</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br></pre></td></tr></table></figure>\n<p>But in a block, let ccan be use to declare an variable with same name.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> count = <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"comment\">// Does not throw an error</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">40</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Const\"><a href=\"#Const\" class=\"headerlink\" title=\"Const\"></a>Const</h4><p><code>const</code>, like <code>let</code> declarations, are block-level declarations.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">  <span class=\"comment\">// more code</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// maxItems isn't accessible here</span></span><br></pre></td></tr></table></figure>\n<p><code>const</code> cannot re-declaration as well.</p>\n<p><code>const</code> cannot re-assign.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> maxItems = <span class=\"number\">5</span>;</span><br><span class=\"line\">maxItems = <span class=\"number\">6</span>; <span class=\"comment\">// throws error</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"Declaring-Objects-with-const\"><a href=\"#Declaring-Objects-with-const\" class=\"headerlink\" title=\"Declaring Objects with const\"></a>Declaring Objects with const</h5><p>A <code>const</code> declaration prevents modification of the binding and not of the value itself.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Nicholas'</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// works</span></span><br><span class=\"line\">person.name = <span class=\"string\">'Greg'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// throws an error</span></span><br><span class=\"line\">person = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">'Greg'</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>const</code> prevents modification of the binding, not modification of the bound value.</p>\n<h3 id=\"The-Temporal-Dead-Zone-TDZ\"><a href=\"#The-Temporal-Dead-Zone-TDZ\" class=\"headerlink\" title=\"The Temporal Dead Zone(TDZ)\"></a>The Temporal Dead Zone(TDZ)</h3><p>A variable declared with either <code>let</code> or <code>const</code> cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the <code>typeof</code> operation.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// ReferenceError!</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> value); <span class=\"comment\">// \"undefined\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = <span class=\"string\">'blue'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Run React Native App on Mac","date":"2018-02-05T09:05:04.000Z","_content":"\n1. make sure installed LATEST xcode on your mac. Be make sure check your app store to upgrade your xcode to latest version.\n2. install homebrew or nvm, so you can install node and manage your nodejs version.\n3. install nodejs and npm\n4. install watchman\n5. install react native cli such as `react-native-cli`\n6. create your react native project using `react-native init <project-name>`\n\nAfter installing these tools, use `react-native run-ios` to start your simulator.\n\nAnd in case if you met this error code when you run `react-native run-ios [--simulator=\"iPhone X\"]`\n\n```shell\nFound Xcode project TestProject.xcodeproj\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n\nCommand failed: xcrun instruments -s\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n```\n\nthis is because you did not set your xcode's command line tools, so your can go to `preference -> locations -> Command Line Tools` to select.\n\n![xcode command line tools](http://ww1.sinaimg.cn/large/71dc9500ly1fo5oy30mhdj21eo0w646p.jpg)\n","source":"_posts/Run-react-native-app-on-Mac.md","raw":"---\ntitle: Run React Native App on Mac\ndate: 2018-02-05 01:05:04\ncategories:\n- web\ntags:\n- react\n- react native\n- xcode\n---\n\n1. make sure installed LATEST xcode on your mac. Be make sure check your app store to upgrade your xcode to latest version.\n2. install homebrew or nvm, so you can install node and manage your nodejs version.\n3. install nodejs and npm\n4. install watchman\n5. install react native cli such as `react-native-cli`\n6. create your react native project using `react-native init <project-name>`\n\nAfter installing these tools, use `react-native run-ios` to start your simulator.\n\nAnd in case if you met this error code when you run `react-native run-ios [--simulator=\"iPhone X\"]`\n\n```shell\nFound Xcode project TestProject.xcodeproj\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n\nCommand failed: xcrun instruments -s\nxcrun: error: unable to find utility \"instruments\", not a developer\ntool or in PATH\n```\n\nthis is because you did not set your xcode's command line tools, so your can go to `preference -> locations -> Command Line Tools` to select.\n\n![xcode command line tools](http://ww1.sinaimg.cn/large/71dc9500ly1fo5oy30mhdj21eo0w646p.jpg)\n","slug":"Run-react-native-app-on-Mac","published":1,"updated":"2018-09-07T14:40:10.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx3s0009ajs63ewy5ob1","content":"<ol>\n<li>make sure installed LATEST xcode on your mac. Be make sure check your app store to upgrade your xcode to latest version.</li>\n<li>install homebrew or nvm, so you can install node and manage your nodejs version.</li>\n<li>install nodejs and npm</li>\n<li>install watchman</li>\n<li>install react native cli such as <code>react-native-cli</code></li>\n<li>create your react native project using <code>react-native init &lt;project-name&gt;</code></li>\n</ol>\n<p>After installing these tools, use <code>react-native run-ios</code> to start your simulator.</p>\n<p>And in case if you met this error code when you run <code>react-native run-ios [--simulator=&quot;iPhone X&quot;]</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found Xcode project TestProject.xcodeproj</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br><span class=\"line\"></span><br><span class=\"line\">Command failed: xcrun instruments -s</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br></pre></td></tr></table></figure>\n<p>this is because you did not set your xcode’s command line tools, so your can go to <code>preference -&gt; locations -&gt; Command Line Tools</code> to select.</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/71dc9500ly1fo5oy30mhdj21eo0w646p.jpg\" alt=\"xcode command line tools\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>make sure installed LATEST xcode on your mac. Be make sure check your app store to upgrade your xcode to latest version.</li>\n<li>install homebrew or nvm, so you can install node and manage your nodejs version.</li>\n<li>install nodejs and npm</li>\n<li>install watchman</li>\n<li>install react native cli such as <code>react-native-cli</code></li>\n<li>create your react native project using <code>react-native init &lt;project-name&gt;</code></li>\n</ol>\n<p>After installing these tools, use <code>react-native run-ios</code> to start your simulator.</p>\n<p>And in case if you met this error code when you run <code>react-native run-ios [--simulator=&quot;iPhone X&quot;]</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found Xcode project TestProject.xcodeproj</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br><span class=\"line\"></span><br><span class=\"line\">Command failed: xcrun instruments -s</span><br><span class=\"line\">xcrun: error: unable to find utility \"instruments\", not a developer</span><br><span class=\"line\">tool or in PATH</span><br></pre></td></tr></table></figure>\n<p>this is because you did not set your xcode’s command line tools, so your can go to <code>preference -&gt; locations -&gt; Command Line Tools</code> to select.</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/71dc9500ly1fo5oy30mhdj21eo0w646p.jpg\" alt=\"xcode command line tools\"></p>\n"},{"title":"Regret Minimization and Multi-task Serially","date":"2018-02-24T01:29:46.000Z","_content":"\n前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。\n\n第一个就是之前听他说的 \"regret minimization\"。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 \"a better idea for someone who didn't have a good job\"。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 \"path not taken\" 而后悔。\n\n我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。\n\n第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，\"be doing whatever I'm doing\"。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，\"multi-task serially\"，按顺序的多任务。\n\n关于这点，我近年来也算是感触很深了。原来总觉得自己聪明，喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。\n\n现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。\n\n最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。\n\n目前就想到这么多吧，希望时刻能督促自己。\n","source":"_posts/Regret-Minimization-and-Multi-task-Serially.md","raw":"---\ntitle: Regret Minimization and Multi-task Serially\ndate: 2018-02-23 17:29:46\ncategories:\n- life\ntags:\n---\n\n前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。\n\n第一个就是之前听他说的 \"regret minimization\"。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 \"a better idea for someone who didn't have a good job\"。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 \"path not taken\" 而后悔。\n\n我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。\n\n第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，\"be doing whatever I'm doing\"。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，\"multi-task serially\"，按顺序的多任务。\n\n关于这点，我近年来也算是感触很深了。原来总觉得自己聪明，喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。\n\n现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。\n\n最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。\n\n目前就想到这么多吧，希望时刻能督促自己。\n","slug":"Regret-Minimization-and-Multi-task-Serially","published":1,"updated":"2018-09-07T15:34:06.223Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx3u000cajs600yqa3g4","content":"<p>前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。</p>\n<p>第一个就是之前听他说的 “regret minimization”。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 “a better idea for someone who didn’t have a good job”。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 “path not taken” 而后悔。</p>\n<p>我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。</p>\n<p>第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，”be doing whatever I’m doing”。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，”multi-task serially”，按顺序的多任务。</p>\n<p>关于这点，我近年来也算是感触很深了。原来总觉得自己聪明，喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。</p>\n<p>现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。</p>\n<p>最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。</p>\n<p>目前就想到这么多吧，希望时刻能督促自己。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前两天在 TechCrunch 上看了一个 Bezos 采访的摘要，有两点感触很深，是以记之。</p>\n<p>第一个就是之前听他说的 “regret minimization”。他谈到他离开华尔街准备建立一个网上书店。他的老板告诉他这是个好主意，但是是个 “a better idea for someone who didn’t have a good job”。这里他提到他做决定的方法（当然他解释道，这种事 personal decision，而不是 data driven decision），把人生投射到八十岁的时候，然后想象自己是会因为做过的事做错了而后悔，还是因为某条 “path not taken” 而后悔。</p>\n<p>我觉得，即使是现在，时常在做出决定时，还是着眼当下，权衡短期的利弊。而从来没有放眼到这么一个高度来考虑问题。前些天上网看有人这么说：设想自己五年后的样子，然后看看基于自己现在的状况，五年后是否能达到自己定的目标。坦白讲，我当时有点小小的震动。我既没有对自己五年后有个清晰的规划，即使有，在目前这种身份和状态下，保守估计也是无法达到的。顿时危机感很强，现在大方向回国是定下来了，但是回去之后的计划，过段时间需要好好思考一下，看如何才能达到 regret minimization。</p>\n<p>第二，关于手机 addiction 和多任务。Bezos 说他讨厌多任务， 比如和朋友家人吃饭时从来不看手机，”be doing whatever I’m doing”。还举例说，如果需要查看邮件，那么就用全部注意力和精力来回邮件。相较于在不同任务中来回，他更倾向于阶段性的 focus，”multi-task serially”，按顺序的多任务。</p>\n<p>关于这点，我近年来也算是感触很深了。原来总觉得自己聪明，喜欢同时开工很多事情，然后幻想一件一件做完时候的成就感。现在回想起来，实在是高估了自己的执行力和专注能力。再比如看书，经常几本书同时开始看，然后这里搂一眼，那里翻几页。根本没有沉下心去认真思考，纯粹为了看而看。即使到前段时间，也是如此。同时看几个教程，反而没有花时间钻到底层去，还营造了一种很忙，很刻苦的假象。网上所说的，“不要用战术上的勤奋掩盖战略上的懒惰”，我觉得很好的形容了我过去的学习方式。</p>\n<p>现在回想起来，归根结底，不够专注，贪多而不精。如果说 2018 年我想掌握什么技能的话，我想专注和单线程是最想努力做到的，每一次只学习一门技术，只读一本书。如果没有达到可以侃侃而谈，不能做出一些有效的输出（写博客，向不懂的人介绍）时，不应该 move on 到下一个领域。看技术书也是一样，每次只看一本，看完了要学着画思维导图，尝试掌握主体脉络。</p>\n<p>最后还想说一点，原来我很讨厌人物传记，采访，或者诸如生活，工作方法的书籍，总觉得不是鸡汤就是很虚伪。现在看来真是目光短浅加上莫名其妙的自大。原来觉得这些信息不过是一些有钱人没事吹吹牛，没什么干货。现在不会这么看了。现在觉得人就像背着个口袋出发，看到别人的优点，或者高效的方法，就挑挑拣拣装进自己口袋。虚心一点，总能从别人那里发现自己不足的地方。</p>\n<p>目前就想到这么多吧，希望时刻能督促自己。</p>\n"},{"title":"Timers in JavaScript","date":"2018-10-20T23:55:28.000Z","_content":"\n#### Challenge 1\n\nprint the following 2 messages after their corresponding delays.\n\n- Print the message “_Hello after 4 seconds_” after 4 seconds\n- Print the message “_Hello after 8 seconds_” after 8 seconds.\n\n**Constraints**:\nYou can define only a single function in your solution, which includes inline functions. This means many `setTimeout` calls will have to use the exact same function.\n\n```javascript\nconst func = (time) => {\n  console.log(`Hello after ${time} seconds`);\n};\nsetTimeout(func, 4000, 4);\nsetTimeout(func, 8000, 8);\n```\n\nsetTimeout clearTimeout;\n\nsetInterval clearInterval\n\nsetImmediate clearImmediate\n\ndelay is not guarantee\n\n```js\nsetTimeout(() => console.log('Hello after 0.5 seconds. MAYBE!'), 500);\nfor (let i = 0; i < 1e10; i++) {\n  // Block Things Synchronously\n}\n```\n\n#### Challenge 2\n\nWrite a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.\n\n```js\nlet count = 0;\nconst itv = setInterval(() => {\n  console.log('hello world');\n  count += 1;\n  if (count === 5) {\n    console.log('done');\n    clearInterval(itv);\n  }\n}, 1000);\n```\n\n#### Challenge 3\n\nonly use `const`, can't use `let` or `var`.\n\nWrite a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.\n\nprint\n\nHello World. 1\nHello World. 2\nHello World. 3\n...\n\n```js\nconst recur = (delay) => {\n  setTimeout(() => {\n    console.log('Hello World.', delay);\n    recur(delay + 1);\n  }, delay * 1000);\n};\nrecur(1);\n```\n\n#### Challenge 4\n\nWrite a script to continuously print the message “_Hello World_” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.\n\nprint\n\n```\nHello World. 100  // At 100ms\nHello World. 100  // At 200ms\nHello World. 100  // At 300ms\nHello World. 100  // At 400ms\nHello World. 100  // At 500ms\nHello World. 200  // At 700ms\nHello World. 200  // At 900ms\nHello World. 200  // At 1100ms\n...\n```\n\n**Constraints:** You can use only `setInterval` calls (not `setTimeout`) and you can use only ONE if statement.\n\n```js\nlet lastIntervalId,\n  counter = 5;\nconst greeting = (delay) => {\n  if (counter === 5) {\n    clearInterval(lastIntervalId);\n    lastIntervalId = setInterval(() => {\n      console.log('Hello World. ', delay);\n      greeting(delay + 100);\n    }, delay);\n    counter = 0;\n  }\n  counter += 1;\n};\ngreeting(100);\n```\n\n### original Article\n\n[JavaScript Timers: Everything you need to know](https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162)\n","source":"_posts/Timers-in-JavaScript.md","raw":"---\ntitle: Timers in JavaScript\ndate: 2018-10-20 16:55:28\ncategories:\n  - tech\ntags:\n  - javascript\n  - setTimeout\n  - setInterval\n---\n\n#### Challenge 1\n\nprint the following 2 messages after their corresponding delays.\n\n- Print the message “_Hello after 4 seconds_” after 4 seconds\n- Print the message “_Hello after 8 seconds_” after 8 seconds.\n\n**Constraints**:\nYou can define only a single function in your solution, which includes inline functions. This means many `setTimeout` calls will have to use the exact same function.\n\n```javascript\nconst func = (time) => {\n  console.log(`Hello after ${time} seconds`);\n};\nsetTimeout(func, 4000, 4);\nsetTimeout(func, 8000, 8);\n```\n\nsetTimeout clearTimeout;\n\nsetInterval clearInterval\n\nsetImmediate clearImmediate\n\ndelay is not guarantee\n\n```js\nsetTimeout(() => console.log('Hello after 0.5 seconds. MAYBE!'), 500);\nfor (let i = 0; i < 1e10; i++) {\n  // Block Things Synchronously\n}\n```\n\n#### Challenge 2\n\nWrite a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.\n\n```js\nlet count = 0;\nconst itv = setInterval(() => {\n  console.log('hello world');\n  count += 1;\n  if (count === 5) {\n    console.log('done');\n    clearInterval(itv);\n  }\n}, 1000);\n```\n\n#### Challenge 3\n\nonly use `const`, can't use `let` or `var`.\n\nWrite a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.\n\nprint\n\nHello World. 1\nHello World. 2\nHello World. 3\n...\n\n```js\nconst recur = (delay) => {\n  setTimeout(() => {\n    console.log('Hello World.', delay);\n    recur(delay + 1);\n  }, delay * 1000);\n};\nrecur(1);\n```\n\n#### Challenge 4\n\nWrite a script to continuously print the message “_Hello World_” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.\n\nprint\n\n```\nHello World. 100  // At 100ms\nHello World. 100  // At 200ms\nHello World. 100  // At 300ms\nHello World. 100  // At 400ms\nHello World. 100  // At 500ms\nHello World. 200  // At 700ms\nHello World. 200  // At 900ms\nHello World. 200  // At 1100ms\n...\n```\n\n**Constraints:** You can use only `setInterval` calls (not `setTimeout`) and you can use only ONE if statement.\n\n```js\nlet lastIntervalId,\n  counter = 5;\nconst greeting = (delay) => {\n  if (counter === 5) {\n    clearInterval(lastIntervalId);\n    lastIntervalId = setInterval(() => {\n      console.log('Hello World. ', delay);\n      greeting(delay + 100);\n    }, delay);\n    counter = 0;\n  }\n  counter += 1;\n};\ngreeting(100);\n```\n\n### original Article\n\n[JavaScript Timers: Everything you need to know](https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162)\n","slug":"Timers-in-JavaScript","published":1,"updated":"2018-11-11T12:16:09.804Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx3v000dajs6ok1eax23","content":"<h4 id=\"Challenge-1\"><a href=\"#Challenge-1\" class=\"headerlink\" title=\"Challenge 1\"></a>Challenge 1</h4><p>print the following 2 messages after their corresponding delays.</p>\n<ul>\n<li>Print the message “<em>Hello after 4 seconds</em>” after 4 seconds</li>\n<li>Print the message “<em>Hello after 8 seconds</em>” after 8 seconds.</li>\n</ul>\n<p><strong>Constraints</strong>:<br>You can define only a single function in your solution, which includes inline functions. This means many <code>setTimeout</code> calls will have to use the exact same function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello after <span class=\"subst\">$&#123;time&#125;</span> seconds`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(func, <span class=\"number\">4000</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">setTimeout(func, <span class=\"number\">8000</span>, <span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure>\n<p>setTimeout clearTimeout;</p>\n<p>setInterval clearInterval</p>\n<p>setImmediate clearImmediate</p>\n<p>delay is not guarantee</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello after 0.5 seconds. MAYBE!'</span>), <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Block Things Synchronously</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-2\"><a href=\"#Challenge-2\" class=\"headerlink\" title=\"Challenge 2\"></a>Challenge 2</h4><p>Write a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> itv = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">  count += <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>);</span><br><span class=\"line\">    clearInterval(itv);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-3\"><a href=\"#Challenge-3\" class=\"headerlink\" title=\"Challenge 3\"></a>Challenge 3</h4><p>only use <code>const</code>, can’t use <code>let</code> or <code>var</code>.</p>\n<p>Write a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.</p>\n<p>print</p>\n<p>Hello World. 1<br>Hello World. 2<br>Hello World. 3<br>…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> recur = <span class=\"function\">(<span class=\"params\">delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World.'</span>, delay);</span><br><span class=\"line\">    recur(delay + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;, delay * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">recur(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-4\"><a href=\"#Challenge-4\" class=\"headerlink\" title=\"Challenge 4\"></a>Challenge 4</h4><p>Write a script to continuously print the message “<em>Hello World</em>” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.</p>\n<p>print</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World. 100  // At 100ms</span><br><span class=\"line\">Hello World. 100  // At 200ms</span><br><span class=\"line\">Hello World. 100  // At 300ms</span><br><span class=\"line\">Hello World. 100  // At 400ms</span><br><span class=\"line\">Hello World. 100  // At 500ms</span><br><span class=\"line\">Hello World. 200  // At 700ms</span><br><span class=\"line\">Hello World. 200  // At 900ms</span><br><span class=\"line\">Hello World. 200  // At 1100ms</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>Constraints:</strong> You can use only <code>setInterval</code> calls (not <code>setTimeout</code>) and you can use only ONE if statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastIntervalId,</span><br><span class=\"line\">  counter = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"function\">(<span class=\"params\">delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (counter === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    clearInterval(lastIntervalId);</span><br><span class=\"line\">    lastIntervalId = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World. '</span>, delay);</span><br><span class=\"line\">      greeting(delay + <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">    counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  counter += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">greeting(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"original-Article\"><a href=\"#original-Article\" class=\"headerlink\" title=\"original Article\"></a>original Article</h3><p><a href=\"https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162\" target=\"_blank\" rel=\"noopener\">JavaScript Timers: Everything you need to know</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Challenge-1\"><a href=\"#Challenge-1\" class=\"headerlink\" title=\"Challenge 1\"></a>Challenge 1</h4><p>print the following 2 messages after their corresponding delays.</p>\n<ul>\n<li>Print the message “<em>Hello after 4 seconds</em>” after 4 seconds</li>\n<li>Print the message “<em>Hello after 8 seconds</em>” after 8 seconds.</li>\n</ul>\n<p><strong>Constraints</strong>:<br>You can define only a single function in your solution, which includes inline functions. This means many <code>setTimeout</code> calls will have to use the exact same function.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"function\">(<span class=\"params\">time</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello after <span class=\"subst\">$&#123;time&#125;</span> seconds`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">setTimeout(func, <span class=\"number\">4000</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\">setTimeout(func, <span class=\"number\">8000</span>, <span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure>\n<p>setTimeout clearTimeout;</p>\n<p>setInterval clearInterval</p>\n<p>setImmediate clearImmediate</p>\n<p>delay is not guarantee</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello after 0.5 seconds. MAYBE!'</span>), <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">1e10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Block Things Synchronously</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-2\"><a href=\"#Challenge-2\" class=\"headerlink\" title=\"Challenge 2\"></a>Challenge 2</h4><p>Write a script to print the message “Hello World” every second, but only 5 times. After 5 times, the script should print the message “Done” and let the Node process exit.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> itv = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>);</span><br><span class=\"line\">  count += <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (count === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'done'</span>);</span><br><span class=\"line\">    clearInterval(itv);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-3\"><a href=\"#Challenge-3\" class=\"headerlink\" title=\"Challenge 3\"></a>Challenge 3</h4><p>only use <code>const</code>, can’t use <code>let</code> or <code>var</code>.</p>\n<p>Write a script to continuously print the message “Hello World” with varying delays. Start with a delay of 1 second and then increment the delay by 1 second each time. The second time will have a delay of 2 seconds. The third time will have a delay of 3 seconds, and so on.</p>\n<p>print</p>\n<p>Hello World. 1<br>Hello World. 2<br>Hello World. 3<br>…</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> recur = <span class=\"function\">(<span class=\"params\">delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World.'</span>, delay);</span><br><span class=\"line\">    recur(delay + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;, delay * <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">recur(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Challenge-4\"><a href=\"#Challenge-4\" class=\"headerlink\" title=\"Challenge 4\"></a>Challenge 4</h4><p>Write a script to continuously print the message “<em>Hello World</em>” with the same varying delays concept as challenge #3, but this time, in groups of 5 messages per main-delay interval. Starting with a delay of 100ms for the first 5 messages, then a delay of 200ms for the next 5 messages, then 300ms, and so on.</p>\n<p>print</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello World. 100  // At 100ms</span><br><span class=\"line\">Hello World. 100  // At 200ms</span><br><span class=\"line\">Hello World. 100  // At 300ms</span><br><span class=\"line\">Hello World. 100  // At 400ms</span><br><span class=\"line\">Hello World. 100  // At 500ms</span><br><span class=\"line\">Hello World. 200  // At 700ms</span><br><span class=\"line\">Hello World. 200  // At 900ms</span><br><span class=\"line\">Hello World. 200  // At 1100ms</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong>Constraints:</strong> You can use only <code>setInterval</code> calls (not <code>setTimeout</code>) and you can use only ONE if statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> lastIntervalId,</span><br><span class=\"line\">  counter = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> greeting = <span class=\"function\">(<span class=\"params\">delay</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (counter === <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">    clearInterval(lastIntervalId);</span><br><span class=\"line\">    lastIntervalId = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello World. '</span>, delay);</span><br><span class=\"line\">      greeting(delay + <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">    counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  counter += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">greeting(<span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"original-Article\"><a href=\"#original-Article\" class=\"headerlink\" title=\"original Article\"></a>original Article</h3><p><a href=\"https://medium.freecodecamp.org/javascript-timers-everything-you-need-to-know-5f31eaa37162\" target=\"_blank\" rel=\"noopener\">JavaScript Timers: Everything you need to know</a></p>\n"},{"title":"How to disable copy/paste/cut for input fields","date":"2018-03-16T20:34:18.000Z","_content":"\nStop user copy paste for this input field.\n\n```html\n<input type=\"text\" onselectstart=\"return false\" onpaste=\"return false;\" onCopy=\"return false\" onCut=\"return false\" onDrag=\"return false\" onDrop=\"return false\" autocomplete=off/>\n```\n","source":"_posts/how-to-disable-copy-paste-for-input.md","raw":"---\ntitle: How to disable copy/paste/cut for input fields\ndate: 2018-03-16 13:34:18\ncategories:\n- web\ntags:\n- html\n---\n\nStop user copy paste for this input field.\n\n```html\n<input type=\"text\" onselectstart=\"return false\" onpaste=\"return false;\" onCopy=\"return false\" onCut=\"return false\" onDrag=\"return false\" onDrop=\"return false\" autocomplete=off/>\n```\n","slug":"how-to-disable-copy-paste-for-input","published":1,"updated":"2018-09-07T14:40:10.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx44000hajs6evdmqasb","content":"<p>Stop user copy paste for this input field.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">onselectstart</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onpaste</span>=<span class=\"string\">\"return false;\"</span> <span class=\"attr\">onCopy</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onCut</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onDrag</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onDrop</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">off/</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Stop user copy paste for this input field.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">onselectstart</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onpaste</span>=<span class=\"string\">\"return false;\"</span> <span class=\"attr\">onCopy</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onCut</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onDrag</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">onDrop</span>=<span class=\"string\">\"return false\"</span> <span class=\"attr\">autocomplete</span>=<span class=\"string\">off/</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Learn Events","date":"2018-04-15T23:47:42.000Z","_content":"\n#### register\n\n```js\nmyElement.onclick = functionA;\nmyElement.onclick = functionB;\n```\n\nsecond row will overwrite first row\n\n```js\nmyElement.addEventListener('click', functionA);\nmyElement.addEventListener('click', functionB);\n```\n\nboth would run\n\nwhich should use\n\n* inline event handlers `<button onclick=\"bgChange()\">Press me</button>` （don't use）\n* Event handler properties; element.onclick; better cross-browser compatibility (IE8)\n* DOM Level 2 Events; element.addEventListener('click', functionA); (IE9, can register multiple events，can be removed)\n\n## event objects\n\ne/evt/event\n\nevent.target\n\n## Preventing default behavior\n\ne.preventDefault();\n\n## Event bubbling\n\nEvent bubbling and capture are two mechanisms that describe what happens when two handlers\nof the same event type are activated on one element.\n\nIn the capturing phase:\n\nThe browser checks to see if the element's outer-most ancestor (`<html>`) has an onclick event handler registered on it in the capturing phase, and runs it if so.\nThen it moves on to the next element inside `<html>` and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.\n\nIn the bubbling phase, the exact opposite occurs:\n\nThe browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.\nThen it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the `<html>` element.\n\nEvent handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.\n\n```js\nelement1.addEventListener('click', doSomething2, true); // fire at capture phase\nelement2.addEventListener('click', doSomething, false);\n```\n\n## Event delegation\n\nif you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.\n\n```html\n<ul id=\"parent-list\">\n  <li id=\"post-1\">Item 1</li>\n  <li id=\"post-2\">Item 2</li>\n  <li id=\"post-3\">Item 3</li>\n  <li id=\"post-4\">Item 4</li>\n  <li id=\"post-5\">Item 5</li>\n  <li id=\"post-6\" class=\"endangered\">Item 6</li>\n</ul>\n```\n\n```js\n// Get the element, add a click listener...\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  // e.target is the clicked element!\n  // If it was a list item\n  if (e.target && e.target.nodeName == 'LI') {\n    // List item found!  Output the ID!\n    console.log('List item ', e.target.id.replace('post-', ''), ' was clicked!');\n  }\n});\n\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  if (e.target && e.target.matches('li.endangered')) {\n    // List item found!  Output the ID!\n    console.log('The ' + e.target.textContent + ' is endangered!');\n  }\n});\n```\n\n## related reading\n\nmdn <https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture>\n\nevent order <https://www.quirksmode.org/js/events_order.html>\n\nevent delegate <https://davidwalsh.name/event-delegate>\n\nEvent delegation <https://javascript.info/event-delegation>\n","source":"_posts/learn-events.md","raw":"---\ntitle: Learn Events\ndate: 2018-04-15 16:47:42\ncategories:\n- web\ntags:\n- window\n- events\n- capture/bubbling\n- delegate\n---\n\n#### register\n\n```js\nmyElement.onclick = functionA;\nmyElement.onclick = functionB;\n```\n\nsecond row will overwrite first row\n\n```js\nmyElement.addEventListener('click', functionA);\nmyElement.addEventListener('click', functionB);\n```\n\nboth would run\n\nwhich should use\n\n* inline event handlers `<button onclick=\"bgChange()\">Press me</button>` （don't use）\n* Event handler properties; element.onclick; better cross-browser compatibility (IE8)\n* DOM Level 2 Events; element.addEventListener('click', functionA); (IE9, can register multiple events，can be removed)\n\n## event objects\n\ne/evt/event\n\nevent.target\n\n## Preventing default behavior\n\ne.preventDefault();\n\n## Event bubbling\n\nEvent bubbling and capture are two mechanisms that describe what happens when two handlers\nof the same event type are activated on one element.\n\nIn the capturing phase:\n\nThe browser checks to see if the element's outer-most ancestor (`<html>`) has an onclick event handler registered on it in the capturing phase, and runs it if so.\nThen it moves on to the next element inside `<html>` and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.\n\nIn the bubbling phase, the exact opposite occurs:\n\nThe browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.\nThen it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the `<html>` element.\n\nEvent handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.\n\n```js\nelement1.addEventListener('click', doSomething2, true); // fire at capture phase\nelement2.addEventListener('click', doSomething, false);\n```\n\n## Event delegation\n\nif you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.\n\n```html\n<ul id=\"parent-list\">\n  <li id=\"post-1\">Item 1</li>\n  <li id=\"post-2\">Item 2</li>\n  <li id=\"post-3\">Item 3</li>\n  <li id=\"post-4\">Item 4</li>\n  <li id=\"post-5\">Item 5</li>\n  <li id=\"post-6\" class=\"endangered\">Item 6</li>\n</ul>\n```\n\n```js\n// Get the element, add a click listener...\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  // e.target is the clicked element!\n  // If it was a list item\n  if (e.target && e.target.nodeName == 'LI') {\n    // List item found!  Output the ID!\n    console.log('List item ', e.target.id.replace('post-', ''), ' was clicked!');\n  }\n});\n\ndocument.getElementById('parent-list').addEventListener('click', function(e) {\n  if (e.target && e.target.matches('li.endangered')) {\n    // List item found!  Output the ID!\n    console.log('The ' + e.target.textContent + ' is endangered!');\n  }\n});\n```\n\n## related reading\n\nmdn <https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture>\n\nevent order <https://www.quirksmode.org/js/events_order.html>\n\nevent delegate <https://davidwalsh.name/event-delegate>\n\nEvent delegation <https://javascript.info/event-delegation>\n","slug":"learn-events","published":1,"updated":"2018-11-11T12:17:23.531Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx45000iajs6f6eyk48i","content":"<h4 id=\"register\"><a href=\"#register\" class=\"headerlink\" title=\"register\"></a>register</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.onclick = functionA;</span><br><span class=\"line\">myElement.onclick = functionB;</span><br></pre></td></tr></table></figure>\n<p>second row will overwrite first row</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionA);</span><br><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionB);</span><br></pre></td></tr></table></figure>\n<p>both would run</p>\n<p>which should use</p>\n<ul>\n<li>inline event handlers <code>&lt;button onclick=&quot;bgChange()&quot;&gt;Press me&lt;/button&gt;</code> （don’t use）</li>\n<li>Event handler properties; element.onclick; better cross-browser compatibility (IE8)</li>\n<li>DOM Level 2 Events; element.addEventListener(‘click’, functionA); (IE9, can register multiple events，can be removed)</li>\n</ul>\n<h2 id=\"event-objects\"><a href=\"#event-objects\" class=\"headerlink\" title=\"event objects\"></a>event objects</h2><p>e/evt/event</p>\n<p>event.target</p>\n<h2 id=\"Preventing-default-behavior\"><a href=\"#Preventing-default-behavior\" class=\"headerlink\" title=\"Preventing default behavior\"></a>Preventing default behavior</h2><p>e.preventDefault();</p>\n<h2 id=\"Event-bubbling\"><a href=\"#Event-bubbling\" class=\"headerlink\" title=\"Event bubbling\"></a>Event bubbling</h2><p>Event bubbling and capture are two mechanisms that describe what happens when two handlers<br>of the same event type are activated on one element.</p>\n<p>In the capturing phase:</p>\n<p>The browser checks to see if the element’s outer-most ancestor (<code>&lt;html&gt;</code>) has an onclick event handler registered on it in the capturing phase, and runs it if so.<br>Then it moves on to the next element inside <code>&lt;html&gt;</code> and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.</p>\n<p>In the bubbling phase, the exact opposite occurs:</p>\n<p>The browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.<br>Then it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the <code>&lt;html&gt;</code> element.</p>\n<p>Event handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element1.addEventListener(<span class=\"string\">'click'</span>, doSomething2, <span class=\"literal\">true</span>); <span class=\"comment\">// fire at capture phase</span></span><br><span class=\"line\">element2.addEventListener(<span class=\"string\">'click'</span>, doSomething, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Event-delegation\"><a href=\"#Event-delegation\" class=\"headerlink\" title=\"Event delegation\"></a>Event delegation</h2><p>if you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-1\"</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-2\"</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-3\"</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-4\"</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-5\"</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-6\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"endangered\"</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the element, add a click listener...</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// e.target is the clicked element!</span></span><br><span class=\"line\">  <span class=\"comment\">// If it was a list item</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.nodeName == <span class=\"string\">'LI'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'List item '</span>, e.target.id.replace(<span class=\"string\">'post-'</span>, <span class=\"string\">''</span>), <span class=\"string\">' was clicked!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.matches(<span class=\"string\">'li.endangered'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The '</span> + e.target.textContent + <span class=\"string\">' is endangered!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"related-reading\"><a href=\"#related-reading\" class=\"headerlink\" title=\"related reading\"></a>related reading</h2><p>mdn <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture</a></p>\n<p>event order <a href=\"https://www.quirksmode.org/js/events_order.html\" target=\"_blank\" rel=\"noopener\">https://www.quirksmode.org/js/events_order.html</a></p>\n<p>event delegate <a href=\"https://davidwalsh.name/event-delegate\" target=\"_blank\" rel=\"noopener\">https://davidwalsh.name/event-delegate</a></p>\n<p>Event delegation <a href=\"https://javascript.info/event-delegation\" target=\"_blank\" rel=\"noopener\">https://javascript.info/event-delegation</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"register\"><a href=\"#register\" class=\"headerlink\" title=\"register\"></a>register</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.onclick = functionA;</span><br><span class=\"line\">myElement.onclick = functionB;</span><br></pre></td></tr></table></figure>\n<p>second row will overwrite first row</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionA);</span><br><span class=\"line\">myElement.addEventListener(<span class=\"string\">'click'</span>, functionB);</span><br></pre></td></tr></table></figure>\n<p>both would run</p>\n<p>which should use</p>\n<ul>\n<li>inline event handlers <code>&lt;button onclick=&quot;bgChange()&quot;&gt;Press me&lt;/button&gt;</code> （don’t use）</li>\n<li>Event handler properties; element.onclick; better cross-browser compatibility (IE8)</li>\n<li>DOM Level 2 Events; element.addEventListener(‘click’, functionA); (IE9, can register multiple events，can be removed)</li>\n</ul>\n<h2 id=\"event-objects\"><a href=\"#event-objects\" class=\"headerlink\" title=\"event objects\"></a>event objects</h2><p>e/evt/event</p>\n<p>event.target</p>\n<h2 id=\"Preventing-default-behavior\"><a href=\"#Preventing-default-behavior\" class=\"headerlink\" title=\"Preventing default behavior\"></a>Preventing default behavior</h2><p>e.preventDefault();</p>\n<h2 id=\"Event-bubbling\"><a href=\"#Event-bubbling\" class=\"headerlink\" title=\"Event bubbling\"></a>Event bubbling</h2><p>Event bubbling and capture are two mechanisms that describe what happens when two handlers<br>of the same event type are activated on one element.</p>\n<p>In the capturing phase:</p>\n<p>The browser checks to see if the element’s outer-most ancestor (<code>&lt;html&gt;</code>) has an onclick event handler registered on it in the capturing phase, and runs it if so.<br>Then it moves on to the next element inside <code>&lt;html&gt;</code> and does the same thing, then the next one, and so on until it reaches the element that was actually clicked on.</p>\n<p>In the bubbling phase, the exact opposite occurs:</p>\n<p>The browser checks to see if the element that was actually clicked on has an onclick event handler registered on it in the bubbling phase, and runs it if so.<br>Then it moves on to the next immediate ancestor element and does the same thing, then the next one, and so on until it reaches the <code>&lt;html&gt;</code> element.</p>\n<p>Event handler registers in the bubbling phase. If you really want to register an event in the capturing phase instead, you can do so by registering your handler using addEventListener(), and setting the optional third property to true.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">element1.addEventListener(<span class=\"string\">'click'</span>, doSomething2, <span class=\"literal\">true</span>); <span class=\"comment\">// fire at capture phase</span></span><br><span class=\"line\">element2.addEventListener(<span class=\"string\">'click'</span>, doSomething, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Event-delegation\"><a href=\"#Event-delegation\" class=\"headerlink\" title=\"Event delegation\"></a>Event delegation</h2><p>if you want some code to run when you click on any one of a large number of child elements, you can set the event listener on their parent and have events that happen on them bubble up to their parent, rather than having to set the event listener on every child individually, especially children elements are frequently added and removed.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"parent-list\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-1\"</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-2\"</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-3\"</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-4\"</span>&gt;</span>Item 4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-5\"</span>&gt;</span>Item 5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"post-6\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"endangered\"</span>&gt;</span>Item 6<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Get the element, add a click listener...</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// e.target is the clicked element!</span></span><br><span class=\"line\">  <span class=\"comment\">// If it was a list item</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.nodeName == <span class=\"string\">'LI'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'List item '</span>, e.target.id.replace(<span class=\"string\">'post-'</span>, <span class=\"string\">''</span>), <span class=\"string\">' was clicked!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'parent-list'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e.target &amp;&amp; e.target.matches(<span class=\"string\">'li.endangered'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// List item found!  Output the ID!</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'The '</span> + e.target.textContent + <span class=\"string\">' is endangered!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"related-reading\"><a href=\"#related-reading\" class=\"headerlink\" title=\"related reading\"></a>related reading</h2><p>mdn <a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture</a></p>\n<p>event order <a href=\"https://www.quirksmode.org/js/events_order.html\" target=\"_blank\" rel=\"noopener\">https://www.quirksmode.org/js/events_order.html</a></p>\n<p>event delegate <a href=\"https://davidwalsh.name/event-delegate\" target=\"_blank\" rel=\"noopener\">https://davidwalsh.name/event-delegate</a></p>\n<p>Event delegation <a href=\"https://javascript.info/event-delegation\" target=\"_blank\" rel=\"noopener\">https://javascript.info/event-delegation</a></p>\n"},{"title":"华为面试","date":"2017-01-23T23:53:12.000Z","_content":"\n上周过的有点胆战心惊。\n\n上周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。\n\n总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k（税前）的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。\n\n其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。\n\n最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。\n","source":"_posts/华为面试.md","raw":"---\ntitle: 华为面试\ndate: 2017-01-23 15:53:12\ncategories:\n- life\ntags:\n---\n\n上周过的有点胆战心惊。\n\n上周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。\n\n总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k（税前）的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。\n\n其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。\n\n最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。\n","slug":"华为面试","published":1,"updated":"2018-09-07T15:09:43.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx47000majs6x37ym6sh","content":"<p>上周过的有点胆战心惊。</p>\n<p>上周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。</p>\n<p>总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k（税前）的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。</p>\n<p>其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。</p>\n<p>最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>上周过的有点胆战心惊。</p>\n<p>上周六晚上告知我周一要去 onsite。我大致有预感会有 onsite，但是不知道他们的进展这么快。也没怎么复习就直接杀去了。可能是有点老油条了，心情不是很紧张。面了接近一个半小时，主要也是 ES6 和 Angular 的一些基本概念，prototype，class，inheritance 之类。唯一没答上来的是被问到 call，apply，bind 三者的区别。这个真是个顽疾了，再加上之前并没有仔细准备，当时就卡壳了。好在是中文面试，虽然记得很模糊了，但还是零零散散说了点东西。要是英文的话，估计就没有那么顺利了。面完感觉不错，反馈也说非常好，但迟迟没说发 offer。我估摸着是还要面完其他人。等到周四，突然来电说基本成了，然后给新公司填个人信息，背景审查。直到周六早上，才告诉我 offer 来了，下周一发我。到此，这次求职算是勉强告一段落。等到这周签了合同才算是板上钉钉尘埃落定。</p>\n<p>总结一下这次找工作，有满意的也有不满意的。满意的是，总体来说还挺顺利。一个是还在工作的时候找好下家，没像上次出现断档；二是第一次 onsite 就拿到 offer，没怎么拖泥带水；三就是工资涨了不少，我自己也没预料到，竟然就实现了今年 100k（税前）的目标；四是相对于现在的 Franklin，华为的名气大了不少（对于国内来说），倘若到时候回国，简历也好写点，更重要的是工作更有挑战，用的技术更新。不像现在，每天的工作就是写 HTML 和 CSS。</p>\n<p>其他方面无甚新闻，需要反省的还是注意力不集中的问题，花了太多时间在手机上。要尝试让自己更专注，减少无意义的浏览网页和碎片化的阅读。这周尝试使用番茄工作法，尽量锻炼自己专注的能力。另外要把刷社交网络的时间控制在二十五分钟以内。</p>\n<p>最后是普林斯顿的算法课又开始了。之前每次一打算开始学就开始找工作，也没机会静下心来花时间跟进。这次好一点了，要抓住机会。希望每周能花 10 个小时在这个上面，到三月中能完成所有的作业。</p>\n"},{"title":"三月总结","date":"2018-04-02T16:24:38.000Z","_content":"\n时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。\n\n今天看 medium，发现关于成功有个观点写的特别好。It's not a  goal, it's a lifestyle. It's not something they do sometimes. It's something they do all the time -- because it's part of who they are.\n\n反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。\n\n之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。\n\n所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.\n\nAnyway, 首先思想得转变过来，再来谈如何训练自己的习惯。\n\n四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。\n\n第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。\n\n最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。\n\n就先这样。\n","source":"_posts/三月总结.md","raw":"---\ntitle: 三月总结\ndate: 2018-04-02 09:24:38\ncategories:\n- life\ntags:\n---\n\n时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。\n\n今天看 medium，发现关于成功有个观点写的特别好。It's not a  goal, it's a lifestyle. It's not something they do sometimes. It's something they do all the time -- because it's part of who they are.\n\n反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。\n\n之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。\n\n所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.\n\nAnyway, 首先思想得转变过来，再来谈如何训练自己的习惯。\n\n四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。\n\n第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。\n\n最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。\n\n就先这样。\n","slug":"三月总结","published":1,"updated":"2018-09-07T15:39:23.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx4a000pajs69qsvkpvk","content":"<p>时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。</p>\n<p>今天看 medium，发现关于成功有个观点写的特别好。It’s not a  goal, it’s a lifestyle. It’s not something they do sometimes. It’s something they do all the time – because it’s part of who they are.</p>\n<p>反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。</p>\n<p>之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。</p>\n<p>所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.</p>\n<p>Anyway, 首先思想得转变过来，再来谈如何训练自己的习惯。</p>\n<p>四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。</p>\n<p>第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。</p>\n<p>最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。</p>\n<p>就先这样。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>时间过的太快了，不知不觉今年就过了四分之一。说来十分惭愧，前两个月计划的阅读书目都没有完成，对自己的执行力很失望。每天还是回家之后刷刷微博，看看网页，时间没有被充分的利用起来。</p>\n<p>今天看 medium，发现关于成功有个观点写的特别好。It’s not a  goal, it’s a lifestyle. It’s not something they do sometimes. It’s something they do all the time – because it’s part of who they are.</p>\n<p>反思过去，我总说我要如何如何，比方说早起，阅读，社交，每一项都罗列出来，像是为了完成一项任务。而从来没有从 who I am 的角度去思考问题。</p>\n<p>之前看到一句话说戒烟的，大意就是，当你尝试戒烟的时候，你应当把自己看做一个不抽烟的人，而不是一个戒烟的人。我恍然大悟。一个不抽烟的人是不会产生，‘偶尔抽一根，不会有事的，我能克制住’ 的想法的。不抽烟的人，也不会碍于烟友的面子而去接烟。不抽烟的人不会想着去和烟产生任何交集。</p>\n<p>所以我想，当我下定决心去实现某项目标的时候，是不是本末倒置了。不应当是，我早起，读书，不看社交网络，努力成为一个专注的人。而应当是，我要专注，所以应当把有限的时间和精力用在少数的任务上。Your odds of success improve when you are forced to direct all of your energy and attention to fewer tasks.</p>\n<p>Anyway, 首先思想得转变过来，再来谈如何训练自己的习惯。</p>\n<p>四月要养成的习惯是早睡和早起。首先要做的第一点就是，没有工作的事情话，十点以后不看手机和电脑。晚上也不要把手机放在床头。放轻松，没有那么多紧急事务需要在半夜处理。</p>\n<p>第二，还是阅读的习惯。现在读书太少了，感觉人变得浅薄而短视。尤其是这两年，中文书看得少，文字写得少，有时候话到嘴边，表述起来却是磕磕绊绊，不断的修正自己的观点。回国之后再这样，肯定会造成影响。究其原因，我觉得还是表述能力退化，表达无法跟上思维，再加上思维也太久没有受过训练，表现出散发而无归纳。所以要多注意自己表述的时候，最好先总结观点再娓娓道来。不要不经思考，脱口而出。</p>\n<p>最后说说四月的阅读计划。之前做计划，一个月四本，做出了与自己执行力不切实际的计划，导致最后无法达成，徒增挫败感。这次稍微少点，先实实在在做到，养成习惯。这回只要求三本，还都是处于一半状态的。最后，还是希望自己保持专注，一次只读一本书。这个月，需要看完《区块链技术指南》，《图解 HTTP》和《小团圆》。</p>\n<p>就先这样。</p>\n"},{"title":"新工作","date":"2017-02-05T23:49:30.000Z","_content":"\n终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。\n\n新的工作还是要居安思危。从明天开始，得好好刷刷题。\n","source":"_posts/新工作.md","raw":"---\ntitle: 新工作\ndate: 2017-02-05 15:49:30\ncategories:\n- life\ntags:\n---\n\n终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。\n\n新的工作还是要居安思危。从明天开始，得好好刷刷题。\n","slug":"新工作","published":1,"updated":"2018-09-07T15:11:57.436Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx4c000uajs6jpgdxfbi","content":"<p>终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。</p>\n<p>新的工作还是要居安思危。从明天开始，得好好刷刷题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>终于正式结束了在 Franklin 的工作，明天开始去华为了。在从十月三号开始，到二月三号终止，感觉过了很久，但是算下了也才刚刚四个月时间。想想刚刚开始每天坐火车通勤时的绝望，真不知道怎么熬过来的。</p>\n<p>新的工作还是要居安思危。从明天开始，得好好刷刷题。</p>\n"},{"title":"看《杀人回忆》","date":"2018-01-12T02:30:06.000Z","_content":"\n今天感冒了没去上班，给自己放个假，窝在被子里看了一部韩国电影《杀人回忆》。\n\n早有耳闻这部电影拍的很好，而我对于受到追捧的东西总是抱有一种审慎的态度。但是两个多小时下来，我的心一直被故事情节牢牢抓住，都快忘了感冒这茬。每次感觉到似乎有些光明，马上又堕入漫无头绪的混沌中。这不是在豆瓣写电影剖析，而且这起案件至今未结，我也不敢妄言谁是凶手，所以我就电影角度说说我的看法。\n\n韩国的侦探、悬疑和警匪片，总是给人一种警察和政府官员都是弱智的感觉，永远有几个警察追一个人的桥段出现。这部片子也不例外。每次都迟到的检查科，不听指挥的围观群众，手里永远夹着烟的警察，导演的镜头有些辛辣，着力表现大韩民国八十年代的乱象。八十年代的光州事件让政府和民众对立情绪高涨，示威和镇压不断，在这部电影里，虽未着太多笔墨，但也可见一斑。一点题外话，我很佩服韩国导演在记录独裁政府时的勇气。不止一部电影里出现或多或少光州事件的画面。这也算是对观影人的民主启蒙吧。\n\n故事讲述了一起连环奸杀案，导演用列车把整个电影穿起来呈现。整部电影，列车出现了三次，第一次是宋康昊和徐泰润见面，宋康昊用傻子（白光浩）的鞋子去作伪证，示意故事的开始；第二次是宋康昊知道了傻子看见过凶手，拿照片去让傻子确认。傻子突然发疯，被驶来的列车撞死，线索戛然而止，示意故事的高潮；最后一次，宋康昊拿到了精液对比的结果，列车驶来时，化验单失手落下被碾碎，示意故事最终结束。\n\n说说几个让我觉得颇值得玩味的场景。\n\n第一个就是电影一开始宋康昊查看水沟是遇到的小男孩。男孩重复和模仿宋康昊说的话和脸上的表情，导演似乎一开始就在隐喻这一系列的案件是模仿作案，而非一人所为。\n\n第二是在审讯赵秉顺的场景中，有一位修锅炉的男人。这一幕的重点本来是刑讯逼供赵秉顺如何杀人，但是这位锅炉工的每一个动作你都无法忽视。虽然导演让他始终在出现在侧面，但如果你把这一段看两遍，你会发现，这个人绝对不是平白无故的出现。入场，拧锅炉，关上门，走上台阶出去。他的脚步声和拧扳手的声音，每一声都是在旁敲侧击。第一幕，镜头给在蹲在地上的赵炳顺身上，他从楼梯上走下来，没给正脸，只有他的工具箱出境；第二幕，他背着身子拧扳手，不时地侧过脸来听赵秉顺的叙述，导演大大方方的把他放在画面的远角暗处；最后一幕他提着工具箱从徐泰润身边走过，还是有皮鞋的脚步声。这就有些昭然若揭的意味了。第二个画面尤为玩味，四个人成一个倒三角。一心照顾生病的妻子的无辜男人弱不禁风蹲在最下方，象征暴力的警察坐在最明亮的光照下，尝试刑讯逼供的主人公坐在正中，一脸鄙视与不满，最后代表或者象征或者暗喻凶手的锅炉工在暗处窥伺着发生的一切，并且出入自如。我说这部电影好妙，就妙在镜头值得玩味，定下来导演似乎就在和你讲述一小段故事。\n\n第三，就是一直充当刑讯逼供打手的曹容谷，动不动就上军靴踢无辜的嫌疑人，我琢磨这个人物的设定很有意思。影片中不止一次出现他殴打学生的镜头。在一次示威中，还抓住一名女学生，用右脚猛踹。在最后烤肉店的那场戏中（我看不懂电视里的新闻，字幕也没有翻译，但我想其中也会有些细节），是傻子一怒之下失手拿带有钉子的木棍扎穿了曹的右腿，以至于最后不得不截肢才能存活。男一和医生的对话，也是话中有话，“为什么刺穿了要锯断腿？”“因为不锯掉会死。” 最后给了那双军靴一个镜头。打手被锯掉的是右脚，象征充当独裁政府的暴力执行者。最后一定要被锯掉，也是导演对军政府的反思吧。\n\n第四，宋康昊，徐泰润和朴宪乔在隧道口。戴上手铐的朴未被子弹击中，最后还是爬起来步入黑暗的隧道中，脚步甚至有些轻松和洒脱，象征凶手最后还是逍遥法外，留下男一男二站在隧道口窥视，身姿疲倦。导演分别给了警察和凶手的视角，一方在明，如丧家之犬，一方在暗，似闲庭信步，对比强烈，给电影画上半个句点。\n\n最后，康昊大叔和小女孩的对话，转过头凝视着观众，演技爆棚没的说。\n\n只看了一遍，而且字幕也没有翻译报纸和电视的信息，肯定还有很多没有把握到的细节，下次有机会再看吧。总的来说，值得一看。\n","source":"_posts/看《杀人回忆》.md","raw":"---\ntitle: 看《杀人回忆》\ndate: 2018-01-11 18:30:06\ncategories:\n  - life\ntags:\n  - movie\n---\n\n今天感冒了没去上班，给自己放个假，窝在被子里看了一部韩国电影《杀人回忆》。\n\n早有耳闻这部电影拍的很好，而我对于受到追捧的东西总是抱有一种审慎的态度。但是两个多小时下来，我的心一直被故事情节牢牢抓住，都快忘了感冒这茬。每次感觉到似乎有些光明，马上又堕入漫无头绪的混沌中。这不是在豆瓣写电影剖析，而且这起案件至今未结，我也不敢妄言谁是凶手，所以我就电影角度说说我的看法。\n\n韩国的侦探、悬疑和警匪片，总是给人一种警察和政府官员都是弱智的感觉，永远有几个警察追一个人的桥段出现。这部片子也不例外。每次都迟到的检查科，不听指挥的围观群众，手里永远夹着烟的警察，导演的镜头有些辛辣，着力表现大韩民国八十年代的乱象。八十年代的光州事件让政府和民众对立情绪高涨，示威和镇压不断，在这部电影里，虽未着太多笔墨，但也可见一斑。一点题外话，我很佩服韩国导演在记录独裁政府时的勇气。不止一部电影里出现或多或少光州事件的画面。这也算是对观影人的民主启蒙吧。\n\n故事讲述了一起连环奸杀案，导演用列车把整个电影穿起来呈现。整部电影，列车出现了三次，第一次是宋康昊和徐泰润见面，宋康昊用傻子（白光浩）的鞋子去作伪证，示意故事的开始；第二次是宋康昊知道了傻子看见过凶手，拿照片去让傻子确认。傻子突然发疯，被驶来的列车撞死，线索戛然而止，示意故事的高潮；最后一次，宋康昊拿到了精液对比的结果，列车驶来时，化验单失手落下被碾碎，示意故事最终结束。\n\n说说几个让我觉得颇值得玩味的场景。\n\n第一个就是电影一开始宋康昊查看水沟是遇到的小男孩。男孩重复和模仿宋康昊说的话和脸上的表情，导演似乎一开始就在隐喻这一系列的案件是模仿作案，而非一人所为。\n\n第二是在审讯赵秉顺的场景中，有一位修锅炉的男人。这一幕的重点本来是刑讯逼供赵秉顺如何杀人，但是这位锅炉工的每一个动作你都无法忽视。虽然导演让他始终在出现在侧面，但如果你把这一段看两遍，你会发现，这个人绝对不是平白无故的出现。入场，拧锅炉，关上门，走上台阶出去。他的脚步声和拧扳手的声音，每一声都是在旁敲侧击。第一幕，镜头给在蹲在地上的赵炳顺身上，他从楼梯上走下来，没给正脸，只有他的工具箱出境；第二幕，他背着身子拧扳手，不时地侧过脸来听赵秉顺的叙述，导演大大方方的把他放在画面的远角暗处；最后一幕他提着工具箱从徐泰润身边走过，还是有皮鞋的脚步声。这就有些昭然若揭的意味了。第二个画面尤为玩味，四个人成一个倒三角。一心照顾生病的妻子的无辜男人弱不禁风蹲在最下方，象征暴力的警察坐在最明亮的光照下，尝试刑讯逼供的主人公坐在正中，一脸鄙视与不满，最后代表或者象征或者暗喻凶手的锅炉工在暗处窥伺着发生的一切，并且出入自如。我说这部电影好妙，就妙在镜头值得玩味，定下来导演似乎就在和你讲述一小段故事。\n\n第三，就是一直充当刑讯逼供打手的曹容谷，动不动就上军靴踢无辜的嫌疑人，我琢磨这个人物的设定很有意思。影片中不止一次出现他殴打学生的镜头。在一次示威中，还抓住一名女学生，用右脚猛踹。在最后烤肉店的那场戏中（我看不懂电视里的新闻，字幕也没有翻译，但我想其中也会有些细节），是傻子一怒之下失手拿带有钉子的木棍扎穿了曹的右腿，以至于最后不得不截肢才能存活。男一和医生的对话，也是话中有话，“为什么刺穿了要锯断腿？”“因为不锯掉会死。” 最后给了那双军靴一个镜头。打手被锯掉的是右脚，象征充当独裁政府的暴力执行者。最后一定要被锯掉，也是导演对军政府的反思吧。\n\n第四，宋康昊，徐泰润和朴宪乔在隧道口。戴上手铐的朴未被子弹击中，最后还是爬起来步入黑暗的隧道中，脚步甚至有些轻松和洒脱，象征凶手最后还是逍遥法外，留下男一男二站在隧道口窥视，身姿疲倦。导演分别给了警察和凶手的视角，一方在明，如丧家之犬，一方在暗，似闲庭信步，对比强烈，给电影画上半个句点。\n\n最后，康昊大叔和小女孩的对话，转过头凝视着观众，演技爆棚没的说。\n\n只看了一遍，而且字幕也没有翻译报纸和电视的信息，肯定还有很多没有把握到的细节，下次有机会再看吧。总的来说，值得一看。\n","slug":"看《杀人回忆》","published":1,"updated":"2018-09-07T15:31:13.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx4d000xajs6wwieuksy","content":"<p>今天感冒了没去上班，给自己放个假，窝在被子里看了一部韩国电影《杀人回忆》。</p>\n<p>早有耳闻这部电影拍的很好，而我对于受到追捧的东西总是抱有一种审慎的态度。但是两个多小时下来，我的心一直被故事情节牢牢抓住，都快忘了感冒这茬。每次感觉到似乎有些光明，马上又堕入漫无头绪的混沌中。这不是在豆瓣写电影剖析，而且这起案件至今未结，我也不敢妄言谁是凶手，所以我就电影角度说说我的看法。</p>\n<p>韩国的侦探、悬疑和警匪片，总是给人一种警察和政府官员都是弱智的感觉，永远有几个警察追一个人的桥段出现。这部片子也不例外。每次都迟到的检查科，不听指挥的围观群众，手里永远夹着烟的警察，导演的镜头有些辛辣，着力表现大韩民国八十年代的乱象。八十年代的光州事件让政府和民众对立情绪高涨，示威和镇压不断，在这部电影里，虽未着太多笔墨，但也可见一斑。一点题外话，我很佩服韩国导演在记录独裁政府时的勇气。不止一部电影里出现或多或少光州事件的画面。这也算是对观影人的民主启蒙吧。</p>\n<p>故事讲述了一起连环奸杀案，导演用列车把整个电影穿起来呈现。整部电影，列车出现了三次，第一次是宋康昊和徐泰润见面，宋康昊用傻子（白光浩）的鞋子去作伪证，示意故事的开始；第二次是宋康昊知道了傻子看见过凶手，拿照片去让傻子确认。傻子突然发疯，被驶来的列车撞死，线索戛然而止，示意故事的高潮；最后一次，宋康昊拿到了精液对比的结果，列车驶来时，化验单失手落下被碾碎，示意故事最终结束。</p>\n<p>说说几个让我觉得颇值得玩味的场景。</p>\n<p>第一个就是电影一开始宋康昊查看水沟是遇到的小男孩。男孩重复和模仿宋康昊说的话和脸上的表情，导演似乎一开始就在隐喻这一系列的案件是模仿作案，而非一人所为。</p>\n<p>第二是在审讯赵秉顺的场景中，有一位修锅炉的男人。这一幕的重点本来是刑讯逼供赵秉顺如何杀人，但是这位锅炉工的每一个动作你都无法忽视。虽然导演让他始终在出现在侧面，但如果你把这一段看两遍，你会发现，这个人绝对不是平白无故的出现。入场，拧锅炉，关上门，走上台阶出去。他的脚步声和拧扳手的声音，每一声都是在旁敲侧击。第一幕，镜头给在蹲在地上的赵炳顺身上，他从楼梯上走下来，没给正脸，只有他的工具箱出境；第二幕，他背着身子拧扳手，不时地侧过脸来听赵秉顺的叙述，导演大大方方的把他放在画面的远角暗处；最后一幕他提着工具箱从徐泰润身边走过，还是有皮鞋的脚步声。这就有些昭然若揭的意味了。第二个画面尤为玩味，四个人成一个倒三角。一心照顾生病的妻子的无辜男人弱不禁风蹲在最下方，象征暴力的警察坐在最明亮的光照下，尝试刑讯逼供的主人公坐在正中，一脸鄙视与不满，最后代表或者象征或者暗喻凶手的锅炉工在暗处窥伺着发生的一切，并且出入自如。我说这部电影好妙，就妙在镜头值得玩味，定下来导演似乎就在和你讲述一小段故事。</p>\n<p>第三，就是一直充当刑讯逼供打手的曹容谷，动不动就上军靴踢无辜的嫌疑人，我琢磨这个人物的设定很有意思。影片中不止一次出现他殴打学生的镜头。在一次示威中，还抓住一名女学生，用右脚猛踹。在最后烤肉店的那场戏中（我看不懂电视里的新闻，字幕也没有翻译，但我想其中也会有些细节），是傻子一怒之下失手拿带有钉子的木棍扎穿了曹的右腿，以至于最后不得不截肢才能存活。男一和医生的对话，也是话中有话，“为什么刺穿了要锯断腿？”“因为不锯掉会死。” 最后给了那双军靴一个镜头。打手被锯掉的是右脚，象征充当独裁政府的暴力执行者。最后一定要被锯掉，也是导演对军政府的反思吧。</p>\n<p>第四，宋康昊，徐泰润和朴宪乔在隧道口。戴上手铐的朴未被子弹击中，最后还是爬起来步入黑暗的隧道中，脚步甚至有些轻松和洒脱，象征凶手最后还是逍遥法外，留下男一男二站在隧道口窥视，身姿疲倦。导演分别给了警察和凶手的视角，一方在明，如丧家之犬，一方在暗，似闲庭信步，对比强烈，给电影画上半个句点。</p>\n<p>最后，康昊大叔和小女孩的对话，转过头凝视着观众，演技爆棚没的说。</p>\n<p>只看了一遍，而且字幕也没有翻译报纸和电视的信息，肯定还有很多没有把握到的细节，下次有机会再看吧。总的来说，值得一看。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天感冒了没去上班，给自己放个假，窝在被子里看了一部韩国电影《杀人回忆》。</p>\n<p>早有耳闻这部电影拍的很好，而我对于受到追捧的东西总是抱有一种审慎的态度。但是两个多小时下来，我的心一直被故事情节牢牢抓住，都快忘了感冒这茬。每次感觉到似乎有些光明，马上又堕入漫无头绪的混沌中。这不是在豆瓣写电影剖析，而且这起案件至今未结，我也不敢妄言谁是凶手，所以我就电影角度说说我的看法。</p>\n<p>韩国的侦探、悬疑和警匪片，总是给人一种警察和政府官员都是弱智的感觉，永远有几个警察追一个人的桥段出现。这部片子也不例外。每次都迟到的检查科，不听指挥的围观群众，手里永远夹着烟的警察，导演的镜头有些辛辣，着力表现大韩民国八十年代的乱象。八十年代的光州事件让政府和民众对立情绪高涨，示威和镇压不断，在这部电影里，虽未着太多笔墨，但也可见一斑。一点题外话，我很佩服韩国导演在记录独裁政府时的勇气。不止一部电影里出现或多或少光州事件的画面。这也算是对观影人的民主启蒙吧。</p>\n<p>故事讲述了一起连环奸杀案，导演用列车把整个电影穿起来呈现。整部电影，列车出现了三次，第一次是宋康昊和徐泰润见面，宋康昊用傻子（白光浩）的鞋子去作伪证，示意故事的开始；第二次是宋康昊知道了傻子看见过凶手，拿照片去让傻子确认。傻子突然发疯，被驶来的列车撞死，线索戛然而止，示意故事的高潮；最后一次，宋康昊拿到了精液对比的结果，列车驶来时，化验单失手落下被碾碎，示意故事最终结束。</p>\n<p>说说几个让我觉得颇值得玩味的场景。</p>\n<p>第一个就是电影一开始宋康昊查看水沟是遇到的小男孩。男孩重复和模仿宋康昊说的话和脸上的表情，导演似乎一开始就在隐喻这一系列的案件是模仿作案，而非一人所为。</p>\n<p>第二是在审讯赵秉顺的场景中，有一位修锅炉的男人。这一幕的重点本来是刑讯逼供赵秉顺如何杀人，但是这位锅炉工的每一个动作你都无法忽视。虽然导演让他始终在出现在侧面，但如果你把这一段看两遍，你会发现，这个人绝对不是平白无故的出现。入场，拧锅炉，关上门，走上台阶出去。他的脚步声和拧扳手的声音，每一声都是在旁敲侧击。第一幕，镜头给在蹲在地上的赵炳顺身上，他从楼梯上走下来，没给正脸，只有他的工具箱出境；第二幕，他背着身子拧扳手，不时地侧过脸来听赵秉顺的叙述，导演大大方方的把他放在画面的远角暗处；最后一幕他提着工具箱从徐泰润身边走过，还是有皮鞋的脚步声。这就有些昭然若揭的意味了。第二个画面尤为玩味，四个人成一个倒三角。一心照顾生病的妻子的无辜男人弱不禁风蹲在最下方，象征暴力的警察坐在最明亮的光照下，尝试刑讯逼供的主人公坐在正中，一脸鄙视与不满，最后代表或者象征或者暗喻凶手的锅炉工在暗处窥伺着发生的一切，并且出入自如。我说这部电影好妙，就妙在镜头值得玩味，定下来导演似乎就在和你讲述一小段故事。</p>\n<p>第三，就是一直充当刑讯逼供打手的曹容谷，动不动就上军靴踢无辜的嫌疑人，我琢磨这个人物的设定很有意思。影片中不止一次出现他殴打学生的镜头。在一次示威中，还抓住一名女学生，用右脚猛踹。在最后烤肉店的那场戏中（我看不懂电视里的新闻，字幕也没有翻译，但我想其中也会有些细节），是傻子一怒之下失手拿带有钉子的木棍扎穿了曹的右腿，以至于最后不得不截肢才能存活。男一和医生的对话，也是话中有话，“为什么刺穿了要锯断腿？”“因为不锯掉会死。” 最后给了那双军靴一个镜头。打手被锯掉的是右脚，象征充当独裁政府的暴力执行者。最后一定要被锯掉，也是导演对军政府的反思吧。</p>\n<p>第四，宋康昊，徐泰润和朴宪乔在隧道口。戴上手铐的朴未被子弹击中，最后还是爬起来步入黑暗的隧道中，脚步甚至有些轻松和洒脱，象征凶手最后还是逍遥法外，留下男一男二站在隧道口窥视，身姿疲倦。导演分别给了警察和凶手的视角，一方在明，如丧家之犬，一方在暗，似闲庭信步，对比强烈，给电影画上半个句点。</p>\n<p>最后，康昊大叔和小女孩的对话，转过头凝视着观众，演技爆棚没的说。</p>\n<p>只看了一遍，而且字幕也没有翻译报纸和电视的信息，肯定还有很多没有把握到的细节，下次有机会再看吧。总的来说，值得一看。</p>\n"},{"title":"这就算开始吧","date":"2016-12-19T17:26:47.000Z","_content":"\n打算在这里记录点生活和工作中的思考，以及技术方面的看法和总结。希望能保持每周写一两篇吧。","source":"_posts/这就算开始吧.md","raw":"---\ntitle: 这就算开始吧\ndate: 2016-12-19 09:26:47\ncategories:\n- life\ntags:\n---\n\n打算在这里记录点生活和工作中的思考，以及技术方面的看法和总结。希望能保持每周写一两篇吧。","slug":"这就算开始吧","published":1,"updated":"2018-09-07T14:46:20.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx4e000zajs6zjfp20i9","content":"<p>打算在这里记录点生活和工作中的思考，以及技术方面的看法和总结。希望能保持每周写一两篇吧。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>打算在这里记录点生活和工作中的思考，以及技术方面的看法和总结。希望能保持每周写一两篇吧。</p>\n"},{"title":"Iterators and generators","date":"2018-05-01T08:19:28.000Z","_content":"\n# Iterators and Generators\n\n## Iterators\n\nIterators are objects with a specific interface designed for iteration.\n\nIn JavaScript an iterator is an object that provides a `next()` method which returns the next item in the sequence. This method returns an object with two properties: `done` and `value`.\n\nBelow is an implementation of iterator in ES5.\n\n```js\nfunction createIterator(items) {\n  var i = 0;\n  return {\n    next: function() {\n      var done = i >= items.length;\n      var value = !done ? items[i++] : undefined;\n\n      return {\n        done: done,\n        value: value,\n      };\n    },\n  };\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { done: false, value: 1 }\nconsole.log(iterator.next()); // { done: false, value: 2 }\nconsole.log(iterator.next()); // { done: false, value: 3 }\nconsole.log(iterator.next()); // { done: true, value: undefined }\n```\n\n## Generators\n\nA generator is a function that returns an iterator. Generator functions are indicated by an asterisk (_) after the `function` key word and use the `yield` keyword. It doesn't matter how many whitespace between `function` and `_`. On MDN, the`_`is right next to`function`, however in Zakas's book, the`_` is just before the function name.\n\nGenerators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\n\n> you can use `yield` only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.\n\n```js\n// method 1: function declaration\nfunction* createIterator1(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n}\n\n// method 2: function expression\nlet createIterator2 = function*(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n};\n\nconst iterator = createIterator2([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n> create an arrow function that is also a generator is not possible.\n\n### Generator Object Method\n\nSince generators are just functions. You can add generators to objects.\n\n```js\n// method 1: es5 style object literal\nlet obj1 = {\n  createIterator: function*(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\n// method 2: es6 shorthand\nlet obj2 = {\n  *createIterator(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\nconst iterator = obj2.createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n## Iterable and for-of loops\n\n`iterable protocol`: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a `for..of` construct.\n\nAn iterable is an object with a `Symbol.iterator` property.\n\nThese are iterables:\n\n* Arrays and TypedArrays\n* Maps\n* Sets\n* Strings\n* `arguments`\n* DOM Elements `NodeList`\n\n> All iterators created by generators are also iterables, because generators assign the `Symbol.iterator` property by default.\n\n### Accessing the default Iterator\n\n```js\nlet values = [1, 2, 3];\n\n// same process happens behind the scene when using for-of loop\nlet iterator = values[Symbol.iterator]();\n\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\n\n// check\nfunction isIterable(object) {\n  return typeof object[Symbol.iterator] === 'function';\n}\n\nconsole.log(isIterable([1, 2, 3])); // true\nconsole.log(isIterable('Hello')); // true\nconsole.log(isIterable(new Map())); // true\nconsole.log(isIterable(new Set())); // true\nconsole.log(isIterable(new WeakMap())); // false\nconsole.log(isIterable(new WeakSet())); // false\n```\n\n### Creating Iterator\n\n```js\nlet collection = {\n  items: [],\n  *[Symbol.iterator]() {\n    for (let item of this.items) {\n      yield item;\n    }\n  },\n};\n\ncollection.items.push(1);\ncollection.items.push(2);\ncollection.items.push(3);\n\nfor (let x of collection) {\n  console.log(x);\n}\n\n// 1\n// 2\n// 3\n```\n\n## Built-in Iterators\n\n### collection iterators\n\n* `entries()`\n* `values()`\n* `keys()`\n\n#### `entries()`\n\n* array: [index, value]\n* set: [value, value]\n* map: [key, value]\n\n#### `values()`\n\n* array: value\n* set: value\n* map: value\n\n#### `keys()`\n\n* array: index\n* set: value\n* map: key\n\n### Default Iterators for Collection Types\n\n* array: `values()`\n* set: `values()`\n* map: `entries()`\n\n```js\n// destructuring and for-of loop\nlet data = new Map();\n\ndata.set('title', 'Understanding ECMAScript 6');\ndata.set('format', 'ebook');\n\n// same as using data.entries()\nfor (let [key, value] of data) {\n  console.log(key + '=' + value);\n}\n```\n\n* NodeList\n\n```js\nvar divs = document.getElementsByTagName('div');\n\nfor (let div of divs) {\n  console.log(div.id);\n}\n```\n\n## Constructs accept iterables\n\nSome other constructs in JS that use iterables are:\n\n* `for-of`\n* Destructuring of Arrays\n* The spread operator (`…`)\n* `Promise.all` and `Promise.race` accept iterables over Promises.\n* Maps and Sets\n\n```js\nconst map = new Map([[1, 'one'], [2, 'two']]);\nmap.get(1)\n// one\nconst set = new Set(['a', 'b', 'c]);\nset.has('c');\n// true\n```\n\n## Advanced Iterator Functionality\n\n### passing arguments to Iterators\n\nThe `next()` method also accepts a value which can be used to modify the internal state of the generator. A value passed to `next()` will be treated as the result of the last yield expression that paused the generator.\n\n```js\nfunction* createIterator() {\n  let first = yield 1;\n  let second = yield first + 2; // 4 + 2\n  yield second + 3; // 5 + 3\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next(4)); // \"{ value: 6, done: false }\"\nconsole.log(iterator.next(5)); // \"{ value: 8, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n### Throw and Return\n\n* throw\n\nResume the execution of a generator by throwing an error into it and returns an object with two properties done and value.\n\n```js\nfunction* gen() {\n  while (true) {\n    try {\n      yield 42;\n    } catch (e) {\n      console.log('Error caught!');\n    }\n  }\n}\n\nvar g = gen();\ng.next();\n// { value: 42, done: false }\ng.throw(new Error('Something went wrong'));\n// \"Error caught!\"\n// { value: 42, done: false }\n```\n\n* return\n\nReturn the given value and finishes the generator.\n\n```js\nfunction* createIterator() {\n  yield 1;\n  return;\n  yield 2;\n  yield 3;\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n### Delegating generators\n\n```js\nfunction* g1() {\n  yield 1;\n  yield 2;\n}\n\nfunction* g2() {\n  yield 0;\n  yield* g1();\n  yield* [3, 4];\n  yield* '56';\n  yield* Array.from(arguments);\n}\n\nvar iterator = g2(7, 8);\n\nconsole.log(iterator.next()); // {value: 0, done: false}\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: 4, done: false}\nconsole.log(iterator.next()); // {value: '5', done: false}\nconsole.log(iterator.next()); // {value: '6', done: false}\nconsole.log(iterator.next()); // {value: 7, done: false}\nconsole.log(iterator.next()); // {value: 8, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```\n\n`yield*` is an expression, not a statement, so it evaluates to a value.\n\n```js\nfunction* g4() {\n  yield* [1, 2, 3];\n  return 'foo';\n}\n\nvar result;\n\nfunction* g5() {\n  result = yield* g4();\n}\n\nvar iterator = g5();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true},\n// g4() returned {value: 'foo', done: true} at this point\n\nconsole.log(result); // \"foo\"\n```\n\n## Asynchronous Task Running\n\n### tradition callback\n\n```js\nlet fs = require('fs');\n\nfs.readFile('config.json', function(err, contents) {\n  if (err) {\n    throw err;\n  }\n\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n### Asynchronous task runner\n\n```js\nfunction run(taskDef) {\n  // create the iterator, make available elsewhere\n  let task = taskDef();\n\n  // start the task\n  let result = task.next();\n\n  // recursive function to keep calling next()\n  function step() {\n    // if there's more to do\n    if (!result.done) {\n      if (typeof result.value === 'function') {\n        result.value(function(err, data) {\n          if (err) {\n            result = task.throw(err);\n            return;\n          }\n\n          result = task.next(data);\n          step();\n        });\n      } else {\n        result = task.next(result.value);\n        step();\n      }\n    }\n  }\n\n  // start the process\n  step();\n}\n\nlet fs = require('fs');\n\nfunction readFile(filename) {\n  return function(callback) {\n    fs.readFile(filename, callback);\n  };\n}\n\nrun(function*() {\n  let contents = yield readFile('config.json');\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n### Pros and Cons\n\nPros:\n\n* Lazy Evaluation: It is calculated as we demand it;\n* Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.\n\nCons:\n\n* Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.\n* Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.\n\n## Related Reading\n\n1.  Nicholas C. Zakas, [Iterators and Generators](https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators)\n\n2.  Axel Rauschmayer, [Iterables and iterators](http://exploringjs.com/es6/ch_iteration.html)\n\n3.  Axel Rauschmayer, [Generators](http://exploringjs.com/es6/ch_generators.html)\n\n4.  Brandon Morelli, [A Simple Guide to ES6 Iterators in JavaScript with Examples](https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e)\n\n5.  Arfat Salman, [Understanding Generators in ES6 JavaScript with Examples](https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5)\n\n6.  MDN, [Iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n\n7.  MDN, [Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n","source":"_posts/Iterators-and-generators.md","raw":"---\ntitle: Iterators and generators\ndate: 2018-05-01 01:19:28\ncategories:\n- web\ntags:\n- ECMAScript2015\n- es6\n- iterators\n- generators\n---\n\n# Iterators and Generators\n\n## Iterators\n\nIterators are objects with a specific interface designed for iteration.\n\nIn JavaScript an iterator is an object that provides a `next()` method which returns the next item in the sequence. This method returns an object with two properties: `done` and `value`.\n\nBelow is an implementation of iterator in ES5.\n\n```js\nfunction createIterator(items) {\n  var i = 0;\n  return {\n    next: function() {\n      var done = i >= items.length;\n      var value = !done ? items[i++] : undefined;\n\n      return {\n        done: done,\n        value: value,\n      };\n    },\n  };\n}\n\nvar iterator = createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { done: false, value: 1 }\nconsole.log(iterator.next()); // { done: false, value: 2 }\nconsole.log(iterator.next()); // { done: false, value: 3 }\nconsole.log(iterator.next()); // { done: true, value: undefined }\n```\n\n## Generators\n\nA generator is a function that returns an iterator. Generator functions are indicated by an asterisk (_) after the `function` key word and use the `yield` keyword. It doesn't matter how many whitespace between `function` and `_`. On MDN, the`_`is right next to`function`, however in Zakas's book, the`_` is just before the function name.\n\nGenerators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.\n\n> you can use `yield` only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.\n\n```js\n// method 1: function declaration\nfunction* createIterator1(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n}\n\n// method 2: function expression\nlet createIterator2 = function*(items) {\n  for (let index = 0; index < items.length; index++) {\n    yield items[index];\n  }\n};\n\nconst iterator = createIterator2([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n> create an arrow function that is also a generator is not possible.\n\n### Generator Object Method\n\nSince generators are just functions. You can add generators to objects.\n\n```js\n// method 1: es5 style object literal\nlet obj1 = {\n  createIterator: function*(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\n// method 2: es6 shorthand\nlet obj2 = {\n  *createIterator(items) {\n    for (let index = 0; index < items.length; index++) {\n      yield items[index];\n    }\n  },\n};\n\nconst iterator = obj2.createIterator([1, 2, 3]);\n\nconsole.log(iterator.next()); // { value: 1, done: false }\nconsole.log(iterator.next()); // { value: 2, done: false }\nconsole.log(iterator.next()); // { value: 3, done: false }\nconsole.log(iterator.next()); // { value: undefined, done: true }\n```\n\n## Iterable and for-of loops\n\n`iterable protocol`: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a `for..of` construct.\n\nAn iterable is an object with a `Symbol.iterator` property.\n\nThese are iterables:\n\n* Arrays and TypedArrays\n* Maps\n* Sets\n* Strings\n* `arguments`\n* DOM Elements `NodeList`\n\n> All iterators created by generators are also iterables, because generators assign the `Symbol.iterator` property by default.\n\n### Accessing the default Iterator\n\n```js\nlet values = [1, 2, 3];\n\n// same process happens behind the scene when using for-of loop\nlet iterator = values[Symbol.iterator]();\n\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\nconsole.log(iterator.next());\n\n// check\nfunction isIterable(object) {\n  return typeof object[Symbol.iterator] === 'function';\n}\n\nconsole.log(isIterable([1, 2, 3])); // true\nconsole.log(isIterable('Hello')); // true\nconsole.log(isIterable(new Map())); // true\nconsole.log(isIterable(new Set())); // true\nconsole.log(isIterable(new WeakMap())); // false\nconsole.log(isIterable(new WeakSet())); // false\n```\n\n### Creating Iterator\n\n```js\nlet collection = {\n  items: [],\n  *[Symbol.iterator]() {\n    for (let item of this.items) {\n      yield item;\n    }\n  },\n};\n\ncollection.items.push(1);\ncollection.items.push(2);\ncollection.items.push(3);\n\nfor (let x of collection) {\n  console.log(x);\n}\n\n// 1\n// 2\n// 3\n```\n\n## Built-in Iterators\n\n### collection iterators\n\n* `entries()`\n* `values()`\n* `keys()`\n\n#### `entries()`\n\n* array: [index, value]\n* set: [value, value]\n* map: [key, value]\n\n#### `values()`\n\n* array: value\n* set: value\n* map: value\n\n#### `keys()`\n\n* array: index\n* set: value\n* map: key\n\n### Default Iterators for Collection Types\n\n* array: `values()`\n* set: `values()`\n* map: `entries()`\n\n```js\n// destructuring and for-of loop\nlet data = new Map();\n\ndata.set('title', 'Understanding ECMAScript 6');\ndata.set('format', 'ebook');\n\n// same as using data.entries()\nfor (let [key, value] of data) {\n  console.log(key + '=' + value);\n}\n```\n\n* NodeList\n\n```js\nvar divs = document.getElementsByTagName('div');\n\nfor (let div of divs) {\n  console.log(div.id);\n}\n```\n\n## Constructs accept iterables\n\nSome other constructs in JS that use iterables are:\n\n* `for-of`\n* Destructuring of Arrays\n* The spread operator (`…`)\n* `Promise.all` and `Promise.race` accept iterables over Promises.\n* Maps and Sets\n\n```js\nconst map = new Map([[1, 'one'], [2, 'two']]);\nmap.get(1)\n// one\nconst set = new Set(['a', 'b', 'c]);\nset.has('c');\n// true\n```\n\n## Advanced Iterator Functionality\n\n### passing arguments to Iterators\n\nThe `next()` method also accepts a value which can be used to modify the internal state of the generator. A value passed to `next()` will be treated as the result of the last yield expression that paused the generator.\n\n```js\nfunction* createIterator() {\n  let first = yield 1;\n  let second = yield first + 2; // 4 + 2\n  yield second + 3; // 5 + 3\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next(4)); // \"{ value: 6, done: false }\"\nconsole.log(iterator.next(5)); // \"{ value: 8, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n### Throw and Return\n\n* throw\n\nResume the execution of a generator by throwing an error into it and returns an object with two properties done and value.\n\n```js\nfunction* gen() {\n  while (true) {\n    try {\n      yield 42;\n    } catch (e) {\n      console.log('Error caught!');\n    }\n  }\n}\n\nvar g = gen();\ng.next();\n// { value: 42, done: false }\ng.throw(new Error('Something went wrong'));\n// \"Error caught!\"\n// { value: 42, done: false }\n```\n\n* return\n\nReturn the given value and finishes the generator.\n\n```js\nfunction* createIterator() {\n  yield 1;\n  return;\n  yield 2;\n  yield 3;\n}\n\nlet iterator = createIterator();\n\nconsole.log(iterator.next()); // \"{ value: 1, done: false }\"\nconsole.log(iterator.next()); // \"{ value: undefined, done: true }\"\n```\n\n### Delegating generators\n\n```js\nfunction* g1() {\n  yield 1;\n  yield 2;\n}\n\nfunction* g2() {\n  yield 0;\n  yield* g1();\n  yield* [3, 4];\n  yield* '56';\n  yield* Array.from(arguments);\n}\n\nvar iterator = g2(7, 8);\n\nconsole.log(iterator.next()); // {value: 0, done: false}\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: 4, done: false}\nconsole.log(iterator.next()); // {value: '5', done: false}\nconsole.log(iterator.next()); // {value: '6', done: false}\nconsole.log(iterator.next()); // {value: 7, done: false}\nconsole.log(iterator.next()); // {value: 8, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```\n\n`yield*` is an expression, not a statement, so it evaluates to a value.\n\n```js\nfunction* g4() {\n  yield* [1, 2, 3];\n  return 'foo';\n}\n\nvar result;\n\nfunction* g5() {\n  result = yield* g4();\n}\n\nvar iterator = g5();\n\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true},\n// g4() returned {value: 'foo', done: true} at this point\n\nconsole.log(result); // \"foo\"\n```\n\n## Asynchronous Task Running\n\n### tradition callback\n\n```js\nlet fs = require('fs');\n\nfs.readFile('config.json', function(err, contents) {\n  if (err) {\n    throw err;\n  }\n\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n### Asynchronous task runner\n\n```js\nfunction run(taskDef) {\n  // create the iterator, make available elsewhere\n  let task = taskDef();\n\n  // start the task\n  let result = task.next();\n\n  // recursive function to keep calling next()\n  function step() {\n    // if there's more to do\n    if (!result.done) {\n      if (typeof result.value === 'function') {\n        result.value(function(err, data) {\n          if (err) {\n            result = task.throw(err);\n            return;\n          }\n\n          result = task.next(data);\n          step();\n        });\n      } else {\n        result = task.next(result.value);\n        step();\n      }\n    }\n  }\n\n  // start the process\n  step();\n}\n\nlet fs = require('fs');\n\nfunction readFile(filename) {\n  return function(callback) {\n    fs.readFile(filename, callback);\n  };\n}\n\nrun(function*() {\n  let contents = yield readFile('config.json');\n  doSomethingWith(contents);\n  console.log('Done');\n});\n```\n\n### Pros and Cons\n\nPros:\n\n* Lazy Evaluation: It is calculated as we demand it;\n* Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.\n\nCons:\n\n* Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.\n* Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.\n\n## Related Reading\n\n1.  Nicholas C. Zakas, [Iterators and Generators](https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators)\n\n2.  Axel Rauschmayer, [Iterables and iterators](http://exploringjs.com/es6/ch_iteration.html)\n\n3.  Axel Rauschmayer, [Generators](http://exploringjs.com/es6/ch_generators.html)\n\n4.  Brandon Morelli, [A Simple Guide to ES6 Iterators in JavaScript with Examples](https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e)\n\n5.  Arfat Salman, [Understanding Generators in ES6 JavaScript with Examples](https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5)\n\n6.  MDN, [Iterators and generators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n\n7.  MDN, [Iteration protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators)\n","slug":"Iterators-and-generators","published":1,"updated":"2018-09-07T14:40:10.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx7r002gajs6h3n4pa41","content":"<h1 id=\"Iterators-and-Generators\"><a href=\"#Iterators-and-Generators\" class=\"headerlink\" title=\"Iterators and Generators\"></a>Iterators and Generators</h1><h2 id=\"Iterators\"><a href=\"#Iterators\" class=\"headerlink\" title=\"Iterators\"></a>Iterators</h2><p>Iterators are objects with a specific interface designed for iteration.</p>\n<p>In JavaScript an iterator is an object that provides a <code>next()</code> method which returns the next item in the sequence. This method returns an object with two properties: <code>done</code> and <code>value</code>.</p>\n<p>Below is an implementation of iterator in ES5.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIterator</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> done = i &gt;= items.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = !done ? items[i++] : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        done: done,</span><br><span class=\"line\">        value: value,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 1 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 2 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h2><p>A generator is a function that returns an iterator. Generator functions are indicated by an asterisk (<em>) after the <code>function</code> key word and use the <code>yield</code> keyword. It doesn’t matter how many whitespace between <code>function</code> and `</em><code>. On MDN, the</code><em><code>is right next to</code>function<code>, however in Zakas&#39;s book, the</code></em>` is just before the function name.</p>\n<p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p>\n<blockquote>\n<p>you can use <code>yield</code> only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: function declaration</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator1</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: function expression</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createIterator2 = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = createIterator2([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>create an arrow function that is also a generator is not possible.</p>\n</blockquote>\n<h3 id=\"Generator-Object-Method\"><a href=\"#Generator-Object-Method\" class=\"headerlink\" title=\"Generator Object Method\"></a>Generator Object Method</h3><p>Since generators are just functions. You can add generators to objects.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: es5 style object literal</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  createIterator: <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: es6 shorthand</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  *createIterator(items) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = obj2.createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Iterable-and-for-of-loops\"><a href=\"#Iterable-and-for-of-loops\" class=\"headerlink\" title=\"Iterable and for-of loops\"></a>Iterable and for-of loops</h2><p><code>iterable protocol</code>: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a <code>for..of</code> construct.</p>\n<p>An iterable is an object with a <code>Symbol.iterator</code> property.</p>\n<p>These are iterables:</p>\n<ul>\n<li>Arrays and TypedArrays</li>\n<li>Maps</li>\n<li>Sets</li>\n<li>Strings</li>\n<li><code>arguments</code></li>\n<li>DOM Elements <code>NodeList</code></li>\n</ul>\n<blockquote>\n<p>All iterators created by generators are also iterables, because generators assign the <code>Symbol.iterator</code> property by default.</p>\n</blockquote>\n<h3 id=\"Accessing-the-default-Iterator\"><a href=\"#Accessing-the-default-Iterator\" class=\"headerlink\" title=\"Accessing the default Iterator\"></a>Accessing the default Iterator</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same process happens behind the scene when using for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = values[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isIterable</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> object[<span class=\"built_in\">Symbol</span>.iterator] === <span class=\"string\">'function'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"string\">'Hello'</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>())); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>())); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Creating-Iterator\"><a href=\"#Creating-Iterator\" class=\"headerlink\" title=\"Creating Iterator\"></a>Creating Iterator</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> collection = &#123;</span><br><span class=\"line\">  items: [],</span><br><span class=\"line\">  *[<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.items) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">collection.items.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> collection) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Built-in-Iterators\"><a href=\"#Built-in-Iterators\" class=\"headerlink\" title=\"Built-in Iterators\"></a>Built-in Iterators</h2><h3 id=\"collection-iterators\"><a href=\"#collection-iterators\" class=\"headerlink\" title=\"collection iterators\"></a>collection iterators</h3><ul>\n<li><code>entries()</code></li>\n<li><code>values()</code></li>\n<li><code>keys()</code></li>\n</ul>\n<h4 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a><code>entries()</code></h4><ul>\n<li>array: [index, value]</li>\n<li>set: [value, value]</li>\n<li>map: [key, value]</li>\n</ul>\n<h4 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a><code>values()</code></h4><ul>\n<li>array: value</li>\n<li>set: value</li>\n<li>map: value</li>\n</ul>\n<h4 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a><code>keys()</code></h4><ul>\n<li>array: index</li>\n<li>set: value</li>\n<li>map: key</li>\n</ul>\n<h3 id=\"Default-Iterators-for-Collection-Types\"><a href=\"#Default-Iterators-for-Collection-Types\" class=\"headerlink\" title=\"Default Iterators for Collection Types\"></a>Default Iterators for Collection Types</h3><ul>\n<li>array: <code>values()</code></li>\n<li>set: <code>values()</code></li>\n<li>map: <code>entries()</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// destructuring and for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">data.set(<span class=\"string\">'title'</span>, <span class=\"string\">'Understanding ECMAScript 6'</span>);</span><br><span class=\"line\">data.set(<span class=\"string\">'format'</span>, <span class=\"string\">'ebook'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same as using data.entries()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">'='</span> + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NodeList</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> div <span class=\"keyword\">of</span> divs) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(div.id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Constructs-accept-iterables\"><a href=\"#Constructs-accept-iterables\" class=\"headerlink\" title=\"Constructs accept iterables\"></a>Constructs accept iterables</h2><p>Some other constructs in JS that use iterables are:</p>\n<ul>\n<li><code>for-of</code></li>\n<li>Destructuring of Arrays</li>\n<li>The spread operator (<code>…</code>)</li>\n<li><code>Promise.all</code> and <code>Promise.race</code> accept iterables over Promises.</li>\n<li>Maps and Sets</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'one'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>]]);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c]);</span></span><br><span class=\"line\"><span class=\"string\">set.has('</span>c<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Advanced-Iterator-Functionality\"><a href=\"#Advanced-Iterator-Functionality\" class=\"headerlink\" title=\"Advanced Iterator Functionality\"></a>Advanced Iterator Functionality</h2><h3 id=\"passing-arguments-to-Iterators\"><a href=\"#passing-arguments-to-Iterators\" class=\"headerlink\" title=\"passing arguments to Iterators\"></a>passing arguments to Iterators</h3><p>The <code>next()</code> method also accepts a value which can be used to modify the internal state of the generator. A value passed to <code>next()</code> will be treated as the result of the last yield expression that paused the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> second = <span class=\"keyword\">yield</span> first + <span class=\"number\">2</span>; <span class=\"comment\">// 4 + 2</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> second + <span class=\"number\">3</span>; <span class=\"comment\">// 5 + 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">4</span>)); <span class=\"comment\">// \"&#123; value: 6, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">5</span>)); <span class=\"comment\">// \"&#123; value: 8, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Throw-and-Return\"><a href=\"#Throw-and-Return\" class=\"headerlink\" title=\"Throw and Return\"></a>Throw and Return</h3><ul>\n<li>throw</li>\n</ul>\n<p>Resume the execution of a generator by throwing an error into it and returns an object with two properties done and value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error caught!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br><span class=\"line\">g.throw(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Something went wrong'</span>));</span><br><span class=\"line\"><span class=\"comment\">// \"Error caught!\"</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>return</li>\n</ul>\n<p>Return the given value and finishes the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Delegating-generators\"><a href=\"#Delegating-generators\" class=\"headerlink\" title=\"Delegating generators\"></a>Delegating generators</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* g1();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"string\">'56'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g2(<span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 4, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '5', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '6', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 7, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 8, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>yield*</code> is an expression, not a statement, so it evaluates to a value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  result = <span class=\"keyword\">yield</span>* g4();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g5();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// g4() returned &#123;value: 'foo', done: true&#125; at this point</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"foo\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Asynchronous-Task-Running\"><a href=\"#Asynchronous-Task-Running\" class=\"headerlink\" title=\"Asynchronous Task Running\"></a>Asynchronous Task Running</h2><h3 id=\"tradition-callback\"><a href=\"#tradition-callback\" class=\"headerlink\" title=\"tradition callback\"></a>tradition callback</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'config.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Asynchronous-task-runner\"><a href=\"#Asynchronous-task-runner\" class=\"headerlink\" title=\"Asynchronous task runner\"></a>Asynchronous task runner</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">taskDef</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// create the iterator, make available elsewhere</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> task = taskDef();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the task</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = task.next();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// recursive function to keep calling next()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if there's more to do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result.done) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result.value === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        result.value(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            result = task.throw(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          result = task.next(data);</span><br><span class=\"line\">          step();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = task.next(result.value);</span><br><span class=\"line\">        step();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the process</span></span><br><span class=\"line\">  step();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFile</span>(<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filename, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> contents = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'config.json'</span>);</span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h3><p>Pros:</p>\n<ul>\n<li>Lazy Evaluation: It is calculated as we demand it;</li>\n<li>Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.</li>\n<li>Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.</li>\n</ul>\n<h2 id=\"Related-Reading\"><a href=\"#Related-Reading\" class=\"headerlink\" title=\"Related Reading\"></a>Related Reading</h2><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators\" target=\"_blank\" rel=\"noopener\">Iterators and Generators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_iteration.html\" target=\"_blank\" rel=\"noopener\">Iterables and iterators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_generators.html\" target=\"_blank\" rel=\"noopener\">Generators</a></p>\n</li>\n<li><p>Brandon Morelli, <a href=\"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e\" target=\"_blank\" rel=\"noopener\">A Simple Guide to ES6 Iterators in JavaScript with Examples</a></p>\n</li>\n<li><p>Arfat Salman, <a href=\"https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5\" target=\"_blank\" rel=\"noopener\">Understanding Generators in ES6 JavaScript with Examples</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iterators and generators</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iteration protocols</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Iterators-and-Generators\"><a href=\"#Iterators-and-Generators\" class=\"headerlink\" title=\"Iterators and Generators\"></a>Iterators and Generators</h1><h2 id=\"Iterators\"><a href=\"#Iterators\" class=\"headerlink\" title=\"Iterators\"></a>Iterators</h2><p>Iterators are objects with a specific interface designed for iteration.</p>\n<p>In JavaScript an iterator is an object that provides a <code>next()</code> method which returns the next item in the sequence. This method returns an object with two properties: <code>done</code> and <code>value</code>.</p>\n<p>Below is an implementation of iterator in ES5.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIterator</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> done = i &gt;= items.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = !done ? items[i++] : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        done: done,</span><br><span class=\"line\">        value: value,</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 1 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 2 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: false, value: 3 &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Generators\"><a href=\"#Generators\" class=\"headerlink\" title=\"Generators\"></a>Generators</h2><p>A generator is a function that returns an iterator. Generator functions are indicated by an asterisk (<em>) after the <code>function</code> key word and use the <code>yield</code> keyword. It doesn’t matter how many whitespace between <code>function</code> and `</em><code>. On MDN, the</code><em><code>is right next to</code>function<code>, however in Zakas&#39;s book, the</code></em>` is just before the function name.</p>\n<p>Generators are functions which can be exited and later re-entered. Their context (variable bindings) will be saved across re-entrances.</p>\n<blockquote>\n<p>you can use <code>yield</code> only inside generators. Using yield anywhere else is a syntax error, including in functions that are inside generators.</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: function declaration</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator1</span>(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: function expression</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> createIterator2 = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = createIterator2([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>create an arrow function that is also a generator is not possible.</p>\n</blockquote>\n<h3 id=\"Generator-Object-Method\"><a href=\"#Generator-Object-Method\" class=\"headerlink\" title=\"Generator Object Method\"></a>Generator Object Method</h3><p>Since generators are just functions. You can add generators to objects.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// method 1: es5 style object literal</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj1 = &#123;</span><br><span class=\"line\">  createIterator: <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\">items</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// method 2: es6 shorthand</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = &#123;</span><br><span class=\"line\">  *createIterator(items) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; items.length; index++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> items[index];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = obj2.createIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 1, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Iterable-and-for-of-loops\"><a href=\"#Iterable-and-for-of-loops\" class=\"headerlink\" title=\"Iterable and for-of loops\"></a>Iterable and for-of loops</h2><p><code>iterable protocol</code>: The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a <code>for..of</code> construct.</p>\n<p>An iterable is an object with a <code>Symbol.iterator</code> property.</p>\n<p>These are iterables:</p>\n<ul>\n<li>Arrays and TypedArrays</li>\n<li>Maps</li>\n<li>Sets</li>\n<li>Strings</li>\n<li><code>arguments</code></li>\n<li>DOM Elements <code>NodeList</code></li>\n</ul>\n<blockquote>\n<p>All iterators created by generators are also iterables, because generators assign the <code>Symbol.iterator</code> property by default.</p>\n</blockquote>\n<h3 id=\"Accessing-the-default-Iterator\"><a href=\"#Accessing-the-default-Iterator\" class=\"headerlink\" title=\"Accessing the default Iterator\"></a>Accessing the default Iterator</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> values = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same process happens behind the scene when using for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = values[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// check</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isIterable</span>(<span class=\"params\">object</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> object[<span class=\"built_in\">Symbol</span>.iterator] === <span class=\"string\">'function'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"string\">'Hello'</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>())); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>())); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(isIterable(<span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>())); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Creating-Iterator\"><a href=\"#Creating-Iterator\" class=\"headerlink\" title=\"Creating Iterator\"></a>Creating Iterator</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> collection = &#123;</span><br><span class=\"line\">  items: [],</span><br><span class=\"line\">  *[<span class=\"built_in\">Symbol</span>.iterator]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> <span class=\"keyword\">this</span>.items) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> item;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">collection.items.push(<span class=\"number\">1</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">2</span>);</span><br><span class=\"line\">collection.items.push(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> x <span class=\"keyword\">of</span> collection) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Built-in-Iterators\"><a href=\"#Built-in-Iterators\" class=\"headerlink\" title=\"Built-in Iterators\"></a>Built-in Iterators</h2><h3 id=\"collection-iterators\"><a href=\"#collection-iterators\" class=\"headerlink\" title=\"collection iterators\"></a>collection iterators</h3><ul>\n<li><code>entries()</code></li>\n<li><code>values()</code></li>\n<li><code>keys()</code></li>\n</ul>\n<h4 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries()\"></a><code>entries()</code></h4><ul>\n<li>array: [index, value]</li>\n<li>set: [value, value]</li>\n<li>map: [key, value]</li>\n</ul>\n<h4 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values()\"></a><code>values()</code></h4><ul>\n<li>array: value</li>\n<li>set: value</li>\n<li>map: value</li>\n</ul>\n<h4 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys()\"></a><code>keys()</code></h4><ul>\n<li>array: index</li>\n<li>set: value</li>\n<li>map: key</li>\n</ul>\n<h3 id=\"Default-Iterators-for-Collection-Types\"><a href=\"#Default-Iterators-for-Collection-Types\" class=\"headerlink\" title=\"Default Iterators for Collection Types\"></a>Default Iterators for Collection Types</h3><ul>\n<li>array: <code>values()</code></li>\n<li>set: <code>values()</code></li>\n<li>map: <code>entries()</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// destructuring and for-of loop</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">data.set(<span class=\"string\">'title'</span>, <span class=\"string\">'Understanding ECMAScript 6'</span>);</span><br><span class=\"line\">data.set(<span class=\"string\">'format'</span>, <span class=\"string\">'ebook'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// same as using data.entries()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> data) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">'='</span> + value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>NodeList</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> div <span class=\"keyword\">of</span> divs) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(div.id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Constructs-accept-iterables\"><a href=\"#Constructs-accept-iterables\" class=\"headerlink\" title=\"Constructs accept iterables\"></a>Constructs accept iterables</h2><p>Some other constructs in JS that use iterables are:</p>\n<ul>\n<li><code>for-of</code></li>\n<li>Destructuring of Arrays</li>\n<li>The spread operator (<code>…</code>)</li>\n<li><code>Promise.all</code> and <code>Promise.race</code> accept iterables over Promises.</li>\n<li>Maps and Sets</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([[<span class=\"number\">1</span>, <span class=\"string\">'one'</span>], [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>]]);</span><br><span class=\"line\">map.get(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c]);</span></span><br><span class=\"line\"><span class=\"string\">set.has('</span>c<span class=\"string\">');</span></span><br><span class=\"line\"><span class=\"string\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Advanced-Iterator-Functionality\"><a href=\"#Advanced-Iterator-Functionality\" class=\"headerlink\" title=\"Advanced Iterator Functionality\"></a>Advanced Iterator Functionality</h2><h3 id=\"passing-arguments-to-Iterators\"><a href=\"#passing-arguments-to-Iterators\" class=\"headerlink\" title=\"passing arguments to Iterators\"></a>passing arguments to Iterators</h3><p>The <code>next()</code> method also accepts a value which can be used to modify the internal state of the generator. A value passed to <code>next()</code> will be treated as the result of the last yield expression that paused the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> first = <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> second = <span class=\"keyword\">yield</span> first + <span class=\"number\">2</span>; <span class=\"comment\">// 4 + 2</span></span><br><span class=\"line\">  <span class=\"keyword\">yield</span> second + <span class=\"number\">3</span>; <span class=\"comment\">// 5 + 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">4</span>)); <span class=\"comment\">// \"&#123; value: 6, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next(<span class=\"number\">5</span>)); <span class=\"comment\">// \"&#123; value: 8, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Throw-and-Return\"><a href=\"#Throw-and-Return\" class=\"headerlink\" title=\"Throw and Return\"></a>Throw and Return</h3><ul>\n<li>throw</li>\n</ul>\n<p>Resume the execution of a generator by throwing an error into it and returns an object with two properties done and value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">yield</span> <span class=\"number\">42</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'Error caught!'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = gen();</span><br><span class=\"line\">g.next();</span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br><span class=\"line\">g.throw(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Something went wrong'</span>));</span><br><span class=\"line\"><span class=\"comment\">// \"Error caught!\"</span></span><br><span class=\"line\"><span class=\"comment\">// &#123; value: 42, done: false &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>return</li>\n</ul>\n<p>Return the given value and finishes the generator.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">createIterator</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = createIterator();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: 1, done: false &#125;\"</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// \"&#123; value: undefined, done: true &#125;\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Delegating-generators\"><a href=\"#Delegating-generators\" class=\"headerlink\" title=\"Delegating generators\"></a>Delegating generators</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* g1();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"string\">'56'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g2(<span class=\"number\">7</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 4, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '5', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: '6', done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 7, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 8, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p><code>yield*</code> is an expression, not a statement, so it evaluates to a value.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g4</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'foo'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">g5</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  result = <span class=\"keyword\">yield</span>* g4();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> iterator = g5();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 2, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: 3, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;,</span></span><br><span class=\"line\"><span class=\"comment\">// g4() returned &#123;value: 'foo', done: true&#125; at this point</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// \"foo\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Asynchronous-Task-Running\"><a href=\"#Asynchronous-Task-Running\" class=\"headerlink\" title=\"Asynchronous Task Running\"></a>Asynchronous Task Running</h2><h3 id=\"tradition-callback\"><a href=\"#tradition-callback\" class=\"headerlink\" title=\"tradition callback\"></a>tradition callback</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">'config.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, contents</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Asynchronous-task-runner\"><a href=\"#Asynchronous-task-runner\" class=\"headerlink\" title=\"Asynchronous task runner\"></a>Asynchronous task runner</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">taskDef</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// create the iterator, make available elsewhere</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> task = taskDef();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the task</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = task.next();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// recursive function to keep calling next()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// if there's more to do</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!result.done) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result.value === <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">        result.value(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            result = task.throw(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          result = task.next(data);</span><br><span class=\"line\">          step();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = task.next(result.value);</span><br><span class=\"line\">        step();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// start the process</span></span><br><span class=\"line\">  step();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">readFile</span>(<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">callback</span>) </span>&#123;</span><br><span class=\"line\">    fs.readFile(filename, callback);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">run(<span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> contents = <span class=\"keyword\">yield</span> readFile(<span class=\"string\">'config.json'</span>);</span><br><span class=\"line\">  doSomethingWith(contents);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Done'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"Pros-and-Cons\"><a href=\"#Pros-and-Cons\" class=\"headerlink\" title=\"Pros and Cons\"></a>Pros and Cons</h3><p>Pros:</p>\n<ul>\n<li>Lazy Evaluation: It is calculated as we demand it;</li>\n<li>Memory Efficient: We generate only the values that are needed. We can defer the computation till we need it.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Generators are one-time access only. Once you’ve exhausted all the values, you can’t iterate over it again. To generate the values again, you need to make a new generator object.</li>\n<li>Generators do not allow random access as possible with arrays. Since the values are generated one by one, accessing a random value would lead to computation of values till that element. Hence, it’s not random access.</li>\n</ul>\n<h2 id=\"Related-Reading\"><a href=\"#Related-Reading\" class=\"headerlink\" title=\"Related Reading\"></a>Related Reading</h2><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-iterators-and-generators\" target=\"_blank\" rel=\"noopener\">Iterators and Generators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_iteration.html\" target=\"_blank\" rel=\"noopener\">Iterables and iterators</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_generators.html\" target=\"_blank\" rel=\"noopener\">Generators</a></p>\n</li>\n<li><p>Brandon Morelli, <a href=\"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e\" target=\"_blank\" rel=\"noopener\">A Simple Guide to ES6 Iterators in JavaScript with Examples</a></p>\n</li>\n<li><p>Arfat Salman, <a href=\"https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5\" target=\"_blank\" rel=\"noopener\">Understanding Generators in ES6 JavaScript with Examples</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iterators and generators</a></p>\n</li>\n<li><p>MDN, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\" target=\"_blank\" rel=\"noopener\">Iteration protocols</a></p>\n</li>\n</ol>\n"},{"title":"learn ES6 modules","date":"2018-04-08T00:30:40.000Z","_content":"\nA module is Javascript code that automatically runs in **strict** mode with no way opt out.\n\nmodule and script are not the same.\n\n## import export\n\n### 1. named export (several per module)\n\n```javascript\n//------ lib.js ------\nexport const sqrt = Math.sqrt;\nexport function square(x) {\n  return x * x;\n}\nexport function diag(x, y) {\n  return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\n\nimport { square, diag } from './lib.js';\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n\n// can not reassign imported bindings\nsuqare = 2; // throw an error\n\n// or\n\n//------ main.js ------\nimport * as lib from 'lib';\nconsole.log(lib.square(11)); // 121\nconsole.log(lib.diag(4, 3)); // 5\n```\n\n* syntax: import { identifiers } from './example.js' -> module specifier\n\n* the list of binding to imports is not a destructured object\n\n* the last one this is called _namespace_ import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.\n\n* Be sure to include /, ./ or ../ at the begining of the string representing the file for the best compatibility across browsers and node.js.\n\n* lib.js is only execute once, no matter how many import statements have been decalared. After the code to import the module excutes, the instantiated module is kept in **memory** and reused whenever another import statement reference to it. e.g.\n\n```javascript\n// just execute lib.js once\nimport { diag } from './lib.js';\nimport { square } from './lib.js';\n```\n\n* import/export must be used outside condition statement or functions.\n\n```javascript\nif (flag) {\n    export flag; // syntax error\n}\n\nfunction tryImport() {\nimport { diag } from './lib.js'; // syntax error\n}\n```\n\n* ES6 import statement create _read-only_ bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.\n\n```javascript\nexport var name = 'Nico';\nexport function setName(x) {\n  name = x;\n}\n\nimport { name, setName } from './lib.js';\nconsole.log(name); // Nico\nsetName('Jack');\nconsole.log(name); // Jack\n\n// can not reassign imported bindings\nname = 'Nico'; // throw an error\n```\n\n* renaming export and import\n\n```javascript\nexport {sum as add};\nimport {add} form './example.js';\n\n// or\nimport { add as sum } from './example.js';\nconsole.log(typeof add); // udefined\n```\n\n### 2. default export (one per module)\n\n```javascript\n//------ myFunc.js ------\nexport default function () { ··· } // no semicolon!\n\n//------ main1.js ------\nimport myFunc from 'myFunc';\nmyFunc();\n\n// or\nfunction sum () { ... }\nexport default sum;\n\n// or\nexport sum2() { ... }\nexport {sum as default}\n\n// Or a class:\n\n//------ MyClass.js ------\nexport default class { ··· } // no semicolon!\n\n//------ main2.js ------\nimport MyClass from 'MyClass';\nconst inst = new MyClass();\n```\n\n### 3. combine\n\nyou can use named export and default together\n\nnote: the default must come before the non-defaults in import statement.\n\n```js\nexport var name = 'Nico';\nexport default function () { ··· }\n\nimport sum, { name } from './example.js';\n\n// or\nimport { default as sum, name } from './example.js';\n```\n\n### 4. re-exporting\n\n```js\nimport {add} form './example.js';\nexport add;\n\n// or short\nexport { add } from './example.js';\n\n// export with different name\nexport { add as sum } from './example.js';\n\n// export everything\nexport * from './example.js';\n```\n\nnote: by exporting everything, you're including default as well as any named exports.\n\n### 5. importing without bindings\n\nSome modules may not export anthing; instead they might only modify object in the gloabal scope. _Import without bindings are most likely to be used to create polyfills and shims_.\n\n```js\n// example.js\nArray.prototype.somethingFancy = function () { ...}\n\n// main.js\nimport './example.js'\nlet arr = [];\narr.somethingFancy();\n```\n\n## loading modules\n\n### 1. use <\bscript> as `defer`\n\n```html\n<!-- load a module JavaScript file -->\n<script type=\"module\" src=\"module.js\"></script>\n\n<!-- include a module inline -->\n<script type=\"module\">\n\nimport { sum } from \"./example.js\";\n\nlet result = sum(1, 2);\n\n</script>\n```\n\n* 'module' is not a content type like 'text/javascript', and browsers ignore `<script>` elements when type is unrecognized, providing good backwards-compatibility.\n\n* in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.\n\n* module sequence; `<script type=\"module\">` always acts as if the `defer` attribute is applied.\n\n```html\n<!-- this will execute first -->\n<script type=\"module\" src=\"module1.js\"></script>\n\n<!-- this will execute second -->\n<script type=\"module\">\nimport { sum } from \"./example.js\";\n\nlet result = sum(1, 2);\n</script>\n```\n\n* synchronies and sequential: **modules are parsed completely first to dientify all `import`, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.**\n\ni. download and parse `module1.js` , recursive download and parse import in `module1.js`;\n\nii. parse inline module\n\nonce loading complete\n\niiii. recursive execute `import` source in `module1.js`, then execute `module1.js`\n\niiiii. recursive execute `import` source in inline module, then execute inline module\n\n### 2. use <\bscript> as `async`\n\n```html\n<!-- no guarantee which one of these will execute first -->\n<script type=\"module\" async src=\"module1.js\"></script>\n<script type=\"module\" async src=\"module2.js\"></script>\n```\n\nthe `async` causes the script file to be executed as soon as the file is compeleted downloaded and parsed. the order in document does not affect the order in which the scripts are excuted. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.\n\n### 3. use `Worker`\n\n```js\n// load script.js as a script\nlet worker = new Worker('script.js');\n\n// load module.js as a module\nlet worker = new Worker('module.js', { type: 'module' });\n```\n\n## Support for cyclic dependencies\n\n### why support\n\nCyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.\n\nI think this example from nodejs document can clearly explain cyclic dependencies. <https://nodejs.org/api/modules.html#modules_cycles>\n\n```js\n// a.js\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n\n// b.js\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n\n// main.js\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done = %j, b.done = %j', a.done, b.done);\n```\n\nthe output is\n\n```bash\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\n```\n\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`. At that point, `b.js` tries to load `a.js`. In order to prevent an **infinite loop**, an **unfinished copy** of the `a.js` exports object is returned to the `b.js` module. `b.js` then finishes loading, and its exports object is provided to the `a.js` module.\n\n#### related reading material\n\n1.  Nicholas C. Zakas, [Understanding ECMAScript 6](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n2.  Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n\n3.  nodejs document, [Modules](https://nodejs.org/api/modules.html)\n","source":"_posts/learn-es6-modules.md","raw":"---\ntitle: learn ES6 modules\ndate: 2018-04-07 17:30:40\ncategories:\n- web\ntags:\n- ECMAScript2015\n- es6\n- module\n---\n\nA module is Javascript code that automatically runs in **strict** mode with no way opt out.\n\nmodule and script are not the same.\n\n## import export\n\n### 1. named export (several per module)\n\n```javascript\n//------ lib.js ------\nexport const sqrt = Math.sqrt;\nexport function square(x) {\n  return x * x;\n}\nexport function diag(x, y) {\n  return sqrt(square(x) + square(y));\n}\n\n//------ main.js ------\n\nimport { square, diag } from './lib.js';\nconsole.log(square(11)); // 121\nconsole.log(diag(4, 3)); // 5\n\n// can not reassign imported bindings\nsuqare = 2; // throw an error\n\n// or\n\n//------ main.js ------\nimport * as lib from 'lib';\nconsole.log(lib.square(11)); // 121\nconsole.log(lib.diag(4, 3)); // 5\n```\n\n* syntax: import { identifiers } from './example.js' -> module specifier\n\n* the list of binding to imports is not a destructured object\n\n* the last one this is called _namespace_ import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.\n\n* Be sure to include /, ./ or ../ at the begining of the string representing the file for the best compatibility across browsers and node.js.\n\n* lib.js is only execute once, no matter how many import statements have been decalared. After the code to import the module excutes, the instantiated module is kept in **memory** and reused whenever another import statement reference to it. e.g.\n\n```javascript\n// just execute lib.js once\nimport { diag } from './lib.js';\nimport { square } from './lib.js';\n```\n\n* import/export must be used outside condition statement or functions.\n\n```javascript\nif (flag) {\n    export flag; // syntax error\n}\n\nfunction tryImport() {\nimport { diag } from './lib.js'; // syntax error\n}\n```\n\n* ES6 import statement create _read-only_ bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.\n\n```javascript\nexport var name = 'Nico';\nexport function setName(x) {\n  name = x;\n}\n\nimport { name, setName } from './lib.js';\nconsole.log(name); // Nico\nsetName('Jack');\nconsole.log(name); // Jack\n\n// can not reassign imported bindings\nname = 'Nico'; // throw an error\n```\n\n* renaming export and import\n\n```javascript\nexport {sum as add};\nimport {add} form './example.js';\n\n// or\nimport { add as sum } from './example.js';\nconsole.log(typeof add); // udefined\n```\n\n### 2. default export (one per module)\n\n```javascript\n//------ myFunc.js ------\nexport default function () { ··· } // no semicolon!\n\n//------ main1.js ------\nimport myFunc from 'myFunc';\nmyFunc();\n\n// or\nfunction sum () { ... }\nexport default sum;\n\n// or\nexport sum2() { ... }\nexport {sum as default}\n\n// Or a class:\n\n//------ MyClass.js ------\nexport default class { ··· } // no semicolon!\n\n//------ main2.js ------\nimport MyClass from 'MyClass';\nconst inst = new MyClass();\n```\n\n### 3. combine\n\nyou can use named export and default together\n\nnote: the default must come before the non-defaults in import statement.\n\n```js\nexport var name = 'Nico';\nexport default function () { ··· }\n\nimport sum, { name } from './example.js';\n\n// or\nimport { default as sum, name } from './example.js';\n```\n\n### 4. re-exporting\n\n```js\nimport {add} form './example.js';\nexport add;\n\n// or short\nexport { add } from './example.js';\n\n// export with different name\nexport { add as sum } from './example.js';\n\n// export everything\nexport * from './example.js';\n```\n\nnote: by exporting everything, you're including default as well as any named exports.\n\n### 5. importing without bindings\n\nSome modules may not export anthing; instead they might only modify object in the gloabal scope. _Import without bindings are most likely to be used to create polyfills and shims_.\n\n```js\n// example.js\nArray.prototype.somethingFancy = function () { ...}\n\n// main.js\nimport './example.js'\nlet arr = [];\narr.somethingFancy();\n```\n\n## loading modules\n\n### 1. use <\bscript> as `defer`\n\n```html\n<!-- load a module JavaScript file -->\n<script type=\"module\" src=\"module.js\"></script>\n\n<!-- include a module inline -->\n<script type=\"module\">\n\nimport { sum } from \"./example.js\";\n\nlet result = sum(1, 2);\n\n</script>\n```\n\n* 'module' is not a content type like 'text/javascript', and browsers ignore `<script>` elements when type is unrecognized, providing good backwards-compatibility.\n\n* in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.\n\n* module sequence; `<script type=\"module\">` always acts as if the `defer` attribute is applied.\n\n```html\n<!-- this will execute first -->\n<script type=\"module\" src=\"module1.js\"></script>\n\n<!-- this will execute second -->\n<script type=\"module\">\nimport { sum } from \"./example.js\";\n\nlet result = sum(1, 2);\n</script>\n```\n\n* synchronies and sequential: **modules are parsed completely first to dientify all `import`, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.**\n\ni. download and parse `module1.js` , recursive download and parse import in `module1.js`;\n\nii. parse inline module\n\nonce loading complete\n\niiii. recursive execute `import` source in `module1.js`, then execute `module1.js`\n\niiiii. recursive execute `import` source in inline module, then execute inline module\n\n### 2. use <\bscript> as `async`\n\n```html\n<!-- no guarantee which one of these will execute first -->\n<script type=\"module\" async src=\"module1.js\"></script>\n<script type=\"module\" async src=\"module2.js\"></script>\n```\n\nthe `async` causes the script file to be executed as soon as the file is compeleted downloaded and parsed. the order in document does not affect the order in which the scripts are excuted. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.\n\n### 3. use `Worker`\n\n```js\n// load script.js as a script\nlet worker = new Worker('script.js');\n\n// load module.js as a module\nlet worker = new Worker('module.js', { type: 'module' });\n```\n\n## Support for cyclic dependencies\n\n### why support\n\nCyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.\n\nI think this example from nodejs document can clearly explain cyclic dependencies. <https://nodejs.org/api/modules.html#modules_cycles>\n\n```js\n// a.js\nconsole.log('a starting');\nexports.done = false;\nconst b = require('./b.js');\nconsole.log('in a, b.done = %j', b.done);\nexports.done = true;\nconsole.log('a done');\n\n// b.js\nconsole.log('b starting');\nexports.done = false;\nconst a = require('./a.js');\nconsole.log('in b, a.done = %j', a.done);\nexports.done = true;\nconsole.log('b done');\n\n// main.js\nconsole.log('main starting');\nconst a = require('./a.js');\nconst b = require('./b.js');\nconsole.log('in main, a.done = %j, b.done = %j', a.done, b.done);\n```\n\nthe output is\n\n```bash\n$ node main.js\nmain starting\na starting\nb starting\nin b, a.done = false\nb done\nin a, b.done = true\na done\nin main, a.done = true, b.done = true\n```\n\nWhen `main.js` loads `a.js`, then `a.js` in turn loads `b.js`. At that point, `b.js` tries to load `a.js`. In order to prevent an **infinite loop**, an **unfinished copy** of the `a.js` exports object is returned to the `b.js` module. `b.js` then finishes loading, and its exports object is provided to the `a.js` module.\n\n#### related reading material\n\n1.  Nicholas C. Zakas, [Understanding ECMAScript 6](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\n\n2.  Axel Rauschmayer, [Exploring ES6](http://exploringjs.com/es6/ch_modules.html)\n\n3.  nodejs document, [Modules](https://nodejs.org/api/modules.html)\n","slug":"learn-es6-modules","published":1,"updated":"2018-09-07T14:40:10.864Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjoeadx7s002hajs60hd8tek2","content":"<p>A module is Javascript code that automatically runs in <strong>strict</strong> mode with no way opt out.</p>\n<p>module and script are not the same.</p>\n<h2 id=\"import-export\"><a href=\"#import-export\" class=\"headerlink\" title=\"import export\"></a>import export</h2><h3 id=\"1-named-export-several-per-module\"><a href=\"#1-named-export-several-per-module\" class=\"headerlink\" title=\"1. named export (several per module)\"></a>1. named export (several per module)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ lib.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> sqrt = <span class=\"built_in\">Math</span>.sqrt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diag</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sqrt(square(x) + square(y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square, diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">suqare = <span class=\"number\">2</span>; <span class=\"comment\">// throw an error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lib <span class=\"keyword\">from</span> <span class=\"string\">'lib'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>syntax: import { identifiers } from ‘./example.js’ -&gt; module specifier</p>\n</li>\n<li><p>the list of binding to imports is not a destructured object</p>\n</li>\n<li><p>the last one this is called <em>namespace</em> import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.</p>\n</li>\n<li><p>Be sure to include /, ./ or ../ at the begining of the string representing the file for the best compatibility across browsers and node.js.</p>\n</li>\n<li><p>lib.js is only execute once, no matter how many import statements have been decalared. After the code to import the module excutes, the instantiated module is kept in <strong>memory</strong> and reused whenever another import statement reference to it. e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// just execute lib.js once</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>import/export must be used outside condition statement or functions.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> flag; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryImport</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ES6 import statement create <em>read-only</em> bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  name = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, setName &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Nico</span></span><br><span class=\"line\">setName(<span class=\"string\">'Jack'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">name = <span class=\"string\">'Nico'</span>; <span class=\"comment\">// throw an error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>renaming export and import</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> add&#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> add); <span class=\"comment\">// udefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-default-export-one-per-module\"><a href=\"#2-default-export-one-per-module\" class=\"headerlink\" title=\"2. default export (one per module)\"></a>2. default export (one per module)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ myFunc.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main1.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myFunc <span class=\"keyword\">from</span> <span class=\"string\">'myFunc'</span>;</span><br><span class=\"line\">myFunc();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\"></span>) </span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> sum2() &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or a class:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ MyClass.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main2.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MyClass <span class=\"keyword\">from</span> <span class=\"string\">'MyClass'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> inst = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-combine\"><a href=\"#3-combine\" class=\"headerlink\" title=\"3. combine\"></a>3. combine</h3><p>you can use named export and default together</p>\n<p>note: the default must come before the non-defaults in import statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum, &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> sum, name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-re-exporting\"><a href=\"#4-re-exporting\" class=\"headerlink\" title=\"4. re-exporting\"></a>4. re-exporting</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or short</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export with different name</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export everything</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<p>note: by exporting everything, you’re including default as well as any named exports.</p>\n<h3 id=\"5-importing-without-bindings\"><a href=\"#5-importing-without-bindings\" class=\"headerlink\" title=\"5. importing without bindings\"></a>5. importing without bindings</h3><p>Some modules may not export anthing; instead they might only modify object in the gloabal scope. <em>Import without bindings are most likely to be used to create polyfills and shims</em>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.js</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.somethingFancy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./example.js'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">arr.somethingFancy();</span><br></pre></td></tr></table></figure>\n<h2 id=\"loading-modules\"><a href=\"#loading-modules\" class=\"headerlink\" title=\"loading modules\"></a>loading modules</h2><h3 id=\"1-use-lt-script-gt-as-defer\"><a href=\"#1-use-lt-script-gt-as-defer\" class=\"headerlink\" title=\"1. use &lt;\bscript&gt; as defer\"></a>1. use &lt;\bscript&gt; as <code>defer</code></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- load a module JavaScript file --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- include a module inline --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./example.js\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>‘module’ is not a content type like ‘text/javascript’, and browsers ignore <code>&lt;script&gt;</code> elements when type is unrecognized, providing good backwards-compatibility.</p>\n</li>\n<li><p>in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.</p>\n</li>\n<li><p>module sequence; <code>&lt;script type=&quot;module&quot;&gt;</code> always acts as if the <code>defer</code> attribute is applied.</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute second --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./example.js\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>synchronies and sequential: <strong>modules are parsed completely first to dientify all <code>import</code>, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.</strong></li>\n</ul>\n<p>i. download and parse <code>module1.js</code> , recursive download and parse import in <code>module1.js</code>;</p>\n<p>ii. parse inline module</p>\n<p>once loading complete</p>\n<p>iiii. recursive execute <code>import</code> source in <code>module1.js</code>, then execute <code>module1.js</code></p>\n<p>iiiii. recursive execute <code>import</code> source in inline module, then execute inline module</p>\n<h3 id=\"2-use-lt-script-gt-as-async\"><a href=\"#2-use-lt-script-gt-as-async\" class=\"headerlink\" title=\"2. use &lt;\bscript&gt; as async\"></a>2. use &lt;\bscript&gt; as <code>async</code></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- no guarantee which one of these will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>the <code>async</code> causes the script file to be executed as soon as the file is compeleted downloaded and parsed. the order in document does not affect the order in which the scripts are excuted. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.</p>\n<h3 id=\"3-use-Worker\"><a href=\"#3-use-Worker\" class=\"headerlink\" title=\"3. use Worker\"></a>3. use <code>Worker</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load script.js as a script</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'script.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load module.js as a module</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'module.js'</span>, &#123; <span class=\"attr\">type</span>: <span class=\"string\">'module'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Support-for-cyclic-dependencies\"><a href=\"#Support-for-cyclic-dependencies\" class=\"headerlink\" title=\"Support for cyclic dependencies\"></a>Support for cyclic dependencies</h2><h3 id=\"why-support\"><a href=\"#why-support\" class=\"headerlink\" title=\"why support\"></a>why support</h3><p>Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.</p>\n<p>I think this example from nodejs document can clearly explain cyclic dependencies. <a href=\"https://nodejs.org/api/modules.html#modules_cycles\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/api/modules.html#modules_cycles</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in a, b.done = %j'</span>, b.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in b, a.done = %j'</span>, a.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main starting'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in main, a.done = %j, b.done = %j'</span>, a.done, b.done);</span><br></pre></td></tr></table></figure>\n<p>the output is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">main starting</span><br><span class=\"line\">a starting</span><br><span class=\"line\">b starting</span><br><span class=\"line\"><span class=\"keyword\">in</span> b, a.done = <span class=\"literal\">false</span></span><br><span class=\"line\">b <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> a, b.done = <span class=\"literal\">true</span></span><br><span class=\"line\">a <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> main, a.done = <span class=\"literal\">true</span>, b.done = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an <strong>infinite loop</strong>, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its exports object is provided to the <code>a.js</code> module.</p>\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></p>\n</li>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules</a></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>A module is Javascript code that automatically runs in <strong>strict</strong> mode with no way opt out.</p>\n<p>module and script are not the same.</p>\n<h2 id=\"import-export\"><a href=\"#import-export\" class=\"headerlink\" title=\"import export\"></a>import export</h2><h3 id=\"1-named-export-several-per-module\"><a href=\"#1-named-export-several-per-module\" class=\"headerlink\" title=\"1. named export (several per module)\"></a>1. named export (several per module)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ lib.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> sqrt = <span class=\"built_in\">Math</span>.sqrt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">square</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x * x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">diag</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sqrt(square(x) + square(y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square, diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">suqare = <span class=\"number\">2</span>; <span class=\"comment\">// throw an error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> lib <span class=\"keyword\">from</span> <span class=\"string\">'lib'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.square(<span class=\"number\">11</span>)); <span class=\"comment\">// 121</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lib.diag(<span class=\"number\">4</span>, <span class=\"number\">3</span>)); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>syntax: import { identifiers } from ‘./example.js’ -&gt; module specifier</p>\n</li>\n<li><p>the list of binding to imports is not a destructured object</p>\n</li>\n<li><p>the last one this is called <em>namespace</em> import because the lib object does not exist inside the lib.js file and instead created to be used as a namespace object for all the exported members of lib.js.</p>\n</li>\n<li><p>Be sure to include /, ./ or ../ at the begining of the string representing the file for the best compatibility across browsers and node.js.</p>\n</li>\n<li><p>lib.js is only execute once, no matter how many import statements have been decalared. After the code to import the module excutes, the instantiated module is kept in <strong>memory</strong> and reused whenever another import statement reference to it. e.g.</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// just execute lib.js once</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; square &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>import/export must be used outside condition statement or functions.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> flag; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tryImport</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; diag &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>; <span class=\"comment\">// syntax error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ES6 import statement create <em>read-only</em> bindings to variables, functions and classes. However you can use function to update in that module. and this change is automatically reflected on the imported name binding. e.g.</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  name = x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, setName &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./lib.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Nico</span></span><br><span class=\"line\">setName(<span class=\"string\">'Jack'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// Jack</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// can not reassign imported bindings</span></span><br><span class=\"line\">name = <span class=\"string\">'Nico'</span>; <span class=\"comment\">// throw an error</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>renaming export and import</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> add&#125;;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> add); <span class=\"comment\">// udefined</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-default-export-one-per-module\"><a href=\"#2-default-export-one-per-module\" class=\"headerlink\" title=\"2. default export (one per module)\"></a>2. default export (one per module)</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//------ myFunc.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main1.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myFunc <span class=\"keyword\">from</span> <span class=\"string\">'myFunc'</span>;</span><br><span class=\"line\">myFunc();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span> (<span class=\"params\"></span>) </span>&#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> sum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> sum2() &#123; ... &#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;sum <span class=\"keyword\">as</span> <span class=\"keyword\">default</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Or a class:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ MyClass.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> </span>&#123; ··· &#125; <span class=\"comment\">// no semicolon!</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//------ main2.js ------</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MyClass <span class=\"keyword\">from</span> <span class=\"string\">'MyClass'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> inst = <span class=\"keyword\">new</span> MyClass();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-combine\"><a href=\"#3-combine\" class=\"headerlink\" title=\"3. combine\"></a>3. combine</h3><p>you can use named export and default together</p>\n<p>note: the default must come before the non-defaults in import statement.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> name = <span class=\"string\">'Nico'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ··· &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> sum, &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">default</span> <span class=\"keyword\">as</span> sum, name &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-re-exporting\"><a href=\"#4-re-exporting\" class=\"headerlink\" title=\"4. re-exporting\"></a>4. re-exporting</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; form <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> add;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// or short</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export with different name</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; add <span class=\"keyword\">as</span> sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// export everything</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> * <span class=\"keyword\">from</span> <span class=\"string\">'./example.js'</span>;</span><br></pre></td></tr></table></figure>\n<p>note: by exporting everything, you’re including default as well as any named exports.</p>\n<h3 id=\"5-importing-without-bindings\"><a href=\"#5-importing-without-bindings\" class=\"headerlink\" title=\"5. importing without bindings\"></a>5. importing without bindings</h3><p>Some modules may not export anthing; instead they might only modify object in the gloabal scope. <em>Import without bindings are most likely to be used to create polyfills and shims</em>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// example.js</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.somethingFancy = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; ...&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./example.js'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [];</span><br><span class=\"line\">arr.somethingFancy();</span><br></pre></td></tr></table></figure>\n<h2 id=\"loading-modules\"><a href=\"#loading-modules\" class=\"headerlink\" title=\"loading modules\"></a>loading modules</h2><h3 id=\"1-use-lt-script-gt-as-defer\"><a href=\"#1-use-lt-script-gt-as-defer\" class=\"headerlink\" title=\"1. use &lt;\bscript&gt; as defer\"></a>1. use &lt;\bscript&gt; as <code>defer</code></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- load a module JavaScript file --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- include a module inline --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./example.js\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>‘module’ is not a content type like ‘text/javascript’, and browsers ignore <code>&lt;script&gt;</code> elements when type is unrecognized, providing good backwards-compatibility.</p>\n</li>\n<li><p>in above code, result is not exposed globally because it exists only withing the module and is therefore not added to window as a property.</p>\n</li>\n<li><p>module sequence; <code>&lt;script type=&quot;module&quot;&gt;</code> always acts as if the <code>defer</code> attribute is applied.</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- this will execute second --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123; sum &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./example.js\"</span>;</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">let</span> result = sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>synchronies and sequential: <strong>modules are parsed completely first to dientify all <code>import</code>, each import statement then triggers a fetch (either from network or cache) and no module is executed until all import resources have been loaded and executed.</strong></li>\n</ul>\n<p>i. download and parse <code>module1.js</code> , recursive download and parse import in <code>module1.js</code>;</p>\n<p>ii. parse inline module</p>\n<p>once loading complete</p>\n<p>iiii. recursive execute <code>import</code> source in <code>module1.js</code>, then execute <code>module1.js</code></p>\n<p>iiiii. recursive execute <code>import</code> source in inline module, then execute inline module</p>\n<h3 id=\"2-use-lt-script-gt-as-async\"><a href=\"#2-use-lt-script-gt-as-async\" class=\"headerlink\" title=\"2. use &lt;\bscript&gt; as async\"></a>2. use &lt;\bscript&gt; as <code>async</code></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- no guarantee which one of these will execute first --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"module\"</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>the <code>async</code> causes the script file to be executed as soon as the file is compeleted downloaded and parsed. the order in document does not affect the order in which the scripts are excuted. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.</p>\n<h3 id=\"3-use-Worker\"><a href=\"#3-use-Worker\" class=\"headerlink\" title=\"3. use Worker\"></a>3. use <code>Worker</code></h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// load script.js as a script</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'script.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// load module.js as a module</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> worker = <span class=\"keyword\">new</span> Worker(<span class=\"string\">'module.js'</span>, &#123; <span class=\"attr\">type</span>: <span class=\"string\">'module'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Support-for-cyclic-dependencies\"><a href=\"#Support-for-cyclic-dependencies\" class=\"headerlink\" title=\"Support for cyclic dependencies\"></a>Support for cyclic dependencies</h2><h3 id=\"why-support\"><a href=\"#why-support\" class=\"headerlink\" title=\"why support\"></a>why support</h3><p>Cyclic dependencies are not inherently evil. Especially for objects, you sometimes even want this kind of dependency. For example, in some trees (such as DOM documents), parents refer to children and children refer back to parents. In libraries, you can usually avoid cyclic dependencies via careful design. In a large system, though, they can happen, especially during refactoring. Then it is very useful if a module system supports them, because the system doesn’t break while you are refactoring.</p>\n<p>I think this example from nodejs document can clearly explain cyclic dependencies. <a href=\"https://nodejs.org/api/modules.html#modules_cycles\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/api/modules.html#modules_cycles</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in a, b.done = %j'</span>, b.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'a done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b starting'</span>);</span><br><span class=\"line\">exports.done = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in b, a.done = %j'</span>, a.done);</span><br><span class=\"line\">exports.done = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'b done'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'main starting'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'in main, a.done = %j, b.done = %j'</span>, a.done, b.done);</span><br></pre></td></tr></table></figure>\n<p>the output is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node main.js</span><br><span class=\"line\">main starting</span><br><span class=\"line\">a starting</span><br><span class=\"line\">b starting</span><br><span class=\"line\"><span class=\"keyword\">in</span> b, a.done = <span class=\"literal\">false</span></span><br><span class=\"line\">b <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> a, b.done = <span class=\"literal\">true</span></span><br><span class=\"line\">a <span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">in</span> main, a.done = <span class=\"literal\">true</span>, b.done = <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an <strong>infinite loop</strong>, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its exports object is provided to the <code>a.js</code> module.</p>\n<h4 id=\"related-reading-material\"><a href=\"#related-reading-material\" class=\"headerlink\" title=\"related reading material\"></a>related reading material</h4><ol>\n<li><p>Nicholas C. Zakas, <a href=\"https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a></p>\n</li>\n<li><p>Axel Rauschmayer, <a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a></p>\n</li>\n<li><p>nodejs document, <a href=\"https://nodejs.org/api/modules.html\" target=\"_blank\" rel=\"noopener\">Modules</a></p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjoeadx3d0000ajs6xv98k0da","category_id":"cjoeadx3n0004ajs64gctce1w","_id":"cjoeadx42000eajs6ky49iwnm"},{"post_id":"cjoeadx3u000cajs600yqa3g4","category_id":"cjoeadx3t000aajs6bnsupups","_id":"cjoeadx46000jajs6at0gtip0"},{"post_id":"cjoeadx3k0002ajs608v8eno9","category_id":"cjoeadx3t000aajs6bnsupups","_id":"cjoeadx48000najs6wr8ugp2p"},{"post_id":"cjoeadx3v000dajs6ok1eax23","category_id":"cjoeadx3n0004ajs64gctce1w","_id":"cjoeadx4a000qajs6orw0xzha"},{"post_id":"cjoeadx44000hajs6evdmqasb","category_id":"cjoeadx43000fajs6385dpfu3","_id":"cjoeadx4c000vajs6wnihxiqc"},{"post_id":"cjoeadx3p0006ajs6o4d8vrer","category_id":"cjoeadx43000fajs6385dpfu3","_id":"cjoeadx4d000yajs6gf9ah0l9"},{"post_id":"cjoeadx45000iajs6f6eyk48i","category_id":"cjoeadx43000fajs6385dpfu3","_id":"cjoeadx4e0010ajs6aqdw49h1"},{"post_id":"cjoeadx47000majs6x37ym6sh","category_id":"cjoeadx3t000aajs6bnsupups","_id":"cjoeadx4f0012ajs6ltqftqhg"},{"post_id":"cjoeadx3r0008ajs6oa64403t","category_id":"cjoeadx43000fajs6385dpfu3","_id":"cjoeadx4f0013ajs6tr5fiokd"},{"post_id":"cjoeadx4a000pajs69qsvkpvk","category_id":"cjoeadx3t000aajs6bnsupups","_id":"cjoeadx4f0015ajs6edqdqguk"},{"post_id":"cjoeadx4c000uajs6jpgdxfbi","category_id":"cjoeadx3t000aajs6bnsupups","_id":"cjoeadx4f0016ajs6vjj6w7bb"},{"post_id":"cjoeadx3s0009ajs63ewy5ob1","category_id":"cjoeadx43000fajs6385dpfu3","_id":"cjoeadx4g0018ajs6zt03xwja"},{"post_id":"cjoeadx4d000xajs6wwieuksy","category_id":"cjoeadx3t000aajs6bnsupups","_id":"cjoeadx4h001aajs6z4228lom"},{"post_id":"cjoeadx4e000zajs6zjfp20i9","category_id":"cjoeadx3t000aajs6bnsupups","_id":"cjoeadx4i001dajs6vn1i5zjp"},{"post_id":"cjoeadx7r002gajs6h3n4pa41","category_id":"cjoeadx43000fajs6385dpfu3","_id":"cjoeadx7t002jajs6kw8qplwz"},{"post_id":"cjoeadx7s002hajs60hd8tek2","category_id":"cjoeadx43000fajs6385dpfu3","_id":"cjoeadx7t002kajs6vbq2o1n2"}],"PostTag":[{"post_id":"cjoeadx3d0000ajs6xv98k0da","tag_id":"cjoeadx3o0005ajs62gw3swod","_id":"cjoeadx49000oajs6sgfpg9ae"},{"post_id":"cjoeadx3d0000ajs6xv98k0da","tag_id":"cjoeadx3t000bajs6ybqn2rpk","_id":"cjoeadx4b000rajs6mf5bklkl"},{"post_id":"cjoeadx3d0000ajs6xv98k0da","tag_id":"cjoeadx43000gajs6vnr9a0x4","_id":"cjoeadx4c000wajs60wd7gwom"},{"post_id":"cjoeadx3p0006ajs6o4d8vrer","tag_id":"cjoeadx46000lajs60eu4llre","_id":"cjoeadx4h0019ajs649lsiavf"},{"post_id":"cjoeadx3p0006ajs6o4d8vrer","tag_id":"cjoeadx4b000tajs6v85190gj","_id":"cjoeadx4h001bajs6fxcxsdac"},{"post_id":"cjoeadx3p0006ajs6o4d8vrer","tag_id":"cjoeadx4e0011ajs65gdayjdb","_id":"cjoeadx4i001eajs6fedqjetv"},{"post_id":"cjoeadx3p0006ajs6o4d8vrer","tag_id":"cjoeadx4f0014ajs6cxbhy42z","_id":"cjoeadx4i001fajs66ou2zggw"},{"post_id":"cjoeadx3r0008ajs6oa64403t","tag_id":"cjoeadx4f0017ajs6d3t5bwg3","_id":"cjoeadx4l001majs6y8a5g47a"},{"post_id":"cjoeadx3r0008ajs6oa64403t","tag_id":"cjoeadx4i001cajs6jgfeemka","_id":"cjoeadx4l001najs6z634i0kt"},{"post_id":"cjoeadx3r0008ajs6oa64403t","tag_id":"cjoeadx4i001gajs6dnnlxraq","_id":"cjoeadx4l001pajs6bn1pflhw"},{"post_id":"cjoeadx3r0008ajs6oa64403t","tag_id":"cjoeadx4j001hajs6nq8cgasx","_id":"cjoeadx4m001qajs6piv7pjlg"},{"post_id":"cjoeadx3r0008ajs6oa64403t","tag_id":"cjoeadx4j001iajs6g9kdgj2s","_id":"cjoeadx4m001sajs6187kf4ph"},{"post_id":"cjoeadx3r0008ajs6oa64403t","tag_id":"cjoeadx4j001jajs6acp2sczj","_id":"cjoeadx4m001tajs6tmzj0gxr"},{"post_id":"cjoeadx3r0008ajs6oa64403t","tag_id":"cjoeadx4k001kajs6kjqhg7vs","_id":"cjoeadx4m001vajs69i7wgmm4"},{"post_id":"cjoeadx3s0009ajs63ewy5ob1","tag_id":"cjoeadx4k001lajs60a0mbg9u","_id":"cjoeadx4n001wajs6bja7dhst"},{"post_id":"cjoeadx3s0009ajs63ewy5ob1","tag_id":"cjoeadx4l001oajs600cfossb","_id":"cjoeadx4n001yajs6kgze4u9y"},{"post_id":"cjoeadx3s0009ajs63ewy5ob1","tag_id":"cjoeadx4m001rajs6wg4x71pw","_id":"cjoeadx4n001zajs6tv9zpwol"},{"post_id":"cjoeadx3v000dajs6ok1eax23","tag_id":"cjoeadx4f0014ajs6cxbhy42z","_id":"cjoeadx4o0022ajs62x2c4633"},{"post_id":"cjoeadx3v000dajs6ok1eax23","tag_id":"cjoeadx4n001xajs6d5deifr6","_id":"cjoeadx4o0023ajs61dxyxgt9"},{"post_id":"cjoeadx3v000dajs6ok1eax23","tag_id":"cjoeadx4n0020ajs6ksshv1po","_id":"cjoeadx4o0025ajs6sfszcovv"},{"post_id":"cjoeadx44000hajs6evdmqasb","tag_id":"cjoeadx4o0021ajs6fskc6ik2","_id":"cjoeadx4o0026ajs6r7353j70"},{"post_id":"cjoeadx45000iajs6f6eyk48i","tag_id":"cjoeadx4o0024ajs6o4fgm4du","_id":"cjoeadx4q002bajs6asilymab"},{"post_id":"cjoeadx45000iajs6f6eyk48i","tag_id":"cjoeadx4p0027ajs6r4yq0qpq","_id":"cjoeadx4q002cajs69md4iuev"},{"post_id":"cjoeadx45000iajs6f6eyk48i","tag_id":"cjoeadx4p0028ajs6mrvlw7w3","_id":"cjoeadx4q002dajs6xxlfwde4"},{"post_id":"cjoeadx45000iajs6f6eyk48i","tag_id":"cjoeadx4p0029ajs66c69xd5f","_id":"cjoeadx4q002eajs6xhcsq4g2"},{"post_id":"cjoeadx4d000xajs6wwieuksy","tag_id":"cjoeadx4p002aajs64ms2qf4j","_id":"cjoeadx4q002fajs65dbxbbyj"},{"post_id":"cjoeadx7r002gajs6h3n4pa41","tag_id":"cjoeadx4f0017ajs6d3t5bwg3","_id":"cjoeadx7v002najs6gemuuv1m"},{"post_id":"cjoeadx7r002gajs6h3n4pa41","tag_id":"cjoeadx4i001cajs6jgfeemka","_id":"cjoeadx7w002oajs63m1t6v18"},{"post_id":"cjoeadx7r002gajs6h3n4pa41","tag_id":"cjoeadx7t002iajs6hlum4n97","_id":"cjoeadx7x002pajs6b5o6gwb7"},{"post_id":"cjoeadx7r002gajs6h3n4pa41","tag_id":"cjoeadx7u002lajs6yfu3yzu7","_id":"cjoeadx7x002qajs60owrkorl"},{"post_id":"cjoeadx7s002hajs60hd8tek2","tag_id":"cjoeadx4f0017ajs6d3t5bwg3","_id":"cjoeadx7x002rajs6uzplyj54"},{"post_id":"cjoeadx7s002hajs60hd8tek2","tag_id":"cjoeadx4i001cajs6jgfeemka","_id":"cjoeadx7y002sajs65yt2kv2q"},{"post_id":"cjoeadx7s002hajs60hd8tek2","tag_id":"cjoeadx7u002majs6swsjof1j","_id":"cjoeadx7y002tajs636swq2mz"}],"Tag":[{"name":"hexo","_id":"cjoeadx3o0005ajs62gw3swod"},{"name":"blog","_id":"cjoeadx3t000bajs6ybqn2rpk"},{"name":"github","_id":"cjoeadx43000gajs6vnr9a0x4"},{"name":"ECMAScript2016","_id":"cjoeadx46000lajs60eu4llre"},{"name":"es7","_id":"cjoeadx4b000tajs6v85190gj"},{"name":"decorator","_id":"cjoeadx4e0011ajs65gdayjdb"},{"name":"javascript","_id":"cjoeadx4f0014ajs6cxbhy42z"},{"name":"ECMAScript2015","_id":"cjoeadx4f0017ajs6d3t5bwg3"},{"name":"es6","_id":"cjoeadx4i001cajs6jgfeemka"},{"name":"var","_id":"cjoeadx4i001gajs6dnnlxraq"},{"name":"let","_id":"cjoeadx4j001hajs6nq8cgasx"},{"name":"const","_id":"cjoeadx4j001iajs6g9kdgj2s"},{"name":"block binding","_id":"cjoeadx4j001jajs6acp2sczj"},{"name":"hoisting","_id":"cjoeadx4k001kajs6kjqhg7vs"},{"name":"react","_id":"cjoeadx4k001lajs60a0mbg9u"},{"name":"react native","_id":"cjoeadx4l001oajs600cfossb"},{"name":"xcode","_id":"cjoeadx4m001rajs6wg4x71pw"},{"name":"setTimeout","_id":"cjoeadx4n001xajs6d5deifr6"},{"name":"setInterval","_id":"cjoeadx4n0020ajs6ksshv1po"},{"name":"html","_id":"cjoeadx4o0021ajs6fskc6ik2"},{"name":"window","_id":"cjoeadx4o0024ajs6o4fgm4du"},{"name":"events","_id":"cjoeadx4p0027ajs6r4yq0qpq"},{"name":"capture/bubbling","_id":"cjoeadx4p0028ajs6mrvlw7w3"},{"name":"delegate","_id":"cjoeadx4p0029ajs66c69xd5f"},{"name":"movie","_id":"cjoeadx4p002aajs64ms2qf4j"},{"name":"iterators","_id":"cjoeadx7t002iajs6hlum4n97"},{"name":"generators","_id":"cjoeadx7u002lajs6yfu3yzu7"},{"name":"module","_id":"cjoeadx7u002majs6swsjof1j"}]}}